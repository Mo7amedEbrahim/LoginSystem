
LoginSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00004b66  00004bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080011e  0080011e  00004cb8  2**0
                  ALLOC
  3 .stab         00005a48  00000000  00000000  00004cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000243a  00000000  00000000  0000a700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000cb3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000ce29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ee6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00011336  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_1>
       8:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__vector_2>
       c:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <main>
      8a:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7a 25 	jmp	0x4af4	; 0x4af4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 96 25 	jmp	0x4b2c	; 0x4b2c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 25 	jmp	0x4b04	; 0x4b04 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ef       	ldi	r22, 0xFD	; 253
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9e 25 	jmp	0x4b3c	; 0x4b3c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 86 25 	jmp	0x4b0c	; 0x4b0c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 a2 25 	jmp	0x4b44	; 0x4b44 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a6 25 	jmp	0x4b4c	; 0x4b4c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_InitMaster>:
static u8 *pGu8_DataBuffer = NULL;
static u8 Gu8_BufferSize = 0;
static u8 Gu8_BufferIndex = 0;
static void(*SPI_FunctionPTR)(void) = NULLPTR ;

ES_t SPI_InitMaster(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorstate = ES_NOK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
    /*  Select Master   */
    SET_BIT(SPCR,SPCR_MSTR);
     caa:	ad e2       	ldi	r26, 0x2D	; 45
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ed e2       	ldi	r30, 0x2D	; 45
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	80 61       	ori	r24, 0x10	; 16
     cb6:	8c 93       	st	X, r24
    /*  Data Order Select  */
            #if SPI_DATA_ORDER == SPI_MSB_FIRST
            CLR_BIT(SPCR,SPCR_DORD);
     cb8:	ad e2       	ldi	r26, 0x2D	; 45
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	ed e2       	ldi	r30, 0x2D	; 45
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 7d       	andi	r24, 0xDF	; 223
     cc4:	8c 93       	st	X, r24
            #endif
    /*  Select Clock Polarity   */
            #if SPI_CLK_POLARITY  ==  SPI_SCK_HIGH_IDLE
            SET_BIT(SPCR,SPCR_CPOL);
            #elif SPI_CLK_POLARITY  ==  SPI_SCK_LOW_IDLE
            CLR_BIT(SPCR,SPCR_CPOL);
     cc6:	ad e2       	ldi	r26, 0x2D	; 45
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	ed e2       	ldi	r30, 0x2D	; 45
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	87 7f       	andi	r24, 0xF7	; 247
     cd2:	8c 93       	st	X, r24
            #endif
    /*  Select Clock Phase  */
            #if SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_LEADING
            CLR_BIT(SPCR,SPCR_CPHA);
     cd4:	ad e2       	ldi	r26, 0x2D	; 45
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ed e2       	ldi	r30, 0x2D	; 45
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8b 7f       	andi	r24, 0xFB	; 251
     ce0:	8c 93       	st	X, r24
            #elif SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_TRAILING
            SET_BIT(SPCR,SPCR_CPHA);
            #endif
    /*  Choose SCK Freq/8*/
            SET_BIT(SPSR,SPSR_SPI2X);
     ce2:	ae e2       	ldi	r26, 0x2E	; 46
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ee e2       	ldi	r30, 0x2E	; 46
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	81 60       	ori	r24, 0x01	; 1
     cee:	8c 93       	st	X, r24
            SET_BIT(SPCR,SPCR_SPR0);
     cf0:	ad e2       	ldi	r26, 0x2D	; 45
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	ed e2       	ldi	r30, 0x2D	; 45
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	81 60       	ori	r24, 0x01	; 1
     cfc:	8c 93       	st	X, r24
            CLR_BIT(SPCR,SPCR_SPR1);
     cfe:	ad e2       	ldi	r26, 0x2D	; 45
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ed e2       	ldi	r30, 0x2D	; 45
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8d 7f       	andi	r24, 0xFD	; 253
     d0a:	8c 93       	st	X, r24
    /*  Enable SPI Module  */
    SET_BIT(SPCR,SPCR_SPE);
     d0c:	ad e2       	ldi	r26, 0x2D	; 45
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ed e2       	ldi	r30, 0x2D	; 45
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	8c 93       	st	X, r24
    Local_enuErrorstate = ES_OK;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorstate;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <SPI_InitSlave>:

ES_t SPI_InitSlave(void){
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	0f 92       	push	r0
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
    	ES_t Local_enuErrorstate = ES_NOK;
     d32:	19 82       	std	Y+1, r1	; 0x01
        /*  Select Slave   */
    	CLR_BIT(SPCR,SPCR_MSTR);
     d34:	ad e2       	ldi	r26, 0x2D	; 45
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ed e2       	ldi	r30, 0x2D	; 45
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	8c 93       	st	X, r24
    	/*  Data Order Select  */
                #if SPI_DATA_ORDER == SPI_MSB_FIRST
                CLR_BIT(SPCR,SPCR_DORD);
     d42:	ad e2       	ldi	r26, 0x2D	; 45
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ed e2       	ldi	r30, 0x2D	; 45
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8f 7d       	andi	r24, 0xDF	; 223
     d4e:	8c 93       	st	X, r24
                #endif
        /*  Select Clock Polarity   */
                #if SPI_CLK_POLARITY  ==  SPI_SCK_HIGH_IDLE
                SET_BIT(SPCR,SPCR_CPOL);
                #elif SPI_CLK_POLARITY  ==  SPI_SCK_LOW_IDLE
                CLR_BIT(SPCR,SPCR_CPOL);
     d50:	ad e2       	ldi	r26, 0x2D	; 45
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ed e2       	ldi	r30, 0x2D	; 45
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	87 7f       	andi	r24, 0xF7	; 247
     d5c:	8c 93       	st	X, r24
                #endif
        /*  Select Clock Phase  */
                #if SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_LEADING
                CLR_BIT(SPCR,SPCR_CPHA);
     d5e:	ad e2       	ldi	r26, 0x2D	; 45
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ed e2       	ldi	r30, 0x2D	; 45
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	8c 93       	st	X, r24
                #elif SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_TRAILING
                SET_BIT(SPCR,SPCR_CPHA);
                #endif
        /*  Enable SPI Module  */
        SET_BIT(SPCR,SPCR_SPE);
     d6c:	ad e2       	ldi	r26, 0x2D	; 45
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	ed e2       	ldi	r30, 0x2D	; 45
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 64       	ori	r24, 0x40	; 64
     d78:	8c 93       	st	X, r24
    return Local_enuErrorstate;
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <SPI_Transceive>:




ES_t SPI_Transceive(u8 Data,u8 *pRxData)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <SPI_Transceive+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <SPI_Transceive+0x8>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	7c 83       	std	Y+4, r23	; 0x04
     d94:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_OK;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	89 83       	std	Y+1, r24	; 0x01

        if(SPI_State == SPI_BUSY){
     d9a:	80 91 05 01 	lds	r24, 0x0105
     d9e:	88 23       	and	r24, r24
     da0:	19 f4       	brne	.+6      	; 0xda8 <SPI_Transceive+0x24>
            Local_enuErrorState = ES_BUSY_FUNCTION;
     da2:	85 e0       	ldi	r24, 0x05	; 5
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	14 c0       	rjmp	.+40     	; 0xdd0 <SPI_Transceive+0x4c>
        }
        else{
        SPI_State = SPI_BUSY;
     da8:	10 92 05 01 	sts	0x0105, r1
        /* Set SS low to select slave */
        //DIO_SetPinValue(PORTB,PIN4,LOW);
        
        /* Write data to SPI data register */
        SPDR = Data;
     dac:	ef e2       	ldi	r30, 0x2F	; 47
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	80 83       	st	Z, r24
        
        /* Wait for the SPIF flag to be set */
        while (GET_BIT(SPSR, SPSR_SPIF) == 0);
     db4:	ee e2       	ldi	r30, 0x2E	; 46
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	dc f7       	brge	.-10     	; 0xdb4 <SPI_Transceive+0x30>
        
        /* Read received data from SPI data register */
        *pRxData = SPDR;
     dbe:	ef e2       	ldi	r30, 0x2F	; 47
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	eb 81       	ldd	r30, Y+3	; 0x03
     dc6:	fc 81       	ldd	r31, Y+4	; 0x04
     dc8:	80 83       	st	Z, r24
        
        /* Set SS high to deselect slave */
        //DIO_SetPinValue(PORTB,PIN4,HIGH);
        SPI_State = SPI_IDLE;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 05 01 	sts	0x0105, r24
    }
    return Local_enuErrorState;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <SPI_SendBufferSynch>:

ES_t SPI_SendBufferSynch(u8 *DataBuffer,u8 BufferSize){
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <SPI_SendBufferSynch+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <SPI_SendBufferSynch+0x8>
     de8:	0f 92       	push	r0
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	6d 83       	std	Y+5, r22	; 0x05
    ES_t Local_enuErrorState = ES_NOK;
     df4:	1a 82       	std	Y+2, r1	; 0x02
    if(DataBuffer == NULLPTR){
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	9c 81       	ldd	r25, Y+4	; 0x04
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	19 f4       	brne	.+6      	; 0xe04 <SPI_SendBufferSynch+0x24>
        Local_enuErrorState = ES_NULL_POINTER;
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	26 c0       	rjmp	.+76     	; 0xe50 <SPI_SendBufferSynch+0x70>
    }
    else{
        if(SPI_State == SPI_BUSY){
     e04:	80 91 05 01 	lds	r24, 0x0105
     e08:	88 23       	and	r24, r24
     e0a:	19 f4       	brne	.+6      	; 0xe12 <SPI_SendBufferSynch+0x32>
            Local_enuErrorState = ES_BUSY_FUNCTION;
     e0c:	85 e0       	ldi	r24, 0x05	; 5
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	1c c0       	rjmp	.+56     	; 0xe4a <SPI_SendBufferSynch+0x6a>
        }
        else{
            SPI_State = SPI_BUSY;
     e12:	10 92 05 01 	sts	0x0105, r1
            u8 Local_Index = 0;
     e16:	19 82       	std	Y+1, r1	; 0x01
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <SPI_SendBufferSynch+0x62>
            while(Local_Index < BufferSize){
                Local_enuErrorState = SPI_Transceive(DataBuffer[Local_Index],NULLPTR);
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	9c 81       	ldd	r25, Y+4	; 0x04
     e24:	fc 01       	movw	r30, r24
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	80 81       	ld	r24, Z
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
     e34:	8a 83       	std	Y+2, r24	; 0x02
                if (Local_enuErrorState != ES_OK) {
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	39 f4       	brne	.+14     	; 0xe4a <SPI_SendBufferSynch+0x6a>
                break;
                }
                Local_Index++;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	89 83       	std	Y+1, r24	; 0x01
            Local_enuErrorState = ES_BUSY_FUNCTION;
        }
        else{
            SPI_State = SPI_BUSY;
            u8 Local_Index = 0;
            while(Local_Index < BufferSize){
     e42:	99 81       	ldd	r25, Y+1	; 0x01
     e44:	8d 81       	ldd	r24, Y+5	; 0x05
     e46:	98 17       	cp	r25, r24
     e48:	40 f3       	brcs	.-48     	; 0xe1a <SPI_SendBufferSynch+0x3a>
                break;
                }
                Local_Index++;
            }
        }
        SPI_State = SPI_IDLE;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	80 93 05 01 	sts	0x0105, r24
    }
    return Local_enuErrorState;
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <SPI_SendBufferASynch>:

ES_t SPI_SendBufferASynch(u8 *DataBuffer, u8 BufferSize, void(*LocalFunc)(void)){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <SPI_SendBufferASynch+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <SPI_SendBufferASynch+0x8>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <SPI_SendBufferASynch+0xa>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	9b 83       	std	Y+3, r25	; 0x03
     e72:	8a 83       	std	Y+2, r24	; 0x02
     e74:	6c 83       	std	Y+4, r22	; 0x04
     e76:	5e 83       	std	Y+6, r21	; 0x06
     e78:	4d 83       	std	Y+5, r20	; 0x05
    ES_t Local_enuErrorState = ES_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
    if(DataBuffer == NULLPTR || LocalFunc == NULLPTR){
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	21 f0       	breq	.+8      	; 0xe8e <SPI_SendBufferASynch+0x2c>
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	19 f4       	brne	.+6      	; 0xe94 <SPI_SendBufferASynch+0x32>
        Local_enuErrorState = ES_NULL_POINTER;
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	37 c0       	rjmp	.+110    	; 0xf02 <SPI_SendBufferASynch+0xa0>
    }
    else{
        if(SPI_State == SPI_BUSY){
     e94:	80 91 05 01 	lds	r24, 0x0105
     e98:	88 23       	and	r24, r24
     e9a:	19 f4       	brne	.+6      	; 0xea2 <SPI_SendBufferASynch+0x40>
            Local_enuErrorState = ES_BUSY_FUNCTION;
     e9c:	85 e0       	ldi	r24, 0x05	; 5
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	30 c0       	rjmp	.+96     	; 0xf02 <SPI_SendBufferASynch+0xa0>
        }
        else{
            SPI_State = SPI_BUSY;
     ea2:	10 92 05 01 	sts	0x0105, r1
            pGu8_DataBuffer = DataBuffer;
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	90 93 1f 01 	sts	0x011F, r25
     eae:	80 93 1e 01 	sts	0x011E, r24
            Gu8_BufferSize = BufferSize;
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	80 93 20 01 	sts	0x0120, r24
            SPI_FunctionPTR = LocalFunc;
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	90 93 23 01 	sts	0x0123, r25
     ec0:	80 93 22 01 	sts	0x0122, r24
            Gu8_BufferIndex = 0;
     ec4:	10 92 21 01 	sts	0x0121, r1
            /*  Enable SPI Interrupt    */
            SET_BIT(SPCR,SPCR_SPIE);
     ec8:	ad e2       	ldi	r26, 0x2D	; 45
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	ed e2       	ldi	r30, 0x2D	; 45
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	8c 93       	st	X, r24
            /*  Start Transmission  */
            SPDR = pGu8_DataBuffer[Gu8_BufferIndex];
     ed6:	af e2       	ldi	r26, 0x2F	; 47
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	20 91 1e 01 	lds	r18, 0x011E
     ede:	30 91 1f 01 	lds	r19, 0x011F
     ee2:	80 91 21 01 	lds	r24, 0x0121
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	f9 01       	movw	r30, r18
     eec:	e8 0f       	add	r30, r24
     eee:	f9 1f       	adc	r31, r25
     ef0:	80 81       	ld	r24, Z
     ef2:	8c 93       	st	X, r24
            Gu8_BufferIndex++;
     ef4:	80 91 21 01 	lds	r24, 0x0121
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 21 01 	sts	0x0121, r24
            Local_enuErrorState = ES_OK;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    return Local_enuErrorState;
     f02:	89 81       	ldd	r24, Y+1	; 0x01
}
     f04:	26 96       	adiw	r28, 0x06	; 6
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <SPI_EnableInterrupt>:



ES_t SPI_EnableInterrupt(void){
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SPCR,SPCR_SPIE);
     f1e:	ad e2       	ldi	r26, 0x2D	; 45
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	ed e2       	ldi	r30, 0x2D	; 45
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	8c 93       	st	X, r24
    return ES_OK;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <SPI_DisableInterrupt>:

ES_t SPI_DisableInterrupt(void){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SPCR,SPCR_SPIE);
     f3c:	ad e2       	ldi	r26, 0x2D	; 45
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ed e2       	ldi	r30, 0x2D	; 45
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 77       	andi	r24, 0x7F	; 127
     f48:	8c 93       	st	X, r24
    return ES_OK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <SPI_GetStatus>:

ES_t SPI_GetStatus(u8* Copy_u8Status)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <SPI_GetStatus+0x6>
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
    /* Check if the input argument is NULL */
    if (Copy_u8Status == NULLPTR) {
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	19 f4       	brne	.+6      	; 0xf70 <SPI_GetStatus+0x1e>
        return ES_NULL_POINTER;
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	0f c0       	rjmp	.+30     	; 0xf8e <SPI_GetStatus+0x3c>
    }
    
    /* Check if SPI is busy */
    if (GET_BIT(SPSR, SPSR_SPIF) == 0) {
     f70:	ee e2       	ldi	r30, 0x2E	; 46
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	88 23       	and	r24, r24
     f78:	24 f0       	brlt	.+8      	; 0xf82 <SPI_GetStatus+0x30>
        /* SPI is busy */
        *Copy_u8Status = SPI_BUSY;
     f7a:	e9 81       	ldd	r30, Y+1	; 0x01
     f7c:	fa 81       	ldd	r31, Y+2	; 0x02
     f7e:	10 82       	st	Z, r1
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <SPI_GetStatus+0x38>
    } else {
        /* SPI is not busy */
        *Copy_u8Status = SPI_IDLE;
     f82:	e9 81       	ldd	r30, Y+1	; 0x01
     f84:	fa 81       	ldd	r31, Y+2	; 0x02
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 83       	st	Z, r24
    }
    
    /* Return success status */
    return ES_OK;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <__vector_12>:


ISR(__vector_12){
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	ef 93       	push	r30
     fbc:	ff 93       	push	r31
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
    /* Check if all data has been sent */
    if(Gu8_BufferIndex < Gu8_BufferSize){
     fc6:	90 91 21 01 	lds	r25, 0x0121
     fca:	80 91 20 01 	lds	r24, 0x0120
     fce:	98 17       	cp	r25, r24
     fd0:	a8 f4       	brcc	.+42     	; 0xffc <__vector_12+0x60>
        /* Send the next byte of data */
        SPDR = pGu8_DataBuffer[Gu8_BufferIndex];
     fd2:	af e2       	ldi	r26, 0x2F	; 47
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	20 91 1e 01 	lds	r18, 0x011E
     fda:	30 91 1f 01 	lds	r19, 0x011F
     fde:	80 91 21 01 	lds	r24, 0x0121
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	f9 01       	movw	r30, r18
     fe8:	e8 0f       	add	r30, r24
     fea:	f9 1f       	adc	r31, r25
     fec:	80 81       	ld	r24, Z
     fee:	8c 93       	st	X, r24
        Gu8_BufferIndex++;
     ff0:	80 91 21 01 	lds	r24, 0x0121
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	80 93 21 01 	sts	0x0121, r24
     ffa:	0f c0       	rjmp	.+30     	; 0x101a <__vector_12+0x7e>
    }
    else{
        /*  Disable SPI Interrupt   */
        CLR_BIT(SPCR,SPCR_SPIE);
     ffc:	ad e2       	ldi	r26, 0x2D	; 45
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ed e2       	ldi	r30, 0x2D	; 45
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 77       	andi	r24, 0x7F	; 127
    1008:	8c 93       	st	X, r24
        /*  Reset SPI State */
        SPI_State = SPI_IDLE;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 05 01 	sts	0x0105, r24
        /*  Call Back Fucntion  */
        SPI_FunctionPTR();
    1010:	e0 91 22 01 	lds	r30, 0x0122
    1014:	f0 91 23 01 	lds	r31, 0x0123
    1018:	09 95       	icall
    }
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <PORT_Init>:
*@brief Initializes the PORT peripheral.
This function configures the direction and initial values of the PORTA, PORTB, PORTC, and PORTD registers.
*@return ES_t Returns ES_OK if the initialization was successful, otherwise ES_NOK.
*/
ES_t PORT_Init(void)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
   ES_t Local_enuErrorstate = ES_NOK;
    104a:	19 82       	std	Y+1, r1	; 0x01
	/*DIRECTION*/
   DDRA_REG = PORTA_DIR ;
    104c:	ea e3       	ldi	r30, 0x3A	; 58
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	10 82       	st	Z, r1
   DDRB_REG = PORTB_DIR ;
    1052:	e7 e3       	ldi	r30, 0x37	; 55
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 eb       	ldi	r24, 0xB0	; 176
    1058:	80 83       	st	Z, r24
   DDRC_REG = PORTC_DIR ;
    105a:	e4 e3       	ldi	r30, 0x34	; 52
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	10 82       	st	Z, r1
   DDRD_REG = PORTD_DIR ;
    1060:	e1 e3       	ldi	r30, 0x31	; 49
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	80 83       	st	Z, r24
   /*INITIAL VALUE*/
   PORTA_REG = PORTA_VALUE ;
    1068:	eb e3       	ldi	r30, 0x3B	; 59
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	10 82       	st	Z, r1
   PORTB_REG = PORTB_VALUE ;
    106e:	e8 e3       	ldi	r30, 0x38	; 56
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	10 82       	st	Z, r1
   PORTC_REG = PORTC_VALUE ;
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	10 82       	st	Z, r1
   PORTD_REG = PORTD_VALUE ;
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	10 82       	st	Z, r1

   Local_enuErrorstate = ES_OK;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1084:	89 81       	ldd	r24, Y+1	; 0x01

}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <GIE_Enable>:
/****************************************************************************************/

#include "GIE_interface.h"


ES_t GIE_Enable(void){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1098:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(SREG,SREG_GIE);
    109a:	af e5       	ldi	r26, 0x5F	; 95
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ef e5       	ldi	r30, 0x5F	; 95
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	80 68       	ori	r24, 0x80	; 128
    10a6:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <GIE_Disable>:

ES_t GIE_Disable(void){
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	0f 92       	push	r0
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    10c0:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(SREG,SREG_GIE);
    10c2:	af e5       	ldi	r26, 0x5F	; 95
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ef e5       	ldi	r30, 0x5F	; 95
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8f 77       	andi	r24, 0x7F	; 127
    10ce:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <EXTI_INT0Init>:
static void (*INT2_FunctionPointer) (void) = NULLPTR;



/*		External Interrupt 0 APIs   	*/
ES_t EXTI_INT0Init(u8 Local_u8Sense){
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <EXTI_INT0Init+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <EXTI_INT0Init+0x8>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    10ec:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <EXTI_INT0Init+0x18>
    10f4:	5d c0       	rjmp	.+186    	; 0x11b0 <EXTI_INT0Init+0xd2>

	switch(Local_u8Sense){
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	3c 83       	std	Y+4, r19	; 0x04
    10fe:	2b 83       	std	Y+3, r18	; 0x03
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	91 05       	cpc	r25, r1
    1108:	21 f1       	breq	.+72     	; 0x1152 <EXTI_INT0Init+0x74>
    110a:	2b 81       	ldd	r18, Y+3	; 0x03
    110c:	3c 81       	ldd	r19, Y+4	; 0x04
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <EXTI_INT0Init+0x40>
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	61 f0       	breq	.+24     	; 0x1134 <EXTI_INT0Init+0x56>
    111c:	46 c0       	rjmp	.+140    	; 0x11aa <EXTI_INT0Init+0xcc>
    111e:	2b 81       	ldd	r18, Y+3	; 0x03
    1120:	3c 81       	ldd	r19, Y+4	; 0x04
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	21 f1       	breq	.+72     	; 0x1170 <EXTI_INT0Init+0x92>
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	91 05       	cpc	r25, r1
    1130:	71 f1       	breq	.+92     	; 0x118e <EXTI_INT0Init+0xb0>
    1132:	3b c0       	rjmp	.+118    	; 0x11aa <EXTI_INT0Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1134:	a5 e5       	ldi	r26, 0x55	; 85
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e5 e5       	ldi	r30, 0x55	; 85
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8e 7f       	andi	r24, 0xFE	; 254
    1140:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1142:	a5 e5       	ldi	r26, 0x55	; 85
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e5 e5       	ldi	r30, 0x55	; 85
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	8c 93       	st	X, r24
    1150:	2c c0       	rjmp	.+88     	; 0x11aa <EXTI_INT0Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1152:	a5 e5       	ldi	r26, 0x55	; 85
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e5 e5       	ldi	r30, 0x55	; 85
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1160:	a5 e5       	ldi	r26, 0x55	; 85
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e5       	ldi	r30, 0x55	; 85
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	8d 7f       	andi	r24, 0xFD	; 253
    116c:	8c 93       	st	X, r24
    116e:	1d c0       	rjmp	.+58     	; 0x11aa <EXTI_INT0Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1170:	a5 e5       	ldi	r26, 0x55	; 85
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e5 e5       	ldi	r30, 0x55	; 85
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8e 7f       	andi	r24, 0xFE	; 254
    117c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    117e:	a5 e5       	ldi	r26, 0x55	; 85
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e5 e5       	ldi	r30, 0x55	; 85
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	82 60       	ori	r24, 0x02	; 2
    118a:	8c 93       	st	X, r24
    118c:	0e c0       	rjmp	.+28     	; 0x11aa <EXTI_INT0Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    118e:	a5 e5       	ldi	r26, 0x55	; 85
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e5 e5       	ldi	r30, 0x55	; 85
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	81 60       	ori	r24, 0x01	; 1
    119a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    119c:	a5 e5       	ldi	r26, 0x55	; 85
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e5       	ldi	r30, 0x55	; 85
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8c 93       	st	X, r24
			break;
		}
			Local_enuErrorstate = ES_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <EXTI_INT0Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT0);
    11b4:	ab e5       	ldi	r26, 0x5B	; 91
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	eb e5       	ldi	r30, 0x5B	; 91
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 64       	ori	r24, 0x40	; 64
    11c0:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <EXTI_u8INT0Status>:

ES_t   EXTI_u8INT0Status(u8 *Copy_u8Status){
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <EXTI_u8INT0Status+0x6>
    11d8:	0f 92       	push	r0
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	9b 83       	std	Y+3, r25	; 0x03
    11e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    11e2:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF0) == 1){
    11e4:	ea e5       	ldi	r30, 0x5A	; 90
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	82 95       	swap	r24
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	81 70       	andi	r24, 0x01	; 1
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	88 23       	and	r24, r24
    11fc:	31 f0       	breq	.+12     	; 0x120a <EXTI_u8INT0Status+0x38>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    11fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1200:	fb 81       	ldd	r31, Y+3	; 0x03
    1202:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <EXTI_u8INT0Status+0x5e>
	}
	else if(GET_BIT(GIFR,GIFR_INTF0) == 0){
    120a:	ea e5       	ldi	r30, 0x5A	; 90
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	82 95       	swap	r24
    1212:	86 95       	lsr	r24
    1214:	86 95       	lsr	r24
    1216:	83 70       	andi	r24, 0x03	; 3
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	90 70       	andi	r25, 0x00	; 0
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	31 f4       	brne	.+12     	; 0x1230 <EXTI_u8INT0Status+0x5e>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <EXTI_SetCallBackINT0>:

ES_t EXTI_SetCallBackINT0( void(*LocalPtr)(void) ){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <EXTI_SetCallBackINT0+0x6>
    1244:	0f 92       	push	r0
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	9b 83       	std	Y+3, r25	; 0x03
    124c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    124e:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	49 f0       	breq	.+18     	; 0x126a <EXTI_SetCallBackINT0+0x2c>
	INT0_FunctionPointer = LocalPtr;
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	9b 81       	ldd	r25, Y+3	; 0x03
    125c:	90 93 25 01 	sts	0x0125, r25
    1260:	80 93 24 01 	sts	0x0124, r24
	Local_enuErrorstate = ES_OK;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
    1268:	02 c0       	rjmp	.+4      	; 0x126e <EXTI_SetCallBackINT0+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <__vector_1>:

ISR(__vector_1){
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	INT0_FunctionPointer();
    12a6:	e0 91 24 01 	lds	r30, 0x0124
    12aa:	f0 91 25 01 	lds	r31, 0x0125
    12ae:	09 95       	icall
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	bf 91       	pop	r27
    12ba:	af 91       	pop	r26
    12bc:	9f 91       	pop	r25
    12be:	8f 91       	pop	r24
    12c0:	7f 91       	pop	r23
    12c2:	6f 91       	pop	r22
    12c4:	5f 91       	pop	r21
    12c6:	4f 91       	pop	r20
    12c8:	3f 91       	pop	r19
    12ca:	2f 91       	pop	r18
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <EXTI_INT1Init>:


/*		External Interrupt 1 APIs   	*/
ES_t EXTI_INT1Init(u8 Local_u8Sense){
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <EXTI_INT1Init+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <EXTI_INT1Init+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    12e4:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <EXTI_INT1Init+0x18>
    12ec:	5d c0       	rjmp	.+186    	; 0x13a8 <EXTI_INT1Init+0xd2>
	switch(Local_u8Sense){
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3c 83       	std	Y+4, r19	; 0x04
    12f6:	2b 83       	std	Y+3, r18	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	21 f1       	breq	.+72     	; 0x134a <EXTI_INT1Init+0x74>
    1302:	2b 81       	ldd	r18, Y+3	; 0x03
    1304:	3c 81       	ldd	r19, Y+4	; 0x04
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	2c f4       	brge	.+10     	; 0x1316 <EXTI_INT1Init+0x40>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 f0       	breq	.+24     	; 0x132c <EXTI_INT1Init+0x56>
    1314:	46 c0       	rjmp	.+140    	; 0x13a2 <EXTI_INT1Init+0xcc>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	21 f1       	breq	.+72     	; 0x1368 <EXTI_INT1Init+0x92>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	71 f1       	breq	.+92     	; 0x1386 <EXTI_INT1Init+0xb0>
    132a:	3b c0       	rjmp	.+118    	; 0x13a2 <EXTI_INT1Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    132c:	a5 e5       	ldi	r26, 0x55	; 85
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e5 e5       	ldi	r30, 0x55	; 85
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8b 7f       	andi	r24, 0xFB	; 251
    1338:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    133a:	a5 e5       	ldi	r26, 0x55	; 85
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e5       	ldi	r30, 0x55	; 85
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	87 7f       	andi	r24, 0xF7	; 247
    1346:	8c 93       	st	X, r24
    1348:	2c c0       	rjmp	.+88     	; 0x13a2 <EXTI_INT1Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    134a:	a5 e5       	ldi	r26, 0x55	; 85
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e5 e5       	ldi	r30, 0x55	; 85
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	84 60       	ori	r24, 0x04	; 4
    1356:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    1358:	a5 e5       	ldi	r26, 0x55	; 85
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e5 e5       	ldi	r30, 0x55	; 85
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	8c 93       	st	X, r24
    1366:	1d c0       	rjmp	.+58     	; 0x13a2 <EXTI_INT1Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    1368:	a5 e5       	ldi	r26, 0x55	; 85
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e5 e5       	ldi	r30, 0x55	; 85
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8b 7f       	andi	r24, 0xFB	; 251
    1374:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1376:	a5 e5       	ldi	r26, 0x55	; 85
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e5 e5       	ldi	r30, 0x55	; 85
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 60       	ori	r24, 0x08	; 8
    1382:	8c 93       	st	X, r24
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <EXTI_INT1Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	84 60       	ori	r24, 0x04	; 4
    1392:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1394:	a5 e5       	ldi	r26, 0x55	; 85
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e5 e5       	ldi	r30, 0x55	; 85
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 60       	ori	r24, 0x08	; 8
    13a0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <EXTI_INT1Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT1);
    13ac:	ab e5       	ldi	r26, 0x5B	; 91
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	eb e5       	ldi	r30, 0x5B	; 91
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 68       	ori	r24, 0x80	; 128
    13b8:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <EXTI_u8INT1Status>:

ES_t EXTI_u8INT1Status(u8 *Copy_u8Status){
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <EXTI_u8INT1Status+0x6>
    13d0:	0f 92       	push	r0
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	9b 83       	std	Y+3, r25	; 0x03
    13d8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    13da:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF1) == 1){
    13dc:	ea e5       	ldi	r30, 0x5A	; 90
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 1f       	adc	r24, r24
    13e4:	88 27       	eor	r24, r24
    13e6:	88 1f       	adc	r24, r24
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <EXTI_u8INT1Status+0x2e>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    13ec:	ea 81       	ldd	r30, Y+2	; 0x02
    13ee:	fb 81       	ldd	r31, Y+3	; 0x03
    13f0:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <EXTI_u8INT1Status+0x44>
	}
	else if(GET_BIT(GIFR,GIFR_INTF1) == 0){
    13f8:	ea e5       	ldi	r30, 0x5A	; 90
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	88 23       	and	r24, r24
    1400:	34 f0       	brlt	.+12     	; 0x140e <EXTI_u8INT1Status+0x44>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    1402:	ea 81       	ldd	r30, Y+2	; 0x02
    1404:	fb 81       	ldd	r31, Y+3	; 0x03
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <EXTI_SetCallBackINT1>:

ES_t EXTI_SetCallBackINT1( void(*LocalPtr)(void) ){
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <EXTI_SetCallBackINT1+0x6>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	9b 83       	std	Y+3, r25	; 0x03
    142a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    142c:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	49 f0       	breq	.+18     	; 0x1448 <EXTI_SetCallBackINT1+0x2c>
	INT1_FunctionPointer = LocalPtr;
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	9b 81       	ldd	r25, Y+3	; 0x03
    143a:	90 93 27 01 	sts	0x0127, r25
    143e:	80 93 26 01 	sts	0x0126, r24
	Local_enuErrorstate = ES_OK;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	02 c0       	rjmp	.+4      	; 0x144c <EXTI_SetCallBackINT1+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    144c:	89 81       	ldd	r24, Y+1	; 0x01
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <__vector_2>:

ISR(__vector_2){
    145a:	1f 92       	push	r1
    145c:	0f 92       	push	r0
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	0f 92       	push	r0
    1462:	11 24       	eor	r1, r1
    1464:	2f 93       	push	r18
    1466:	3f 93       	push	r19
    1468:	4f 93       	push	r20
    146a:	5f 93       	push	r21
    146c:	6f 93       	push	r22
    146e:	7f 93       	push	r23
    1470:	8f 93       	push	r24
    1472:	9f 93       	push	r25
    1474:	af 93       	push	r26
    1476:	bf 93       	push	r27
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
	INT1_FunctionPointer();
    1484:	e0 91 26 01 	lds	r30, 0x0126
    1488:	f0 91 27 01 	lds	r31, 0x0127
    148c:	09 95       	icall
}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	ff 91       	pop	r31
    1494:	ef 91       	pop	r30
    1496:	bf 91       	pop	r27
    1498:	af 91       	pop	r26
    149a:	9f 91       	pop	r25
    149c:	8f 91       	pop	r24
    149e:	7f 91       	pop	r23
    14a0:	6f 91       	pop	r22
    14a2:	5f 91       	pop	r21
    14a4:	4f 91       	pop	r20
    14a6:	3f 91       	pop	r19
    14a8:	2f 91       	pop	r18
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f 90       	pop	r0
    14b0:	1f 90       	pop	r1
    14b2:	18 95       	reti

000014b4 <EXTI_INT2Init>:


/*		External Interrupt 2 APIs   	*/
ES_t EXTI_INT2Init(u8 Local_u8Sense){
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <EXTI_INT2Init+0x6>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <EXTI_INT2Init+0x8>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    14c2:	19 82       	std	Y+1, r1	; 0x01
		if(Local_u8Sense <= 3){
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	10 f5       	brcc	.+68     	; 0x150e <EXTI_INT2Init+0x5a>
	/*Select Sense Control*/
	switch(Local_u8Sense){
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	3c 83       	std	Y+4, r19	; 0x04
    14d2:	2b 83       	std	Y+3, r18	; 0x03
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	9c 81       	ldd	r25, Y+4	; 0x04
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	91 05       	cpc	r25, r1
    14dc:	31 f0       	breq	.+12     	; 0x14ea <EXTI_INT2Init+0x36>
    14de:	2b 81       	ldd	r18, Y+3	; 0x03
    14e0:	3c 81       	ldd	r19, Y+4	; 0x04
    14e2:	23 30       	cpi	r18, 0x03	; 3
    14e4:	31 05       	cpc	r19, r1
    14e6:	49 f0       	breq	.+18     	; 0x14fa <EXTI_INT2Init+0x46>
    14e8:	0f c0       	rjmp	.+30     	; 0x1508 <EXTI_INT2Init+0x54>
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    14ea:	a4 e5       	ldi	r26, 0x54	; 84
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e4 e5       	ldi	r30, 0x54	; 84
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 7b       	andi	r24, 0xBF	; 191
    14f6:	8c 93       	st	X, r24
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <EXTI_INT2Init+0x54>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    14fa:	a4 e5       	ldi	r26, 0x54	; 84
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e4 e5       	ldi	r30, 0x54	; 84
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 64       	ori	r24, 0x40	; 64
    1506:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <EXTI_INT2Init+0x5e>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT2);
    1512:	ab e5       	ldi	r26, 0x5B	; 91
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e5       	ldi	r30, 0x5B	; 91
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	80 62       	ori	r24, 0x20	; 32
    151e:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    1520:	89 81       	ldd	r24, Y+1	; 0x01
}
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <EXTI_u8INT2Status>:


ES_t EXTI_u8INT2Status(u8 *Copy_u8Status){
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <EXTI_u8INT2Status+0x6>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9b 83       	std	Y+3, r25	; 0x03
    153e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1540:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF2) == 1){
    1542:	ea e5       	ldi	r30, 0x5A	; 90
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	82 95       	swap	r24
    154a:	86 95       	lsr	r24
    154c:	87 70       	andi	r24, 0x07	; 7
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	81 70       	andi	r24, 0x01	; 1
    1554:	90 70       	andi	r25, 0x00	; 0
    1556:	88 23       	and	r24, r24
    1558:	31 f0       	breq	.+12     	; 0x1566 <EXTI_u8INT2Status+0x36>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    155a:	ea 81       	ldd	r30, Y+2	; 0x02
    155c:	fb 81       	ldd	r31, Y+3	; 0x03
    155e:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	12 c0       	rjmp	.+36     	; 0x158a <EXTI_u8INT2Status+0x5a>
	}
	else if(GET_BIT(GIFR,GIFR_INTF2) == 0){
    1566:	ea e5       	ldi	r30, 0x5A	; 90
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	82 95       	swap	r24
    156e:	86 95       	lsr	r24
    1570:	87 70       	andi	r24, 0x07	; 7
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	90 70       	andi	r25, 0x00	; 0
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	31 f4       	brne	.+12     	; 0x158a <EXTI_u8INT2Status+0x5a>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    157e:	ea 81       	ldd	r30, Y+2	; 0x02
    1580:	fb 81       	ldd	r31, Y+3	; 0x03
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    158a:	89 81       	ldd	r24, Y+1	; 0x01
}
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <EXTI_SetCallBackINT2>:

ES_t EXTI_SetCallBackINT2( void(*LocalPtr)(void) ){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <EXTI_SetCallBackINT2+0x6>
    159e:	0f 92       	push	r0
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	9b 83       	std	Y+3, r25	; 0x03
    15a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    15a8:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	9b 81       	ldd	r25, Y+3	; 0x03
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <EXTI_SetCallBackINT2+0x2c>
	INT2_FunctionPointer = LocalPtr;
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	90 93 29 01 	sts	0x0129, r25
    15ba:	80 93 28 01 	sts	0x0128, r24
	Local_enuErrorstate = ES_OK;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <EXTI_SetCallBackINT2+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    15c4:	82 e0       	ldi	r24, 0x02	; 2
    15c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <__vector_3>:

ISR(__vector_3){
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
	INT2_FunctionPointer();
    1600:	e0 91 28 01 	lds	r30, 0x0128
    1604:	f0 91 29 01 	lds	r31, 0x0129
    1608:	09 95       	icall
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	0f 90       	pop	r0
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	0f 90       	pop	r0
    162c:	1f 90       	pop	r1
    162e:	18 95       	reti

00001630 <EXTI_DisableINT>:


ES_t EXTI_DisableINT(u8 Local_u8INT){
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <EXTI_DisableINT+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <EXTI_DisableINT+0x8>
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    163e:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8INT <= 2){
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	68 f5       	brcc	.+90     	; 0x16a0 <EXTI_DisableINT+0x70>
		switch(Local_u8INT){
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	3c 83       	std	Y+4, r19	; 0x04
    164e:	2b 83       	std	Y+3, r18	; 0x03
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	91 05       	cpc	r25, r1
    1658:	89 f0       	breq	.+34     	; 0x167c <EXTI_DisableINT+0x4c>
    165a:	2b 81       	ldd	r18, Y+3	; 0x03
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	a1 f0       	breq	.+40     	; 0x168c <EXTI_DisableINT+0x5c>
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	b9 f4       	brne	.+46     	; 0x169a <EXTI_DisableINT+0x6a>
			case INT0:	CLR_BIT(GICR,GICR_INT0);	break;
    166c:	ab e5       	ldi	r26, 0x5B	; 91
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e5       	ldi	r30, 0x5B	; 91
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8f 7b       	andi	r24, 0xBF	; 191
    1678:	8c 93       	st	X, r24
    167a:	0f c0       	rjmp	.+30     	; 0x169a <EXTI_DisableINT+0x6a>
			case INT1:	CLR_BIT(GICR,GICR_INT1);	break;
    167c:	ab e5       	ldi	r26, 0x5B	; 91
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	eb e5       	ldi	r30, 0x5B	; 91
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8f 77       	andi	r24, 0x7F	; 127
    1688:	8c 93       	st	X, r24
    168a:	07 c0       	rjmp	.+14     	; 0x169a <EXTI_DisableINT+0x6a>
			case INT2:	CLR_BIT(GICR,GICR_INT2);	break;
    168c:	ab e5       	ldi	r26, 0x5B	; 91
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e5       	ldi	r30, 0x5B	; 91
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8f 7d       	andi	r24, 0xDF	; 223
    1698:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <EXTI_DisableINT+0x74>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <DIO_SetPinDirection>:
#include "DIO_interface.h"




ES_t DIO_SetPinDirection(u8 Port,u8 Pin, u8 Direction){
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_SetPinDirection+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <DIO_SetPinDirection+0x8>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <DIO_SetPinDirection+0xa>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	8a 83       	std	Y+2, r24	; 0x02
    16c4:	6b 83       	std	Y+3, r22	; 0x03
    16c6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	2d 83       	std	Y+5, r18	; 0x05
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <DIO_SetPinDirection+0x2c>
    16de:	48 c0       	rjmp	.+144    	; 0x1770 <DIO_SetPinDirection+0xbc>
    16e0:	2d 81       	ldd	r18, Y+5	; 0x05
    16e2:	3e 81       	ldd	r19, Y+6	; 0x06
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <DIO_SetPinDirection+0x40>
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	71 f0       	breq	.+28     	; 0x170e <DIO_SetPinDirection+0x5a>
    16f2:	d1 c0       	rjmp	.+418    	; 0x1896 <DIO_SetPinDirection+0x1e2>
    16f4:	2d 81       	ldd	r18, Y+5	; 0x05
    16f6:	3e 81       	ldd	r19, Y+6	; 0x06
    16f8:	22 30       	cpi	r18, 0x02	; 2
    16fa:	31 05       	cpc	r19, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <DIO_SetPinDirection+0x4c>
    16fe:	69 c0       	rjmp	.+210    	; 0x17d2 <DIO_SetPinDirection+0x11e>
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <DIO_SetPinDirection+0x58>
    170a:	94 c0       	rjmp	.+296    	; 0x1834 <DIO_SetPinDirection+0x180>
    170c:	c4 c0       	rjmp	.+392    	; 0x1896 <DIO_SetPinDirection+0x1e2>
		case PORTA:
		if(Direction == INPUT){
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	88 23       	and	r24, r24
    1712:	a9 f4       	brne	.+42     	; 0x173e <DIO_SetPinDirection+0x8a>
			CLR_BIT(DDRA_REG,Pin);
    1714:	aa e3       	ldi	r26, 0x3A	; 58
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ea e3       	ldi	r30, 0x3A	; 58
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <DIO_SetPinDirection+0x7e>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <DIO_SetPinDirection+0x7a>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	16 c0       	rjmp	.+44     	; 0x176a <DIO_SetPinDirection+0xb6>
		}
		else if(Direction == OUTPUT){
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	99 f4       	brne	.+38     	; 0x176a <DIO_SetPinDirection+0xb6>
			SET_BIT(DDRA_REG,Pin);
    1744:	aa e3       	ldi	r26, 0x3A	; 58
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ea e3       	ldi	r30, 0x3A	; 58
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_SetPinDirection+0xae>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_SetPinDirection+0xaa>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	95 c0       	rjmp	.+298    	; 0x189a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTB:
		if(Direction == INPUT){
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	88 23       	and	r24, r24
    1774:	a9 f4       	brne	.+42     	; 0x17a0 <DIO_SetPinDirection+0xec>
			CLR_BIT(DDRB_REG,Pin);
    1776:	a7 e3       	ldi	r26, 0x37	; 55
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e7 e3       	ldi	r30, 0x37	; 55
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_SetPinDirection+0xe0>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_SetPinDirection+0xdc>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	16 c0       	rjmp	.+44     	; 0x17cc <DIO_SetPinDirection+0x118>
		}
		else if(Direction == OUTPUT){
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	99 f4       	brne	.+38     	; 0x17cc <DIO_SetPinDirection+0x118>
			SET_BIT(DDRB_REG,Pin);
    17a6:	a7 e3       	ldi	r26, 0x37	; 55
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e7 e3       	ldi	r30, 0x37	; 55
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_SetPinDirection+0x110>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_SetPinDirection+0x10c>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	64 c0       	rjmp	.+200    	; 0x189a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTC:
		if(Direction == INPUT){
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	88 23       	and	r24, r24
    17d6:	a9 f4       	brne	.+42     	; 0x1802 <DIO_SetPinDirection+0x14e>
			CLR_BIT(DDRC_REG,Pin);
    17d8:	a4 e3       	ldi	r26, 0x34	; 52
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e4 e3       	ldi	r30, 0x34	; 52
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	48 2f       	mov	r20, r24
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	02 2e       	mov	r0, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_SetPinDirection+0x142>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	0a 94       	dec	r0
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_SetPinDirection+0x13e>
    17fa:	80 95       	com	r24
    17fc:	84 23       	and	r24, r20
    17fe:	8c 93       	st	X, r24
    1800:	16 c0       	rjmp	.+44     	; 0x182e <DIO_SetPinDirection+0x17a>
		}
		else if(Direction == OUTPUT){
    1802:	8c 81       	ldd	r24, Y+4	; 0x04
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	99 f4       	brne	.+38     	; 0x182e <DIO_SetPinDirection+0x17a>
			SET_BIT(DDRC_REG,Pin);
    1808:	a4 e3       	ldi	r26, 0x34	; 52
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e4 e3       	ldi	r30, 0x34	; 52
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	48 2f       	mov	r20, r24
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	28 2f       	mov	r18, r24
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	02 2e       	mov	r0, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_SetPinDirection+0x172>
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	0a 94       	dec	r0
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_SetPinDirection+0x16e>
    182a:	84 2b       	or	r24, r20
    182c:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	33 c0       	rjmp	.+102    	; 0x189a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTD:
		if(Direction == INPUT){
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	88 23       	and	r24, r24
    1838:	a9 f4       	brne	.+42     	; 0x1864 <DIO_SetPinDirection+0x1b0>
			CLR_BIT(DDRD_REG,Pin);
    183a:	a1 e3       	ldi	r26, 0x31	; 49
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e1 e3       	ldi	r30, 0x31	; 49
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_SetPinDirection+0x1a4>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_SetPinDirection+0x1a0>
    185c:	80 95       	com	r24
    185e:	84 23       	and	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	16 c0       	rjmp	.+44     	; 0x1890 <DIO_SetPinDirection+0x1dc>
		}
		else if(Direction == OUTPUT){
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	99 f4       	brne	.+38     	; 0x1890 <DIO_SetPinDirection+0x1dc>
			SET_BIT(DDRD_REG,Pin);
    186a:	a1 e3       	ldi	r26, 0x31	; 49
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_SetPinDirection+0x1d4>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_SetPinDirection+0x1d0>
    188c:	84 2b       	or	r24, r20
    188e:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_SetPinDirection+0x1e6>
		break;
		default:
			Local_enuErrorstate = ES_OUT_OF_RANGE;	
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enuErrorstate;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
}
    189c:	26 96       	adiw	r28, 0x06	; 6
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <DIO_SetPortDirection>:



ES_t DIO_SetPortDirection(u8 Port,u8 Direction){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DIO_SetPortDirection+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DIO_SetPortDirection+0x8>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    18c0:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	3d 83       	std	Y+5, r19	; 0x05
    18ca:	2c 83       	std	Y+4, r18	; 0x04
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	e1 f0       	breq	.+56     	; 0x190e <DIO_SetPortDirection+0x60>
    18d6:	2c 81       	ldd	r18, Y+4	; 0x04
    18d8:	3d 81       	ldd	r19, Y+5	; 0x05
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	2c f4       	brge	.+10     	; 0x18ea <DIO_SetPortDirection+0x3c>
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	9d 81       	ldd	r25, Y+5	; 0x05
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	61 f0       	breq	.+24     	; 0x1900 <DIO_SetPortDirection+0x52>
    18e8:	27 c0       	rjmp	.+78     	; 0x1938 <DIO_SetPortDirection+0x8a>
    18ea:	2c 81       	ldd	r18, Y+4	; 0x04
    18ec:	3d 81       	ldd	r19, Y+5	; 0x05
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	a1 f0       	breq	.+40     	; 0x191c <DIO_SetPortDirection+0x6e>
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	9d 81       	ldd	r25, Y+5	; 0x05
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	91 05       	cpc	r25, r1
    18fc:	b1 f0       	breq	.+44     	; 0x192a <DIO_SetPortDirection+0x7c>
    18fe:	1c c0       	rjmp	.+56     	; 0x1938 <DIO_SetPortDirection+0x8a>
		case PORTA: DDRA_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1900:	ea e3       	ldi	r30, 0x3A	; 58
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	80 83       	st	Z, r24
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	17 c0       	rjmp	.+46     	; 0x193c <DIO_SetPortDirection+0x8e>
		case PORTB: DDRB_REG = Direction; Local_enuErrorstate = ES_OK; break;
    190e:	e7 e3       	ldi	r30, 0x37	; 55
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	80 83       	st	Z, r24
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	10 c0       	rjmp	.+32     	; 0x193c <DIO_SetPortDirection+0x8e>
		case PORTC: DDRC_REG = Direction; Local_enuErrorstate = ES_OK; break;
    191c:	e4 e3       	ldi	r30, 0x34	; 52
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	80 83       	st	Z, r24
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	09 c0       	rjmp	.+18     	; 0x193c <DIO_SetPortDirection+0x8e>
		case PORTD: DDRD_REG = Direction; Local_enuErrorstate = ES_OK; break;
    192a:	e1 e3       	ldi	r30, 0x31	; 49
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	80 83       	st	Z, r24
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_SetPortDirection+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				   break;
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <DIO_SetPinValue>:


ES_t DIO_SetPinValue(u8 Port,u8 Pin, u8 Value){
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <DIO_SetPinValue+0x6>
    1954:	00 d0       	rcall	.+0      	; 0x1956 <DIO_SetPinValue+0x8>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <DIO_SetPinValue+0xa>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	8a 83       	std	Y+2, r24	; 0x02
    195e:	6b 83       	std	Y+3, r22	; 0x03
    1960:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1962:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	3e 83       	std	Y+6, r19	; 0x06
    196c:	2d 83       	std	Y+5, r18	; 0x05
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	91 05       	cpc	r25, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <DIO_SetPinValue+0x2c>
    1978:	48 c0       	rjmp	.+144    	; 0x1a0a <DIO_SetPinValue+0xbc>
    197a:	2d 81       	ldd	r18, Y+5	; 0x05
    197c:	3e 81       	ldd	r19, Y+6	; 0x06
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	2c f4       	brge	.+10     	; 0x198e <DIO_SetPinValue+0x40>
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	71 f0       	breq	.+28     	; 0x19a8 <DIO_SetPinValue+0x5a>
    198c:	d1 c0       	rjmp	.+418    	; 0x1b30 <DIO_SetPinValue+0x1e2>
    198e:	2d 81       	ldd	r18, Y+5	; 0x05
    1990:	3e 81       	ldd	r19, Y+6	; 0x06
    1992:	22 30       	cpi	r18, 0x02	; 2
    1994:	31 05       	cpc	r19, r1
    1996:	09 f4       	brne	.+2      	; 0x199a <DIO_SetPinValue+0x4c>
    1998:	69 c0       	rjmp	.+210    	; 0x1a6c <DIO_SetPinValue+0x11e>
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	9e 81       	ldd	r25, Y+6	; 0x06
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <DIO_SetPinValue+0x58>
    19a4:	94 c0       	rjmp	.+296    	; 0x1ace <DIO_SetPinValue+0x180>
    19a6:	c4 c0       	rjmp	.+392    	; 0x1b30 <DIO_SetPinValue+0x1e2>
		case PORTA:
		if(Value == LOW){
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	88 23       	and	r24, r24
    19ac:	a9 f4       	brne	.+42     	; 0x19d8 <DIO_SetPinValue+0x8a>
			CLR_BIT(PORTA_REG,Pin);
    19ae:	ab e3       	ldi	r26, 0x3B	; 59
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	eb e3       	ldi	r30, 0x3B	; 59
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	48 2f       	mov	r20, r24
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	02 2e       	mov	r0, r18
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <DIO_SetPinValue+0x7e>
    19c8:	88 0f       	add	r24, r24
    19ca:	99 1f       	adc	r25, r25
    19cc:	0a 94       	dec	r0
    19ce:	e2 f7       	brpl	.-8      	; 0x19c8 <DIO_SetPinValue+0x7a>
    19d0:	80 95       	com	r24
    19d2:	84 23       	and	r24, r20
    19d4:	8c 93       	st	X, r24
    19d6:	16 c0       	rjmp	.+44     	; 0x1a04 <DIO_SetPinValue+0xb6>
		}
		else if(Value == HIGH){
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	99 f4       	brne	.+38     	; 0x1a04 <DIO_SetPinValue+0xb6>
			SET_BIT(PORTA_REG,Pin);
    19de:	ab e3       	ldi	r26, 0x3B	; 59
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	eb e3       	ldi	r30, 0x3B	; 59
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	48 2f       	mov	r20, r24
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	02 2e       	mov	r0, r18
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <DIO_SetPinValue+0xae>
    19f8:	88 0f       	add	r24, r24
    19fa:	99 1f       	adc	r25, r25
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <DIO_SetPinValue+0xaa>
    1a00:	84 2b       	or	r24, r20
    1a02:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	95 c0       	rjmp	.+298    	; 0x1b34 <DIO_SetPinValue+0x1e6>
		break;
		case PORTB:
		if(Value == LOW){
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	88 23       	and	r24, r24
    1a0e:	a9 f4       	brne	.+42     	; 0x1a3a <DIO_SetPinValue+0xec>
			CLR_BIT(PORTB_REG,Pin);
    1a10:	a8 e3       	ldi	r26, 0x38	; 56
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e8 e3       	ldi	r30, 0x38	; 56
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_SetPinValue+0xe0>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_SetPinValue+0xdc>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	16 c0       	rjmp	.+44     	; 0x1a66 <DIO_SetPinValue+0x118>
		}
		else if(Value == HIGH){
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	99 f4       	brne	.+38     	; 0x1a66 <DIO_SetPinValue+0x118>
			SET_BIT(PORTB_REG,Pin);
    1a40:	a8 e3       	ldi	r26, 0x38	; 56
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e8 e3       	ldi	r30, 0x38	; 56
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_SetPinValue+0x110>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_SetPinValue+0x10c>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	64 c0       	rjmp	.+200    	; 0x1b34 <DIO_SetPinValue+0x1e6>
		break;
		case PORTC:
		if(Value == LOW){
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	88 23       	and	r24, r24
    1a70:	a9 f4       	brne	.+42     	; 0x1a9c <DIO_SetPinValue+0x14e>
			CLR_BIT(PORTC_REG,Pin);
    1a72:	a5 e3       	ldi	r26, 0x35	; 53
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	48 2f       	mov	r20, r24
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	02 2e       	mov	r0, r18
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <DIO_SetPinValue+0x142>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	0a 94       	dec	r0
    1a92:	e2 f7       	brpl	.-8      	; 0x1a8c <DIO_SetPinValue+0x13e>
    1a94:	80 95       	com	r24
    1a96:	84 23       	and	r24, r20
    1a98:	8c 93       	st	X, r24
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <DIO_SetPinValue+0x17a>
		}
		else if(Value == HIGH){
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	99 f4       	brne	.+38     	; 0x1ac8 <DIO_SetPinValue+0x17a>
			SET_BIT(PORTC_REG,Pin);
    1aa2:	a5 e3       	ldi	r26, 0x35	; 53
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e5 e3       	ldi	r30, 0x35	; 53
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_SetPinValue+0x172>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_SetPinValue+0x16e>
    1ac4:	84 2b       	or	r24, r20
    1ac6:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	33 c0       	rjmp	.+102    	; 0x1b34 <DIO_SetPinValue+0x1e6>
		break;
		case PORTD:
		if(Value == LOW){
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	88 23       	and	r24, r24
    1ad2:	a9 f4       	brne	.+42     	; 0x1afe <DIO_SetPinValue+0x1b0>
			CLR_BIT(PORTD_REG,Pin);
    1ad4:	a2 e3       	ldi	r26, 0x32	; 50
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e2 e3       	ldi	r30, 0x32	; 50
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	48 2f       	mov	r20, r24
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	02 2e       	mov	r0, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_SetPinValue+0x1a4>
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	0a 94       	dec	r0
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_SetPinValue+0x1a0>
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	16 c0       	rjmp	.+44     	; 0x1b2a <DIO_SetPinValue+0x1dc>
		}
		else if(Value == HIGH){
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	99 f4       	brne	.+38     	; 0x1b2a <DIO_SetPinValue+0x1dc>
			SET_BIT(PORTD_REG,Pin);
    1b04:	a2 e3       	ldi	r26, 0x32	; 50
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e2 e3       	ldi	r30, 0x32	; 50
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <DIO_SetPinValue+0x1d4>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <DIO_SetPinValue+0x1d0>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <DIO_SetPinValue+0x1e6>
		break;
		default:
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorstate;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b36:	26 96       	adiw	r28, 0x06	; 6
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	f8 94       	cli
    1b3c:	de bf       	out	0x3e, r29	; 62
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	cd bf       	out	0x3d, r28	; 61
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_TogPinValue>:

ES_t DIO_TogPinValue(u8 Port,u8 Pin){
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <DIO_TogPinValue+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <DIO_TogPinValue+0x8>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	8a 83       	std	Y+2, r24	; 0x02
    1b58:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3d 83       	std	Y+5, r19	; 0x05
    1b64:	2c 83       	std	Y+4, r18	; 0x04
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	61 f1       	breq	.+88     	; 0x1bc8 <DIO_TogPinValue+0x80>
    1b70:	2c 81       	ldd	r18, Y+4	; 0x04
    1b72:	3d 81       	ldd	r19, Y+5	; 0x05
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <DIO_TogPinValue+0x3c>
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f0       	breq	.+26     	; 0x1b9c <DIO_TogPinValue+0x54>
    1b82:	64 c0       	rjmp	.+200    	; 0x1c4c <DIO_TogPinValue+0x104>
    1b84:	2c 81       	ldd	r18, Y+4	; 0x04
    1b86:	3d 81       	ldd	r19, Y+5	; 0x05
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	99 f1       	breq	.+102    	; 0x1bf4 <DIO_TogPinValue+0xac>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <DIO_TogPinValue+0x52>
    1b98:	43 c0       	rjmp	.+134    	; 0x1c20 <DIO_TogPinValue+0xd8>
    1b9a:	58 c0       	rjmp	.+176    	; 0x1c4c <DIO_TogPinValue+0x104>
			case PORTA:
				TOG_BIT(PORTA_REG,Pin);
    1b9c:	ab e3       	ldi	r26, 0x3B	; 59
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	eb e3       	ldi	r30, 0x3B	; 59
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_TogPinValue+0x72>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_TogPinValue+0x6e>
    1bbe:	84 27       	eor	r24, r20
    1bc0:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	44 c0       	rjmp	.+136    	; 0x1c50 <DIO_TogPinValue+0x108>
			break;
			case PORTB:
				TOG_BIT(PORTB_REG,Pin);
    1bc8:	a8 e3       	ldi	r26, 0x38	; 56
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e8 e3       	ldi	r30, 0x38	; 56
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_TogPinValue+0x9e>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_TogPinValue+0x9a>
    1bea:	84 27       	eor	r24, r20
    1bec:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	2e c0       	rjmp	.+92     	; 0x1c50 <DIO_TogPinValue+0x108>
			break;
			case PORTC:
				TOG_BIT(PORTC_REG,Pin);
    1bf4:	a5 e3       	ldi	r26, 0x35	; 53
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_TogPinValue+0xca>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_TogPinValue+0xc6>
    1c16:	84 27       	eor	r24, r20
    1c18:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	18 c0       	rjmp	.+48     	; 0x1c50 <DIO_TogPinValue+0x108>
			break;
			case PORTD:
				TOG_BIT(PORTD_REG,Pin);
    1c20:	a2 e3       	ldi	r26, 0x32	; 50
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e2 e3       	ldi	r30, 0x32	; 50
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_TogPinValue+0xf6>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_TogPinValue+0xf2>
    1c42:	84 27       	eor	r24, r20
    1c44:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	89 83       	std	Y+1, r24	; 0x01
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_TogPinValue+0x108>
			break;
			default:
				Local_enuErrorstate = ES_OUT_OF_RANGE;
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorstate;
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <DIO_SetPortValue>:



ES_t DIO_SetPortValue(u8 Port,u8 Value){
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <DIO_SetPortValue+0x6>
    1c68:	00 d0       	rcall	.+0      	; 0x1c6a <DIO_SetPortValue+0x8>
    1c6a:	0f 92       	push	r0
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	8a 83       	std	Y+2, r24	; 0x02
    1c72:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1c74:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3d 83       	std	Y+5, r19	; 0x05
    1c7e:	2c 83       	std	Y+4, r18	; 0x04
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	e1 f0       	breq	.+56     	; 0x1cc2 <DIO_SetPortValue+0x60>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <DIO_SetPortValue+0x3c>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <DIO_SetPortValue+0x52>
    1c9c:	27 c0       	rjmp	.+78     	; 0x1cec <DIO_SetPortValue+0x8a>
    1c9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	a1 f0       	breq	.+40     	; 0x1cd0 <DIO_SetPortValue+0x6e>
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	b1 f0       	breq	.+44     	; 0x1cde <DIO_SetPortValue+0x7c>
    1cb2:	1c c0       	rjmp	.+56     	; 0x1cec <DIO_SetPortValue+0x8a>
		case PORTA: PORTA_REG = Value; Local_enuErrorstate = ES_OK; break;
    1cb4:	eb e3       	ldi	r30, 0x3B	; 59
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	80 83       	st	Z, r24
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	17 c0       	rjmp	.+46     	; 0x1cf0 <DIO_SetPortValue+0x8e>
		case PORTB: PORTB_REG = Value; Local_enuErrorstate = ES_OK; break;
    1cc2:	e8 e3       	ldi	r30, 0x38	; 56
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	80 83       	st	Z, r24
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
    1cce:	10 c0       	rjmp	.+32     	; 0x1cf0 <DIO_SetPortValue+0x8e>
		case PORTC: PORTC_REG = Value; Local_enuErrorstate = ES_OK; break;
    1cd0:	e5 e3       	ldi	r30, 0x35	; 53
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	80 83       	st	Z, r24
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	09 c0       	rjmp	.+18     	; 0x1cf0 <DIO_SetPortValue+0x8e>
		case PORTD: PORTD_REG = Value; Local_enuErrorstate = ES_OK; break;
    1cde:	e2 e3       	ldi	r30, 0x32	; 50
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	80 83       	st	Z, r24
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_SetPortValue+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				break;
    1cec:	83 e0       	ldi	r24, 0x03	; 3
    1cee:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_enuErrorstate;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Port,u8 Pin){
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <DIO_u8GetPinValue+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <DIO_u8GetPinValue+0x8>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d20:	5d 81       	ldd	r21, Y+5	; 0x05
    1d22:	41 30       	cpi	r20, 0x01	; 1
    1d24:	51 05       	cpc	r21, r1
    1d26:	49 f1       	breq	.+82     	; 0x1d7a <DIO_u8GetPinValue+0x78>
    1d28:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2c:	82 30       	cpi	r24, 0x02	; 2
    1d2e:	91 05       	cpc	r25, r1
    1d30:	34 f4       	brge	.+12     	; 0x1d3e <DIO_u8GetPinValue+0x3c>
    1d32:	2c 81       	ldd	r18, Y+4	; 0x04
    1d34:	3d 81       	ldd	r19, Y+5	; 0x05
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	61 f0       	breq	.+24     	; 0x1d54 <DIO_u8GetPinValue+0x52>
    1d3c:	57 c0       	rjmp	.+174    	; 0x1dec <DIO_u8GetPinValue+0xea>
    1d3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d40:	5d 81       	ldd	r21, Y+5	; 0x05
    1d42:	42 30       	cpi	r20, 0x02	; 2
    1d44:	51 05       	cpc	r21, r1
    1d46:	61 f1       	breq	.+88     	; 0x1da0 <DIO_u8GetPinValue+0x9e>
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	83 30       	cpi	r24, 0x03	; 3
    1d4e:	91 05       	cpc	r25, r1
    1d50:	d1 f1       	breq	.+116    	; 0x1dc6 <DIO_u8GetPinValue+0xc4>
    1d52:	4c c0       	rjmp	.+152    	; 0x1dec <DIO_u8GetPinValue+0xea>
		case PORTA: return GET_BIT(PINA_REG,Pin); break;
    1d54:	e9 e3       	ldi	r30, 0x39	; 57
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a9 01       	movw	r20, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_u8GetPinValue+0x6a>
    1d68:	55 95       	asr	r21
    1d6a:	47 95       	ror	r20
    1d6c:	8a 95       	dec	r24
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_u8GetPinValue+0x66>
    1d70:	ca 01       	movw	r24, r20
    1d72:	58 2f       	mov	r21, r24
    1d74:	51 70       	andi	r21, 0x01	; 1
    1d76:	5b 83       	std	Y+3, r21	; 0x03
    1d78:	3a c0       	rjmp	.+116    	; 0x1dee <DIO_u8GetPinValue+0xec>
		case PORTB: return GET_BIT(PINB_REG,Pin); break;
    1d7a:	e6 e3       	ldi	r30, 0x36	; 54
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a9 01       	movw	r20, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8GetPinValue+0x90>
    1d8e:	55 95       	asr	r21
    1d90:	47 95       	ror	r20
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8GetPinValue+0x8c>
    1d96:	ca 01       	movw	r24, r20
    1d98:	58 2f       	mov	r21, r24
    1d9a:	51 70       	andi	r21, 0x01	; 1
    1d9c:	5b 83       	std	Y+3, r21	; 0x03
    1d9e:	27 c0       	rjmp	.+78     	; 0x1dee <DIO_u8GetPinValue+0xec>
		case PORTC: return GET_BIT(PINC_REG,Pin); break;
    1da0:	e3 e3       	ldi	r30, 0x33	; 51
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_u8GetPinValue+0xb6>
    1db4:	55 95       	asr	r21
    1db6:	47 95       	ror	r20
    1db8:	8a 95       	dec	r24
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_u8GetPinValue+0xb2>
    1dbc:	ca 01       	movw	r24, r20
    1dbe:	58 2f       	mov	r21, r24
    1dc0:	51 70       	andi	r21, 0x01	; 1
    1dc2:	5b 83       	std	Y+3, r21	; 0x03
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <DIO_u8GetPinValue+0xec>
		case PORTD: return GET_BIT(PIND_REG,Pin); break;
    1dc6:	e0 e3       	ldi	r30, 0x30	; 48
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a9 01       	movw	r20, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_u8GetPinValue+0xdc>
    1dda:	55 95       	asr	r21
    1ddc:	47 95       	ror	r20
    1dde:	8a 95       	dec	r24
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <DIO_u8GetPinValue+0xd8>
    1de2:	ca 01       	movw	r24, r20
    1de4:	58 2f       	mov	r21, r24
    1de6:	51 70       	andi	r21, 0x01	; 1
    1de8:	5b 83       	std	Y+3, r21	; 0x03
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <DIO_u8GetPinValue+0xec>
	}
	return 0;
    1dec:	1b 82       	std	Y+3, r1	; 0x03
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <SPI_EEPROM_Init>:
static void EEPROM_WriteDisable(void);
static u8 EEPROM_ReadStatusRegister(void);
static ES_t EEPROM_WaitForWriteComplete(void);
static void EEPROM_SendAddress(u32 Copy_u32Address);

ES_t SPI_EEPROM_Init(void){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	0f 92       	push	r0
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    1e0a:	19 82       	std	Y+1, r1	; 0x01
    Local_enuErrorState = SPI_InitMaster();
    1e0c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SPI_InitMaster>
    1e10:	89 83       	std	Y+1, r24	; 0x01
    Local_enuErrorState = DIO_SetPinDirection(PORTB,EEPROM_CS_PIN,OUTPUT);
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	64 e0       	ldi	r22, 0x04	; 4
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    Local_enuErrorState = DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    1e28:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <SPI_EEPROM_WriteByte>:

ES_t SPI_EEPROM_WriteByte(u32 Copy_u32Address,u8 Copy_u8Data){
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <SPI_EEPROM_WriteByte+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <SPI_EEPROM_WriteByte+0x8>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	69 83       	std	Y+1, r22	; 0x01
    1e44:	7a 83       	std	Y+2, r23	; 0x02
    1e46:	8b 83       	std	Y+3, r24	; 0x03
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	4d 83       	std	Y+5, r20	; 0x05
    // Wait for any previous write operation to complete
    EEPROM_WaitForWriteComplete();
    1e4c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_WaitForWriteComplete>

    // Enable write
    EEPROM_WriteEnable();
    1e50:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <EEPROM_WriteEnable>

    // Send write command and address
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	64 e0       	ldi	r22, 0x04	; 4
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WRITE,NULLPTR);
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    EEPROM_SendAddress(Copy_u32Address);
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e6e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 11 10 	call	0x2022	; 0x2022 <EEPROM_SendAddress>
    SPI_Transceive(Copy_u8Data,NULLPTR);
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	70 e0       	ldi	r23, 0x00	; 0
    1e7e:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	64 e0       	ldi	r22, 0x04	; 4
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>

    // Wait for write operation to complete
    EEPROM_WaitForWriteComplete();
    1e8c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_WaitForWriteComplete>
    return ES_OK;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <EEPROM_ReadByte>:

ES_t EEPROM_ReadByte(u32 Copy_u32Address, u8 *Copy_pu8Data)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <EEPROM_ReadByte+0x6>
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <EEPROM_ReadByte+0x8>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <EEPROM_ReadByte+0xa>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	69 83       	std	Y+1, r22	; 0x01
    1eb2:	7a 83       	std	Y+2, r23	; 0x02
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	5e 83       	std	Y+6, r21	; 0x06
    1eba:	4d 83       	std	Y+5, r20	; 0x05
	Copy_u32Address--;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	ab 81       	ldd	r26, Y+3	; 0x03
    1ec2:	bc 81       	ldd	r27, Y+4	; 0x04
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	a1 09       	sbc	r26, r1
    1ec8:	b1 09       	sbc	r27, r1
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	9a 83       	std	Y+2, r25	; 0x02
    1ece:	ab 83       	std	Y+3, r26	; 0x03
    1ed0:	bc 83       	std	Y+4, r27	; 0x04
    // Send read command and address
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	64 e0       	ldi	r22, 0x04	; 4
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_READ,NULLPTR);
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	70 e0       	ldi	r23, 0x00	; 0
    1ee2:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    EEPROM_SendAddress(Copy_u32Address);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	ab 81       	ldd	r26, Y+3	; 0x03
    1eec:	bc 81       	ldd	r27, Y+4	; 0x04
    1eee:	bc 01       	movw	r22, r24
    1ef0:	cd 01       	movw	r24, r26
    1ef2:	0e 94 11 10 	call	0x2022	; 0x2022 <EEPROM_SendAddress>
    SPI_Transceive(NULL,Copy_pu8Data);
    1ef6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef8:	3e 81       	ldd	r19, Y+6	; 0x06
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	b9 01       	movw	r22, r18
    1efe:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	64 e0       	ldi	r22, 0x04	; 4
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    return ES_OK;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
}
    1f0e:	26 96       	adiw	r28, 0x06	; 6
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <EEPROM_EraseAll>:


ES_t EEPROM_EraseAll(void)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    // Wait for any previous write operation to complete
    EEPROM_WaitForWriteComplete();
    1f28:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_WaitForWriteComplete>

    // Enable write
    EEPROM_WriteEnable();
    1f2c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <EEPROM_WriteEnable>

    // Send erase command
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_CE,NULLPTR);
    1f3a:	87 ec       	ldi	r24, 0xC7	; 199
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	64 e0       	ldi	r22, 0x04	; 4
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>

    EEPROM_WaitForWriteComplete();
    1f4e:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_WaitForWriteComplete>
    // Send write disable command
    EEPROM_WriteDisable();
    1f52:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <EEPROM_WriteDisable>
    return ES_OK;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <EEPROM_WriteEnable>:

/*  Private functions   */
static void EEPROM_WriteEnable(void)
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	64 e0       	ldi	r22, 0x04	; 4
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WREN,NULLPTR);
    1f70:	86 e0       	ldi	r24, 0x06	; 6
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	64 e0       	ldi	r22, 0x04	; 4
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
}
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <EEPROM_WriteDisable>:

static void EEPROM_WriteDisable(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	64 e0       	ldi	r22, 0x04	; 4
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WRDI,NULLPTR);
    1f9c:	84 e0       	ldi	r24, 0x04	; 4
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	70 e0       	ldi	r23, 0x00	; 0
    1fa2:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	64 e0       	ldi	r22, 0x04	; 4
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <EEPROM_ReadStatusRegister>:

static u8 EEPROM_ReadStatusRegister(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    u8 status = 0;
    1fc0:	19 82       	std	Y+1, r1	; 0x01
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	64 e0       	ldi	r22, 0x04	; 4
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_RDSR,NULLPTR);
    1fcc:	85 e0       	ldi	r24, 0x05	; 5
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    SPI_Transceive(NULL,&status);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	9e 01       	movw	r18, r28
    1fda:	2f 5f       	subi	r18, 0xFF	; 255
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	64 e0       	ldi	r22, 0x04	; 4
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    return status;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <EEPROM_WaitForWriteComplete>:

static ES_t EEPROM_WaitForWriteComplete(void)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	0f 92       	push	r0
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    2002:	19 82       	std	Y+1, r1	; 0x01
    while (EEPROM_ReadStatusRegister()& (1 << EEPROM_WIP)) {
    2004:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <EEPROM_ReadStatusRegister>
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	81 70       	andi	r24, 0x01	; 1
    200e:	90 70       	andi	r25, 0x00	; 0
    2010:	88 23       	and	r24, r24
    2012:	c1 f7       	brne	.-16     	; 0x2004 <EEPROM_WaitForWriteComplete+0xc>
        // Wait for write to complete
    }
    Local_enuErrorState = ES_OK;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
}
    201a:	0f 90       	pop	r0
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <EEPROM_SendAddress>:


static void EEPROM_SendAddress(u32 Copy_u32Address)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	27 97       	sbiw	r28, 0x07	; 7
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	6c 83       	std	Y+4, r22	; 0x04
    2038:	7d 83       	std	Y+5, r23	; 0x05
    203a:	8e 83       	std	Y+6, r24	; 0x06
    203c:	9f 83       	std	Y+7, r25	; 0x07
    u8 addressBytes[3];
    addressBytes[0] = (u8)((Copy_u32Address >> 16) & 0xFF);
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	9d 81       	ldd	r25, Y+5	; 0x05
    2042:	ae 81       	ldd	r26, Y+6	; 0x06
    2044:	bf 81       	ldd	r27, Y+7	; 0x07
    2046:	cd 01       	movw	r24, r26
    2048:	aa 27       	eor	r26, r26
    204a:	bb 27       	eor	r27, r27
    204c:	89 83       	std	Y+1, r24	; 0x01
    addressBytes[1] = (u8)((Copy_u32Address >> 8) & 0xFF);
    204e:	8c 81       	ldd	r24, Y+4	; 0x04
    2050:	9d 81       	ldd	r25, Y+5	; 0x05
    2052:	ae 81       	ldd	r26, Y+6	; 0x06
    2054:	bf 81       	ldd	r27, Y+7	; 0x07
    2056:	89 2f       	mov	r24, r25
    2058:	9a 2f       	mov	r25, r26
    205a:	ab 2f       	mov	r26, r27
    205c:	bb 27       	eor	r27, r27
    205e:	8a 83       	std	Y+2, r24	; 0x02
    addressBytes[2] = (u8)(Copy_u32Address & 0xFF);
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    SPI_Transceive(addressBytes[0],NULLPTR);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	60 e0       	ldi	r22, 0x00	; 0
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    SPI_Transceive(addressBytes[1],NULLPTR);
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	60 e0       	ldi	r22, 0x00	; 0
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
    SPI_Transceive(addressBytes[2],NULLPTR);
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Transceive>
}
    2082:	27 96       	adiw	r28, 0x07	; 7
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <LED_init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_init(u8 DIO_PORT,u8 DIO_PIN){
    2094:	df 93       	push	r29
    2096:	cf 93       	push	r28
    2098:	00 d0       	rcall	.+0      	; 0x209a <LED_init+0x6>
    209a:	0f 92       	push	r0
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	8a 83       	std	Y+2, r24	; 0x02
    20a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    20a4:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(DIO_PORT,DIO_PIN,OUTPUT);
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	6b 81       	ldd	r22, Y+3	; 0x03
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
	Local_enuErrorstate = ES_OK;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <LED_ON>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_ON(u8 DIO_PORT,u8 DIO_PIN){
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <LED_ON+0x6>
    20c8:	0f 92       	push	r0
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	8a 83       	std	Y+2, r24	; 0x02
    20d0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    20d2:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,HIGH);
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	6b 81       	ldd	r22, Y+3	; 0x03
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <LED_OFF>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_OFF(u8 DIO_PORT,u8 DIO_PIN){
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <LED_OFF+0x6>
    20f6:	0f 92       	push	r0
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2100:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,LOW);
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	6b 81       	ldd	r22, Y+3	; 0x03
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <LED_Toggle>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_Toggle(u8 DIO_PORT,u8 DIO_PIN){
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <LED_Toggle+0x6>
    2124:	0f 92       	push	r0
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	8a 83       	std	Y+2, r24	; 0x02
    212c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_OK;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	89 83       	std	Y+1, r24	; 0x01
	DIO_TogPinValue(DIO_PORT,DIO_PIN);
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	6b 81       	ldd	r22, Y+3	; 0x03
    2136:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <DIO_TogPinValue>
	Local_enuErrorstate = ES_OK;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <LCD_WriteCommand8Bit>:

@brief Writes a command to the 8-bit data port of the LCD
@param Command The command to be written to the LCD
@return ES_OK if the command was written successfully, ES_NOK otherwise
*/
ES_t LCD_WriteCommand8Bit(u8 Command){
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <LCD_WriteCommand8Bit+0x6>
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    2158:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	66 e0       	ldi	r22, 0x06	; 6
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	//Send the command throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Command);
    2164:	82 e0       	ldi	r24, 0x02	; 2
    2166:	6a 81       	ldd	r22, Y+2	; 0x02
    2168:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    216c:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2174:	89 81       	ldd	r24, Y+1	; 0x01
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <LCD_WriteData8Bit>:
 * 
 * @return An error state indicating the success or failure of the operation.
 * @retval ES_OK The data was successfully written to the LCD.
 * @retval ES_NOK The data was not successfully written to the LCD.
 */
ES_t LCD_WriteData8Bit(u8 Data){
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	00 d0       	rcall	.+0      	; 0x2186 <LCD_WriteData8Bit+0x6>
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    218c:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    218e:	83 e0       	ldi	r24, 0x03	; 3
    2190:	66 e0       	ldi	r22, 0x06	; 6
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	//Send the DATA throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Data);
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	6a 81       	ldd	r22, Y+2	; 0x02
    219c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    21a0:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <LCD_8BitInitialize>:

ES_t LCD_8BitInitialize(void){
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	0f 92       	push	r0
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    21be:	19 82       	std	Y+1, r1	; 0x01
	/*	Set Directions	*/
	SetDirections8Bit();
    21c0:	0e 94 90 13 	call	0x2720	; 0x2720 <SetDirections8Bit>
	/*					*/
	FunctionSet8Bit();
    21c4:	0e 94 bb 14 	call	0x2976	; 0x2976 <FunctionSet8Bit>
	DisplayOnOffControl8Bit();
    21c8:	0e 94 43 15 	call	0x2a86	; 0x2a86 <DisplayOnOffControl8Bit>
	DisplayClear8Bit();
    21cc:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <DisplayClear8Bit>
	EntryModeSet8Bit();
    21d0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <EntryModeSet8Bit>
	Local_enuErrorstate = ES_OK;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <LCD_WriteCommand4Bit>:
/***********************************************************************/
ES_t LCD_WriteCommand4Bit(u8 Command){
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <LCD_WriteCommand4Bit+0x6>
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    21ee:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	66 e0       	ldi	r22, 0x06	; 6
    21f4:	40 e0       	ldi	r20, 0x00	; 0
    21f6:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Command>>4);
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	98 2f       	mov	r25, r24
    21fe:	92 95       	swap	r25
    2200:	9f 70       	andi	r25, 0x0F	; 15
    2202:	82 e0       	ldi	r24, 0x02	; 2
    2204:	69 2f       	mov	r22, r25
    2206:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    220a:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Command&0x0f);
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	98 2f       	mov	r25, r24
    2212:	9f 70       	andi	r25, 0x0F	; 15
    2214:	82 e0       	ldi	r24, 0x02	; 2
    2216:	69 2f       	mov	r22, r25
    2218:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    221c:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2224:	89 81       	ldd	r24, Y+1	; 0x01
}
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LCD_WriteData4Bit>:

ES_t LCD_WriteData4Bit(u8 Data){
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <LCD_WriteData4Bit+0x6>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    223c:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    223e:	83 e0       	ldi	r24, 0x03	; 3
    2240:	66 e0       	ldi	r22, 0x06	; 6
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Data>>4);
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	98 2f       	mov	r25, r24
    224c:	92 95       	swap	r25
    224e:	9f 70       	andi	r25, 0x0F	; 15
    2250:	82 e0       	ldi	r24, 0x02	; 2
    2252:	69 2f       	mov	r22, r25
    2254:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    2258:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Data&0x0f);
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	98 2f       	mov	r25, r24
    2260:	9f 70       	andi	r25, 0x0F	; 15
    2262:	82 e0       	ldi	r24, 0x02	; 2
    2264:	69 2f       	mov	r22, r25
    2266:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    226a:	0e 94 ba 13 	call	0x2774	; 0x2774 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2272:	89 81       	ldd	r24, Y+1	; 0x01
}
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <LCD_4BitInitialize>:

ES_t LCD_4BitInitialize(void){
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2288:	19 82       	std	Y+1, r1	; 0x01
	SetDirections4Bit();
    228a:	0e 94 a5 13 	call	0x274a	; 0x274a <SetDirections4Bit>
	FunctionSet4Bit();
    228e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <FunctionSet4Bit>
	DisplayOnOffControl4Bit();
    2292:	0e 94 bc 18 	call	0x3178	; 0x3178 <DisplayOnOffControl4Bit>
	DisplayClear4Bit();
    2296:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <DisplayClear4Bit>
	EntryModeSet4Bit();
    229a:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <EntryModeSet4Bit>
	Local_enuErrorstate = ES_OK;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <LCD_WriteString8Bit>:





ES_t LCD_WriteString8Bit(char *string){
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LCD_WriteString8Bit+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <LCD_WriteString8Bit+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    22bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    22be:	19 82       	std	Y+1, r1	; 0x01
    22c0:	0e c0       	rjmp	.+28     	; 0x22de <LCD_WriteString8Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData8Bit(string[i]);
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	fc 01       	movw	r30, r24
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	80 81       	ld	r24, Z
    22d4:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_WriteData8Bit>
		i++;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	8f 5f       	subi	r24, 0xFF	; 255
    22dc:	89 83       	std	Y+1, r24	; 0x01


ES_t LCD_WriteString8Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	fc 01       	movw	r30, r24
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	80 81       	ld	r24, Z
    22f0:	88 23       	and	r24, r24
    22f2:	39 f7       	brne	.-50     	; 0x22c2 <LCD_WriteString8Bit+0x16>
		LCD_WriteData8Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <LCD_GoToXY8Bit>:

ES_t LCD_GoToXY8Bit(u8 X_Pos,u8 Y_Pos){
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <LCD_GoToXY8Bit+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <LCD_GoToXY8Bit+0x8>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	8b 83       	std	Y+3, r24	; 0x03
    2316:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2318:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	88 23       	and	r24, r24
    231e:	19 f4       	brne	.+6      	; 0x2326 <LCD_GoToXY8Bit+0x1e>
		Address = X_Pos;
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	06 c0       	rjmp	.+12     	; 0x2332 <LCD_GoToXY8Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	19 f4       	brne	.+6      	; 0x2332 <LCD_GoToXY8Bit+0x2a>
		Address = X_Pos + 0x40;
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 5c       	subi	r24, 0xC0	; 192
    2330:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand8Bit(128+Address);
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	80 58       	subi	r24, 0x80	; 128
    2336:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_WriteNumber8Bit>:

ES_t LCD_WriteNumber8Bit(s32 Number){
    234e:	ef 92       	push	r14
    2350:	ff 92       	push	r15
    2352:	0f 93       	push	r16
    2354:	1f 93       	push	r17
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	29 97       	sbiw	r28, 0x09	; 9
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	6e 83       	std	Y+6, r22	; 0x06
    236c:	7f 83       	std	Y+7, r23	; 0x07
    236e:	88 87       	std	Y+8, r24	; 0x08
    2370:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    2372:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	9a 83       	std	Y+2, r25	; 0x02
    2380:	ab 83       	std	Y+3, r26	; 0x03
    2382:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    2384:	8e 81       	ldd	r24, Y+6	; 0x06
    2386:	9f 81       	ldd	r25, Y+7	; 0x07
    2388:	a8 85       	ldd	r26, Y+8	; 0x08
    238a:	b9 85       	ldd	r27, Y+9	; 0x09
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	a1 05       	cpc	r26, r1
    2390:	b1 05       	cpc	r27, r1
    2392:	21 f4       	brne	.+8      	; 0x239c <LCD_WriteNumber8Bit+0x4e>
		LCD_WriteData8Bit('0');
    2394:	80 e3       	ldi	r24, 0x30	; 48
    2396:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_WriteData8Bit>
    239a:	50 c0       	rjmp	.+160    	; 0x243c <LCD_WriteNumber8Bit+0xee>
	}
	else if(Number < 0){
    239c:	8e 81       	ldd	r24, Y+6	; 0x06
    239e:	9f 81       	ldd	r25, Y+7	; 0x07
    23a0:	a8 85       	ldd	r26, Y+8	; 0x08
    23a2:	b9 85       	ldd	r27, Y+9	; 0x09
    23a4:	bb 23       	and	r27, r27
    23a6:	0c f0       	brlt	.+2      	; 0x23aa <LCD_WriteNumber8Bit+0x5c>
    23a8:	49 c0       	rjmp	.+146    	; 0x243c <LCD_WriteNumber8Bit+0xee>
		LCD_WriteData8Bit('-');
    23aa:	8d e2       	ldi	r24, 0x2D	; 45
    23ac:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_WriteData8Bit>
		Number = Number * (-1);
    23b0:	8e 81       	ldd	r24, Y+6	; 0x06
    23b2:	9f 81       	ldd	r25, Y+7	; 0x07
    23b4:	a8 85       	ldd	r26, Y+8	; 0x08
    23b6:	b9 85       	ldd	r27, Y+9	; 0x09
    23b8:	b0 95       	com	r27
    23ba:	a0 95       	com	r26
    23bc:	90 95       	com	r25
    23be:	81 95       	neg	r24
    23c0:	9f 4f       	sbci	r25, 0xFF	; 255
    23c2:	af 4f       	sbci	r26, 0xFF	; 255
    23c4:	bf 4f       	sbci	r27, 0xFF	; 255
    23c6:	8e 83       	std	Y+6, r24	; 0x06
    23c8:	9f 83       	std	Y+7, r25	; 0x07
    23ca:	a8 87       	std	Y+8, r26	; 0x08
    23cc:	b9 87       	std	Y+9, r27	; 0x09
    23ce:	36 c0       	rjmp	.+108    	; 0x243c <LCD_WriteNumber8Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	ab 81       	ldd	r26, Y+3	; 0x03
    23d6:	bc 81       	ldd	r27, Y+4	; 0x04
    23d8:	2a e0       	ldi	r18, 0x0A	; 10
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e0       	ldi	r20, 0x00	; 0
    23de:	50 e0       	ldi	r21, 0x00	; 0
    23e0:	bc 01       	movw	r22, r24
    23e2:	cd 01       	movw	r24, r26
    23e4:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__mulsi3>
    23e8:	7b 01       	movw	r14, r22
    23ea:	8c 01       	movw	r16, r24
    23ec:	8e 81       	ldd	r24, Y+6	; 0x06
    23ee:	9f 81       	ldd	r25, Y+7	; 0x07
    23f0:	a8 85       	ldd	r26, Y+8	; 0x08
    23f2:	b9 85       	ldd	r27, Y+9	; 0x09
    23f4:	2a e0       	ldi	r18, 0x0A	; 10
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	8e 0d       	add	r24, r14
    240a:	9f 1d       	adc	r25, r15
    240c:	a0 1f       	adc	r26, r16
    240e:	b1 1f       	adc	r27, r17
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	ab 83       	std	Y+3, r26	; 0x03
    2416:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    2418:	8e 81       	ldd	r24, Y+6	; 0x06
    241a:	9f 81       	ldd	r25, Y+7	; 0x07
    241c:	a8 85       	ldd	r26, Y+8	; 0x08
    241e:	b9 85       	ldd	r27, Y+9	; 0x09
    2420:	2a e0       	ldi	r18, 0x0A	; 10
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e0       	ldi	r20, 0x00	; 0
    2426:	50 e0       	ldi	r21, 0x00	; 0
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    2430:	da 01       	movw	r26, r20
    2432:	c9 01       	movw	r24, r18
    2434:	8e 83       	std	Y+6, r24	; 0x06
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	a8 87       	std	Y+8, r26	; 0x08
    243a:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData8Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	a8 85       	ldd	r26, Y+8	; 0x08
    2442:	b9 85       	ldd	r27, Y+9	; 0x09
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	a1 05       	cpc	r26, r1
    2448:	b1 05       	cpc	r27, r1
    244a:	11 f6       	brne	.-124    	; 0x23d0 <LCD_WriteNumber8Bit+0x82>
    244c:	23 c0       	rjmp	.+70     	; 0x2494 <LCD_WriteNumber8Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData8Bit((NUM % 10) + 48);
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	ab 81       	ldd	r26, Y+3	; 0x03
    2454:	bc 81       	ldd	r27, Y+4	; 0x04
    2456:	2a e0       	ldi	r18, 0x0A	; 10
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	80 5d       	subi	r24, 0xD0	; 208
    246c:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_WriteData8Bit>
		NUM = (NUM / 10);
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	ab 81       	ldd	r26, Y+3	; 0x03
    2476:	bc 81       	ldd	r27, Y+4	; 0x04
    2478:	2a e0       	ldi	r18, 0x0A	; 10
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    2488:	da 01       	movw	r26, r20
    248a:	c9 01       	movw	r24, r18
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	ab 83       	std	Y+3, r26	; 0x03
    2492:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	9a 81       	ldd	r25, Y+2	; 0x02
    2498:	ab 81       	ldd	r26, Y+3	; 0x03
    249a:	bc 81       	ldd	r27, Y+4	; 0x04
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	91 05       	cpc	r25, r1
    24a0:	a1 05       	cpc	r26, r1
    24a2:	b1 05       	cpc	r27, r1
    24a4:	a1 f6       	brne	.-88     	; 0x244e <LCD_WriteNumber8Bit+0x100>
		LCD_WriteData8Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24ac:	29 96       	adiw	r28, 0x09	; 9
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	1f 91       	pop	r17
    24be:	0f 91       	pop	r16
    24c0:	ff 90       	pop	r15
    24c2:	ef 90       	pop	r14
    24c4:	08 95       	ret

000024c6 <LCD_WriteString4Bit>:
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <LCD_WriteString4Bit+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <LCD_WriteString4Bit+0x8>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    24d6:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    24d8:	19 82       	std	Y+1, r1	; 0x01
    24da:	0e c0       	rjmp	.+28     	; 0x24f8 <LCD_WriteString4Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData4Bit(string[i]);
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	80 81       	ld	r24, Z
    24ee:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
		i++;
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	89 83       	std	Y+1, r24	; 0x01
}
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	28 2f       	mov	r18, r24
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	fc 01       	movw	r30, r24
    2504:	e2 0f       	add	r30, r18
    2506:	f3 1f       	adc	r31, r19
    2508:	80 81       	ld	r24, Z
    250a:	88 23       	and	r24, r24
    250c:	39 f7       	brne	.-50     	; 0x24dc <LCD_WriteString4Bit+0x16>
		LCD_WriteData4Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    2512:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <LCD_GoToXY4Bit>:

ES_t LCD_GoToXY4Bit(u8 X_Pos,u8 Y_Pos){
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_GoToXY4Bit+0x6>
    2528:	00 d0       	rcall	.+0      	; 0x252a <LCD_GoToXY4Bit+0x8>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8b 83       	std	Y+3, r24	; 0x03
    2530:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2532:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    2534:	8c 81       	ldd	r24, Y+4	; 0x04
    2536:	88 23       	and	r24, r24
    2538:	19 f4       	brne	.+6      	; 0x2540 <LCD_GoToXY4Bit+0x1e>
		Address = X_Pos;
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	06 c0       	rjmp	.+12     	; 0x254c <LCD_GoToXY4Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	81 30       	cpi	r24, 0x01	; 1
    2544:	19 f4       	brne	.+6      	; 0x254c <LCD_GoToXY4Bit+0x2a>
		Address = X_Pos + 0x40;
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	80 5c       	subi	r24, 0xC0	; 192
    254a:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand4Bit(128+Address);
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	80 58       	subi	r24, 0x80	; 128
    2550:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
	Local_enuErrorstate = ES_OK;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <LCD_WriteNumber4Bit>:

ES_t LCD_WriteNumber4Bit(s32 Number){
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	29 97       	sbiw	r28, 0x09	; 9
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	6e 83       	std	Y+6, r22	; 0x06
    2586:	7f 83       	std	Y+7, r23	; 0x07
    2588:	88 87       	std	Y+8, r24	; 0x08
    258a:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    258c:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	ab 83       	std	Y+3, r26	; 0x03
    259c:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    259e:	8e 81       	ldd	r24, Y+6	; 0x06
    25a0:	9f 81       	ldd	r25, Y+7	; 0x07
    25a2:	a8 85       	ldd	r26, Y+8	; 0x08
    25a4:	b9 85       	ldd	r27, Y+9	; 0x09
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	a1 05       	cpc	r26, r1
    25aa:	b1 05       	cpc	r27, r1
    25ac:	21 f4       	brne	.+8      	; 0x25b6 <LCD_WriteNumber4Bit+0x4e>
		LCD_WriteData4Bit('0');
    25ae:	80 e3       	ldi	r24, 0x30	; 48
    25b0:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
    25b4:	50 c0       	rjmp	.+160    	; 0x2656 <LCD_WriteNumber4Bit+0xee>
	}
	else if(Number < 0){
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	a8 85       	ldd	r26, Y+8	; 0x08
    25bc:	b9 85       	ldd	r27, Y+9	; 0x09
    25be:	bb 23       	and	r27, r27
    25c0:	0c f0       	brlt	.+2      	; 0x25c4 <LCD_WriteNumber4Bit+0x5c>
    25c2:	49 c0       	rjmp	.+146    	; 0x2656 <LCD_WriteNumber4Bit+0xee>
		LCD_WriteData4Bit('-');
    25c4:	8d e2       	ldi	r24, 0x2D	; 45
    25c6:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
		Number = Number * (-1);
    25ca:	8e 81       	ldd	r24, Y+6	; 0x06
    25cc:	9f 81       	ldd	r25, Y+7	; 0x07
    25ce:	a8 85       	ldd	r26, Y+8	; 0x08
    25d0:	b9 85       	ldd	r27, Y+9	; 0x09
    25d2:	b0 95       	com	r27
    25d4:	a0 95       	com	r26
    25d6:	90 95       	com	r25
    25d8:	81 95       	neg	r24
    25da:	9f 4f       	sbci	r25, 0xFF	; 255
    25dc:	af 4f       	sbci	r26, 0xFF	; 255
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	8e 83       	std	Y+6, r24	; 0x06
    25e2:	9f 83       	std	Y+7, r25	; 0x07
    25e4:	a8 87       	std	Y+8, r26	; 0x08
    25e6:	b9 87       	std	Y+9, r27	; 0x09
    25e8:	36 c0       	rjmp	.+108    	; 0x2656 <LCD_WriteNumber4Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	ab 81       	ldd	r26, Y+3	; 0x03
    25f0:	bc 81       	ldd	r27, Y+4	; 0x04
    25f2:	2a e0       	ldi	r18, 0x0A	; 10
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <__mulsi3>
    2602:	7b 01       	movw	r14, r22
    2604:	8c 01       	movw	r16, r24
    2606:	8e 81       	ldd	r24, Y+6	; 0x06
    2608:	9f 81       	ldd	r25, Y+7	; 0x07
    260a:	a8 85       	ldd	r26, Y+8	; 0x08
    260c:	b9 85       	ldd	r27, Y+9	; 0x09
    260e:	2a e0       	ldi	r18, 0x0A	; 10
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8e 0d       	add	r24, r14
    2624:	9f 1d       	adc	r25, r15
    2626:	a0 1f       	adc	r26, r16
    2628:	b1 1f       	adc	r27, r17
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	9a 83       	std	Y+2, r25	; 0x02
    262e:	ab 83       	std	Y+3, r26	; 0x03
    2630:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    2632:	8e 81       	ldd	r24, Y+6	; 0x06
    2634:	9f 81       	ldd	r25, Y+7	; 0x07
    2636:	a8 85       	ldd	r26, Y+8	; 0x08
    2638:	b9 85       	ldd	r27, Y+9	; 0x09
    263a:	2a e0       	ldi	r18, 0x0A	; 10
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	bc 01       	movw	r22, r24
    2644:	cd 01       	movw	r24, r26
    2646:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    264a:	da 01       	movw	r26, r20
    264c:	c9 01       	movw	r24, r18
    264e:	8e 83       	std	Y+6, r24	; 0x06
    2650:	9f 83       	std	Y+7, r25	; 0x07
    2652:	a8 87       	std	Y+8, r26	; 0x08
    2654:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData4Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    2656:	8e 81       	ldd	r24, Y+6	; 0x06
    2658:	9f 81       	ldd	r25, Y+7	; 0x07
    265a:	a8 85       	ldd	r26, Y+8	; 0x08
    265c:	b9 85       	ldd	r27, Y+9	; 0x09
    265e:	00 97       	sbiw	r24, 0x00	; 0
    2660:	a1 05       	cpc	r26, r1
    2662:	b1 05       	cpc	r27, r1
    2664:	11 f6       	brne	.-124    	; 0x25ea <LCD_WriteNumber4Bit+0x82>
    2666:	23 c0       	rjmp	.+70     	; 0x26ae <LCD_WriteNumber4Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData4Bit((NUM % 10) + 48);
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	9a 81       	ldd	r25, Y+2	; 0x02
    266c:	ab 81       	ldd	r26, Y+3	; 0x03
    266e:	bc 81       	ldd	r27, Y+4	; 0x04
    2670:	2a e0       	ldi	r18, 0x0A	; 10
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	80 5d       	subi	r24, 0xD0	; 208
    2686:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
		NUM = (NUM / 10);
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	ab 81       	ldd	r26, Y+3	; 0x03
    2690:	bc 81       	ldd	r27, Y+4	; 0x04
    2692:	2a e0       	ldi	r18, 0x0A	; 10
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	bc 01       	movw	r22, r24
    269c:	cd 01       	movw	r24, r26
    269e:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <__divmodsi4>
    26a2:	da 01       	movw	r26, r20
    26a4:	c9 01       	movw	r24, r18
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	9a 83       	std	Y+2, r25	; 0x02
    26aa:	ab 83       	std	Y+3, r26	; 0x03
    26ac:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	ab 81       	ldd	r26, Y+3	; 0x03
    26b4:	bc 81       	ldd	r27, Y+4	; 0x04
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	91 05       	cpc	r25, r1
    26ba:	a1 05       	cpc	r26, r1
    26bc:	b1 05       	cpc	r27, r1
    26be:	a1 f6       	brne	.-88     	; 0x2668 <LCD_WriteNumber4Bit+0x100>
		LCD_WriteData4Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    26c6:	29 96       	adiw	r28, 0x09	; 9
    26c8:	0f b6       	in	r0, 0x3f	; 63
    26ca:	f8 94       	cli
    26cc:	de bf       	out	0x3e, r29	; 62
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	ff 90       	pop	r15
    26dc:	ef 90       	pop	r14
    26de:	08 95       	ret

000026e0 <LCD_ClearDisplay8Bit>:

ES_t LCD_ClearDisplay8Bit(void){
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	0f 92       	push	r0
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    26ea:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteCommand8Bit(1);
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <LCD_ClearDisplay4Bit>:
ES_t LCD_ClearDisplay4Bit(void){
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	0f 92       	push	r0
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    270a:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand4Bit(1);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
		Local_enuErrorstate = ES_OK;
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <SetDirections8Bit>:



/*		LOCAL FUNCTIONS Implementation		*/

static void SetDirections8Bit(void){
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xff);
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	6f ef       	ldi	r22, 0xFF	; 255
    272c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	66 e0       	ldi	r22, 0x06	; 6
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    273a:	83 e0       	ldi	r24, 0x03	; 3
    273c:	67 e0       	ldi	r22, 0x07	; 7
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
}
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <SetDirections4Bit>:
static void SetDirections4Bit(void){
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xf);
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	6f e0       	ldi	r22, 0x0F	; 15
    2756:	0e 94 57 0c 	call	0x18ae	; 0x18ae <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    275a:	83 e0       	ldi	r24, 0x03	; 3
    275c:	66 e0       	ldi	r22, 0x06	; 6
    275e:	41 e0       	ldi	r20, 0x01	; 1
    2760:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    2764:	83 e0       	ldi	r24, 0x03	; 3
    2766:	67 e0       	ldi	r22, 0x07	; 7
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
}
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <SendEnablePulse>:


static void SendEnablePulse(void){
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	6c 97       	sbiw	r28, 0x1c	; 28
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(CONTROL_PORT,E_PIN,HIGH);
    2788:	83 e0       	ldi	r24, 0x03	; 3
    278a:	67 e0       	ldi	r22, 0x07	; 7
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	a0 e0       	ldi	r26, 0x00	; 0
    2798:	b0 e4       	ldi	r27, 0x40	; 64
    279a:	89 8f       	std	Y+25, r24	; 0x19
    279c:	9a 8f       	std	Y+26, r25	; 0x1a
    279e:	ab 8f       	std	Y+27, r26	; 0x1b
    27a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a2:	69 8d       	ldd	r22, Y+25	; 0x19
    27a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	4a ef       	ldi	r20, 0xFA	; 250
    27b0:	54 e4       	ldi	r21, 0x44	; 68
    27b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	8d 8b       	std	Y+21, r24	; 0x15
    27bc:	9e 8b       	std	Y+22, r25	; 0x16
    27be:	af 8b       	std	Y+23, r26	; 0x17
    27c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27c2:	6d 89       	ldd	r22, Y+21	; 0x15
    27c4:	7e 89       	ldd	r23, Y+22	; 0x16
    27c6:	8f 89       	ldd	r24, Y+23	; 0x17
    27c8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e8       	ldi	r20, 0x80	; 128
    27d0:	5f e3       	ldi	r21, 0x3F	; 63
    27d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27d6:	88 23       	and	r24, r24
    27d8:	2c f4       	brge	.+10     	; 0x27e4 <SendEnablePulse+0x70>
		__ticks = 1;
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 8b       	std	Y+20, r25	; 0x14
    27e0:	8b 8b       	std	Y+19, r24	; 0x13
    27e2:	3f c0       	rjmp	.+126    	; 0x2862 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    27e4:	6d 89       	ldd	r22, Y+21	; 0x15
    27e6:	7e 89       	ldd	r23, Y+22	; 0x16
    27e8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ea:	98 8d       	ldd	r25, Y+24	; 0x18
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	3f ef       	ldi	r19, 0xFF	; 255
    27f0:	4f e7       	ldi	r20, 0x7F	; 127
    27f2:	57 e4       	ldi	r21, 0x47	; 71
    27f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27f8:	18 16       	cp	r1, r24
    27fa:	4c f5       	brge	.+82     	; 0x284e <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27fc:	69 8d       	ldd	r22, Y+25	; 0x19
    27fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2800:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2802:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e2       	ldi	r20, 0x20	; 32
    280a:	51 e4       	ldi	r21, 0x41	; 65
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	bc 01       	movw	r22, r24
    2816:	cd 01       	movw	r24, r26
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9c 8b       	std	Y+20, r25	; 0x14
    2822:	8b 8b       	std	Y+19, r24	; 0x13
    2824:	0f c0       	rjmp	.+30     	; 0x2844 <SendEnablePulse+0xd0>
    2826:	88 ec       	ldi	r24, 0xC8	; 200
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	9a 8b       	std	Y+18, r25	; 0x12
    282c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    282e:	89 89       	ldd	r24, Y+17	; 0x11
    2830:	9a 89       	ldd	r25, Y+18	; 0x12
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	f1 f7       	brne	.-4      	; 0x2832 <SendEnablePulse+0xbe>
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	9c 8b       	std	Y+20, r25	; 0x14
    2842:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2844:	8b 89       	ldd	r24, Y+19	; 0x13
    2846:	9c 89       	ldd	r25, Y+20	; 0x14
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	69 f7       	brne	.-38     	; 0x2826 <SendEnablePulse+0xb2>
    284c:	14 c0       	rjmp	.+40     	; 0x2876 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    284e:	6d 89       	ldd	r22, Y+21	; 0x15
    2850:	7e 89       	ldd	r23, Y+22	; 0x16
    2852:	8f 89       	ldd	r24, Y+23	; 0x17
    2854:	98 8d       	ldd	r25, Y+24	; 0x18
    2856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	98 8b       	std	Y+16, r25	; 0x10
    2868:	8f 87       	std	Y+15, r24	; 0x0f
    286a:	8f 85       	ldd	r24, Y+15	; 0x0f
    286c:	98 89       	ldd	r25, Y+16	; 0x10
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <SendEnablePulse+0xfa>
    2872:	98 8b       	std	Y+16, r25	; 0x10
    2874:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,LOW);
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	67 e0       	ldi	r22, 0x07	; 7
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	a0 ea       	ldi	r26, 0xA0	; 160
    2886:	b0 e4       	ldi	r27, 0x40	; 64
    2888:	8b 87       	std	Y+11, r24	; 0x0b
    288a:	9c 87       	std	Y+12, r25	; 0x0c
    288c:	ad 87       	std	Y+13, r26	; 0x0d
    288e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2890:	6b 85       	ldd	r22, Y+11	; 0x0b
    2892:	7c 85       	ldd	r23, Y+12	; 0x0c
    2894:	8d 85       	ldd	r24, Y+13	; 0x0d
    2896:	9e 85       	ldd	r25, Y+14	; 0x0e
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a ef       	ldi	r20, 0xFA	; 250
    289e:	54 e4       	ldi	r21, 0x44	; 68
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	8f 83       	std	Y+7, r24	; 0x07
    28aa:	98 87       	std	Y+8, r25	; 0x08
    28ac:	a9 87       	std	Y+9, r26	; 0x09
    28ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	40 e8       	ldi	r20, 0x80	; 128
    28be:	5f e3       	ldi	r21, 0x3F	; 63
    28c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c4:	88 23       	and	r24, r24
    28c6:	2c f4       	brge	.+10     	; 0x28d2 <SendEnablePulse+0x15e>
		__ticks = 1;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	3f c0       	rjmp	.+126    	; 0x2950 <SendEnablePulse+0x1dc>
	else if (__tmp > 65535)
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	3f ef       	ldi	r19, 0xFF	; 255
    28de:	4f e7       	ldi	r20, 0x7F	; 127
    28e0:	57 e4       	ldi	r21, 0x47	; 71
    28e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28e6:	18 16       	cp	r1, r24
    28e8:	4c f5       	brge	.+82     	; 0x293c <SendEnablePulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e2       	ldi	r20, 0x20	; 32
    28f8:	51 e4       	ldi	r21, 0x41	; 65
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
    2912:	0f c0       	rjmp	.+30     	; 0x2932 <SendEnablePulse+0x1be>
    2914:	88 ec       	ldi	r24, 0xC8	; 200
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	9c 81       	ldd	r25, Y+4	; 0x04
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <SendEnablePulse+0x1ac>
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	9e 83       	std	Y+6, r25	; 0x06
    2930:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	69 f7       	brne	.-38     	; 0x2914 <SendEnablePulse+0x1a0>
    293a:	14 c0       	rjmp	.+40     	; 0x2964 <SendEnablePulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293c:	6f 81       	ldd	r22, Y+7	; 0x07
    293e:	78 85       	ldd	r23, Y+8	; 0x08
    2940:	89 85       	ldd	r24, Y+9	; 0x09
    2942:	9a 85       	ldd	r25, Y+10	; 0x0a
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	9a 83       	std	Y+2, r25	; 0x02
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <SendEnablePulse+0x1e8>
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2964:	6c 96       	adiw	r28, 0x1c	; 28
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <FunctionSet8Bit>:
/****************************************************/
static void FunctionSet8Bit(void){
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	2e 97       	sbiw	r28, 0x0e	; 14
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a8 e4       	ldi	r26, 0x48	; 72
    2990:	b2 e4       	ldi	r27, 0x42	; 66
    2992:	8b 87       	std	Y+11, r24	; 0x0b
    2994:	9c 87       	std	Y+12, r25	; 0x0c
    2996:	ad 87       	std	Y+13, r26	; 0x0d
    2998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a ef       	ldi	r20, 0xFA	; 250
    29a8:	54 e4       	ldi	r21, 0x44	; 68
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8f 83       	std	Y+7, r24	; 0x07
    29b4:	98 87       	std	Y+8, r25	; 0x08
    29b6:	a9 87       	std	Y+9, r26	; 0x09
    29b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <FunctionSet8Bit+0x66>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <FunctionSet8Bit+0xe4>
	else if (__tmp > 65535)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <FunctionSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <FunctionSet8Bit+0xc6>
    2a1e:	88 ec       	ldi	r24, 0xC8	; 200
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <FunctionSet8Bit+0xb4>
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <FunctionSet8Bit+0xa8>
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <FunctionSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <FunctionSet8Bit+0xf0>
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_WriteCommand8Bit(0x3C);
    2a6e:	8c e3       	ldi	r24, 0x3C	; 60
    2a70:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
}
    2a74:	2e 96       	adiw	r28, 0x0e	; 14
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <DisplayOnOffControl8Bit>:
static void DisplayOnOffControl8Bit(void){
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	68 97       	sbiw	r28, 0x18	; 24
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a8 e4       	ldi	r26, 0x48	; 72
    2aa0:	b2 e4       	ldi	r27, 0x42	; 66
    2aa2:	8d 8b       	std	Y+21, r24	; 0x15
    2aa4:	9e 8b       	std	Y+22, r25	; 0x16
    2aa6:	af 8b       	std	Y+23, r26	; 0x17
    2aa8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2aac:	7e 89       	ldd	r23, Y+22	; 0x16
    2aae:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab2:	2b ea       	ldi	r18, 0xAB	; 171
    2ab4:	3a ea       	ldi	r19, 0xAA	; 170
    2ab6:	4a e2       	ldi	r20, 0x2A	; 42
    2ab8:	50 e4       	ldi	r21, 0x40	; 64
    2aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	89 8b       	std	Y+17, r24	; 0x11
    2ac4:	9a 8b       	std	Y+18, r25	; 0x12
    2ac6:	ab 8b       	std	Y+19, r26	; 0x13
    2ac8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2aca:	69 89       	ldd	r22, Y+17	; 0x11
    2acc:	7a 89       	ldd	r23, Y+18	; 0x12
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	1c f4       	brge	.+6      	; 0x2ae8 <DisplayOnOffControl8Bit+0x62>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	88 8b       	std	Y+16, r24	; 0x10
    2ae6:	91 c0       	rjmp	.+290    	; 0x2c0a <DisplayOnOffControl8Bit+0x184>
	else if (__tmp > 255)
    2ae8:	69 89       	ldd	r22, Y+17	; 0x11
    2aea:	7a 89       	ldd	r23, Y+18	; 0x12
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	53 e4       	ldi	r21, 0x43	; 67
    2af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	0c f0       	brlt	.+2      	; 0x2b02 <DisplayOnOffControl8Bit+0x7c>
    2b00:	7b c0       	rjmp	.+246    	; 0x2bf8 <DisplayOnOffControl8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2b02:	6d 89       	ldd	r22, Y+21	; 0x15
    2b04:	7e 89       	ldd	r23, Y+22	; 0x16
    2b06:	8f 89       	ldd	r24, Y+23	; 0x17
    2b08:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	54 e4       	ldi	r21, 0x44	; 68
    2b12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8c 87       	std	Y+12, r24	; 0x0c
    2b1c:	9d 87       	std	Y+13, r25	; 0x0d
    2b1e:	ae 87       	std	Y+14, r26	; 0x0e
    2b20:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b24:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b26:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b28:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a ef       	ldi	r20, 0xFA	; 250
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	88 87       	std	Y+8, r24	; 0x08
    2b3c:	99 87       	std	Y+9, r25	; 0x09
    2b3e:	aa 87       	std	Y+10, r26	; 0x0a
    2b40:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b42:	68 85       	ldd	r22, Y+8	; 0x08
    2b44:	79 85       	ldd	r23, Y+9	; 0x09
    2b46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <DisplayOnOffControl8Bit+0xde>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9f 83       	std	Y+7, r25	; 0x07
    2b60:	8e 83       	std	Y+6, r24	; 0x06
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <DisplayOnOffControl8Bit+0x15c>
	else if (__tmp > 65535)
    2b64:	68 85       	ldd	r22, Y+8	; 0x08
    2b66:	79 85       	ldd	r23, Y+9	; 0x09
    2b68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <DisplayOnOffControl8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b7e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b80:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b82:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9f 83       	std	Y+7, r25	; 0x07
    2ba2:	8e 83       	std	Y+6, r24	; 0x06
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <DisplayOnOffControl8Bit+0x13e>
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	9d 83       	std	Y+5, r25	; 0x05
    2bac:	8c 83       	std	Y+4, r24	; 0x04
    2bae:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <DisplayOnOffControl8Bit+0x12c>
    2bb6:	9d 83       	std	Y+5, r25	; 0x05
    2bb8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	8e 81       	ldd	r24, Y+6	; 0x06
    2bbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9f 83       	std	Y+7, r25	; 0x07
    2bc2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <DisplayOnOffControl8Bit+0x120>
    2bcc:	24 c0       	rjmp	.+72     	; 0x2c16 <DisplayOnOffControl8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	68 85       	ldd	r22, Y+8	; 0x08
    2bd0:	79 85       	ldd	r23, Y+9	; 0x09
    2bd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9f 83       	std	Y+7, r25	; 0x07
    2be0:	8e 83       	std	Y+6, r24	; 0x06
    2be2:	8e 81       	ldd	r24, Y+6	; 0x06
    2be4:	9f 81       	ldd	r25, Y+7	; 0x07
    2be6:	9b 83       	std	Y+3, r25	; 0x03
    2be8:	8a 83       	std	Y+2, r24	; 0x02
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <DisplayOnOffControl8Bit+0x168>
    2bf2:	9b 83       	std	Y+3, r25	; 0x03
    2bf4:	8a 83       	std	Y+2, r24	; 0x02
    2bf6:	0f c0       	rjmp	.+30     	; 0x2c16 <DisplayOnOffControl8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bf8:	69 89       	ldd	r22, Y+17	; 0x11
    2bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    2bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	88 8b       	std	Y+16, r24	; 0x10
    2c0a:	88 89       	ldd	r24, Y+16	; 0x10
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8a 95       	dec	r24
    2c12:	f1 f7       	brne	.-4      	; 0x2c10 <DisplayOnOffControl8Bit+0x18a>
    2c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x0E);
    2c16:	8e e0       	ldi	r24, 0x0E	; 14
    2c18:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
}
    2c1c:	68 96       	adiw	r28, 0x18	; 24
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <DisplayClear8Bit>:
static void DisplayClear8Bit(void){
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	68 97       	sbiw	r28, 0x18	; 24
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	a8 e4       	ldi	r26, 0x48	; 72
    2c48:	b2 e4       	ldi	r27, 0x42	; 66
    2c4a:	8d 8b       	std	Y+21, r24	; 0x15
    2c4c:	9e 8b       	std	Y+22, r25	; 0x16
    2c4e:	af 8b       	std	Y+23, r26	; 0x17
    2c50:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c52:	6d 89       	ldd	r22, Y+21	; 0x15
    2c54:	7e 89       	ldd	r23, Y+22	; 0x16
    2c56:	8f 89       	ldd	r24, Y+23	; 0x17
    2c58:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5a:	2b ea       	ldi	r18, 0xAB	; 171
    2c5c:	3a ea       	ldi	r19, 0xAA	; 170
    2c5e:	4a e2       	ldi	r20, 0x2A	; 42
    2c60:	50 e4       	ldi	r21, 0x40	; 64
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	89 8b       	std	Y+17, r24	; 0x11
    2c6c:	9a 8b       	std	Y+18, r25	; 0x12
    2c6e:	ab 8b       	std	Y+19, r26	; 0x13
    2c70:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2c72:	69 89       	ldd	r22, Y+17	; 0x11
    2c74:	7a 89       	ldd	r23, Y+18	; 0x12
    2c76:	8b 89       	ldd	r24, Y+19	; 0x13
    2c78:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e8       	ldi	r20, 0x80	; 128
    2c80:	5f e3       	ldi	r21, 0x3F	; 63
    2c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c86:	88 23       	and	r24, r24
    2c88:	1c f4       	brge	.+6      	; 0x2c90 <DisplayClear8Bit+0x62>
		__ticks = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	88 8b       	std	Y+16, r24	; 0x10
    2c8e:	91 c0       	rjmp	.+290    	; 0x2db2 <DisplayClear8Bit+0x184>
	else if (__tmp > 255)
    2c90:	69 89       	ldd	r22, Y+17	; 0x11
    2c92:	7a 89       	ldd	r23, Y+18	; 0x12
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	9c 89       	ldd	r25, Y+20	; 0x14
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	53 e4       	ldi	r21, 0x43	; 67
    2ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <DisplayClear8Bit+0x7c>
    2ca8:	7b c0       	rjmp	.+246    	; 0x2da0 <DisplayClear8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2caa:	6d 89       	ldd	r22, Y+21	; 0x15
    2cac:	7e 89       	ldd	r23, Y+22	; 0x16
    2cae:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	54 e4       	ldi	r21, 0x44	; 68
    2cba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8c 87       	std	Y+12, r24	; 0x0c
    2cc4:	9d 87       	std	Y+13, r25	; 0x0d
    2cc6:	ae 87       	std	Y+14, r26	; 0x0e
    2cc8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ccc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2cce:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cd0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a ef       	ldi	r20, 0xFA	; 250
    2cd8:	54 e4       	ldi	r21, 0x44	; 68
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	88 87       	std	Y+8, r24	; 0x08
    2ce4:	99 87       	std	Y+9, r25	; 0x09
    2ce6:	aa 87       	std	Y+10, r26	; 0x0a
    2ce8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2cea:	68 85       	ldd	r22, Y+8	; 0x08
    2cec:	79 85       	ldd	r23, Y+9	; 0x09
    2cee:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <DisplayClear8Bit+0xde>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9f 83       	std	Y+7, r25	; 0x07
    2d08:	8e 83       	std	Y+6, r24	; 0x06
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <DisplayClear8Bit+0x15c>
	else if (__tmp > 65535)
    2d0c:	68 85       	ldd	r22, Y+8	; 0x08
    2d0e:	79 85       	ldd	r23, Y+9	; 0x09
    2d10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <DisplayClear8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6c 85       	ldd	r22, Y+12	; 0x0c
    2d26:	7d 85       	ldd	r23, Y+13	; 0x0d
    2d28:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9f 83       	std	Y+7, r25	; 0x07
    2d4a:	8e 83       	std	Y+6, r24	; 0x06
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <DisplayClear8Bit+0x13e>
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9d 83       	std	Y+5, r25	; 0x05
    2d54:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d56:	8c 81       	ldd	r24, Y+4	; 0x04
    2d58:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <DisplayClear8Bit+0x12c>
    2d5e:	9d 83       	std	Y+5, r25	; 0x05
    2d60:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	9f 81       	ldd	r25, Y+7	; 0x07
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9f 83       	std	Y+7, r25	; 0x07
    2d6a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <DisplayClear8Bit+0x120>
    2d74:	24 c0       	rjmp	.+72     	; 0x2dbe <DisplayClear8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	68 85       	ldd	r22, Y+8	; 0x08
    2d78:	79 85       	ldd	r23, Y+9	; 0x09
    2d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9f 83       	std	Y+7, r25	; 0x07
    2d88:	8e 83       	std	Y+6, r24	; 0x06
    2d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8e:	9b 83       	std	Y+3, r25	; 0x03
    2d90:	8a 83       	std	Y+2, r24	; 0x02
    2d92:	8a 81       	ldd	r24, Y+2	; 0x02
    2d94:	9b 81       	ldd	r25, Y+3	; 0x03
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <DisplayClear8Bit+0x168>
    2d9a:	9b 83       	std	Y+3, r25	; 0x03
    2d9c:	8a 83       	std	Y+2, r24	; 0x02
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <DisplayClear8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2da0:	69 89       	ldd	r22, Y+17	; 0x11
    2da2:	7a 89       	ldd	r23, Y+18	; 0x12
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	88 8b       	std	Y+16, r24	; 0x10
    2db2:	88 89       	ldd	r24, Y+16	; 0x10
    2db4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	8a 95       	dec	r24
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <DisplayClear8Bit+0x18a>
    2dbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x01);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
}
    2dc4:	68 96       	adiw	r28, 0x18	; 24
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	de bf       	out	0x3e, r29	; 62
    2dcc:	0f be       	out	0x3f, r0	; 63
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <EntryModeSet8Bit>:
static void EntryModeSet8Bit(void){
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	2e 97       	sbiw	r28, 0x0e	; 14
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	a0 e0       	ldi	r26, 0x00	; 0
    2df0:	b0 e4       	ldi	r27, 0x40	; 64
    2df2:	8b 87       	std	Y+11, r24	; 0x0b
    2df4:	9c 87       	std	Y+12, r25	; 0x0c
    2df6:	ad 87       	std	Y+13, r26	; 0x0d
    2df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	4a ef       	ldi	r20, 0xFA	; 250
    2e08:	54 e4       	ldi	r21, 0x44	; 68
    2e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	8f 83       	std	Y+7, r24	; 0x07
    2e14:	98 87       	std	Y+8, r25	; 0x08
    2e16:	a9 87       	std	Y+9, r26	; 0x09
    2e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	2c f4       	brge	.+10     	; 0x2e3c <EntryModeSet8Bit+0x66>
		__ticks = 1;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9e 83       	std	Y+6, r25	; 0x06
    2e38:	8d 83       	std	Y+5, r24	; 0x05
    2e3a:	3f c0       	rjmp	.+126    	; 0x2eba <EntryModeSet8Bit+0xe4>
	else if (__tmp > 65535)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	3f ef       	ldi	r19, 0xFF	; 255
    2e48:	4f e7       	ldi	r20, 0x7F	; 127
    2e4a:	57 e4       	ldi	r21, 0x47	; 71
    2e4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e50:	18 16       	cp	r1, r24
    2e52:	4c f5       	brge	.+82     	; 0x2ea6 <EntryModeSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	0f c0       	rjmp	.+30     	; 0x2e9c <EntryModeSet8Bit+0xc6>
    2e7e:	88 ec       	ldi	r24, 0xC8	; 200
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	9c 83       	std	Y+4, r25	; 0x04
    2e84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <EntryModeSet8Bit+0xb4>
    2e8e:	9c 83       	std	Y+4, r25	; 0x04
    2e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	9e 83       	std	Y+6, r25	; 0x06
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	69 f7       	brne	.-38     	; 0x2e7e <EntryModeSet8Bit+0xa8>
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <EntryModeSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea8:	78 85       	ldd	r23, Y+8	; 0x08
    2eaa:	89 85       	ldd	r24, Y+9	; 0x09
    2eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ebe:	9a 83       	std	Y+2, r25	; 0x02
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec6:	01 97       	sbiw	r24, 0x01	; 1
    2ec8:	f1 f7       	brne	.-4      	; 0x2ec6 <EntryModeSet8Bit+0xf0>
    2eca:	9a 83       	std	Y+2, r25	; 0x02
    2ecc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand8Bit(0x06);
    2ece:	86 e0       	ldi	r24, 0x06	; 6
    2ed0:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_WriteCommand8Bit>
}
    2ed4:	2e 96       	adiw	r28, 0x0e	; 14
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	de bf       	out	0x3e, r29	; 62
    2edc:	0f be       	out	0x3f, r0	; 63
    2ede:	cd bf       	out	0x3d, r28	; 61
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <FunctionSet4Bit>:
/*****************************************************/
static void FunctionSet4Bit(void){
    2ee6:	df 93       	push	r29
    2ee8:	cf 93       	push	r28
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	a6 97       	sbiw	r28, 0x26	; 38
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	a8 e4       	ldi	r26, 0x48	; 72
    2f00:	b2 e4       	ldi	r27, 0x42	; 66
    2f02:	8b a3       	std	Y+35, r24	; 0x23
    2f04:	9c a3       	std	Y+36, r25	; 0x24
    2f06:	ad a3       	std	Y+37, r26	; 0x25
    2f08:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f10:	9e a1       	ldd	r25, Y+38	; 0x26
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a ef       	ldi	r20, 0xFA	; 250
    2f18:	54 e4       	ldi	r21, 0x44	; 68
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	8f 8f       	std	Y+31, r24	; 0x1f
    2f24:	98 a3       	std	Y+32, r25	; 0x20
    2f26:	a9 a3       	std	Y+33, r26	; 0x21
    2f28:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2f2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f2c:	78 a1       	ldd	r23, Y+32	; 0x20
    2f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f30:	9a a1       	ldd	r25, Y+34	; 0x22
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	40 e8       	ldi	r20, 0x80	; 128
    2f38:	5f e3       	ldi	r21, 0x3F	; 63
    2f3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f3e:	88 23       	and	r24, r24
    2f40:	2c f4       	brge	.+10     	; 0x2f4c <FunctionSet4Bit+0x66>
		__ticks = 1;
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	9e 8f       	std	Y+30, r25	; 0x1e
    2f48:	8d 8f       	std	Y+29, r24	; 0x1d
    2f4a:	3f c0       	rjmp	.+126    	; 0x2fca <FunctionSet4Bit+0xe4>
	else if (__tmp > 65535)
    2f4c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2f4e:	78 a1       	ldd	r23, Y+32	; 0x20
    2f50:	89 a1       	ldd	r24, Y+33	; 0x21
    2f52:	9a a1       	ldd	r25, Y+34	; 0x22
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	3f ef       	ldi	r19, 0xFF	; 255
    2f58:	4f e7       	ldi	r20, 0x7F	; 127
    2f5a:	57 e4       	ldi	r21, 0x47	; 71
    2f5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f60:	18 16       	cp	r1, r24
    2f62:	4c f5       	brge	.+82     	; 0x2fb6 <FunctionSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f64:	6b a1       	ldd	r22, Y+35	; 0x23
    2f66:	7c a1       	ldd	r23, Y+36	; 0x24
    2f68:	8d a1       	ldd	r24, Y+37	; 0x25
    2f6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e2       	ldi	r20, 0x20	; 32
    2f72:	51 e4       	ldi	r21, 0x41	; 65
    2f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f78:	dc 01       	movw	r26, r24
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8c:	0f c0       	rjmp	.+30     	; 0x2fac <FunctionSet4Bit+0xc6>
    2f8e:	88 ec       	ldi	r24, 0xC8	; 200
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	9c 8f       	std	Y+28, r25	; 0x1c
    2f94:	8b 8f       	std	Y+27, r24	; 0x1b
    2f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <FunctionSet4Bit+0xb4>
    2f9e:	9c 8f       	std	Y+28, r25	; 0x1c
    2fa0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fa4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fa6:	01 97       	sbiw	r24, 0x01	; 1
    2fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    2faa:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	69 f7       	brne	.-38     	; 0x2f8e <FunctionSet4Bit+0xa8>
    2fb4:	14 c0       	rjmp	.+40     	; 0x2fde <FunctionSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2fb8:	78 a1       	ldd	r23, Y+32	; 0x20
    2fba:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc8:	8d 8f       	std	Y+29, r24	; 0x1d
    2fca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fce:	9a 8f       	std	Y+26, r25	; 0x1a
    2fd0:	89 8f       	std	Y+25, r24	; 0x19
    2fd2:	89 8d       	ldd	r24, Y+25	; 0x19
    2fd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2fd6:	01 97       	sbiw	r24, 0x01	; 1
    2fd8:	f1 f7       	brne	.-4      	; 0x2fd6 <FunctionSet4Bit+0xf0>
    2fda:	9a 8f       	std	Y+26, r25	; 0x1a
    2fdc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(50);
	LCD_WriteCommand4Bit(0x2);
    2fde:	82 e0       	ldi	r24, 0x02	; 2
    2fe0:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	a0 e2       	ldi	r26, 0x20	; 32
    2fea:	b1 e4       	ldi	r27, 0x41	; 65
    2fec:	8d 8b       	std	Y+21, r24	; 0x15
    2fee:	9e 8b       	std	Y+22, r25	; 0x16
    2ff0:	af 8b       	std	Y+23, r26	; 0x17
    2ff2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	2b ea       	ldi	r18, 0xAB	; 171
    2ffe:	3a ea       	ldi	r19, 0xAA	; 170
    3000:	4a e2       	ldi	r20, 0x2A	; 42
    3002:	50 e4       	ldi	r21, 0x40	; 64
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	89 8b       	std	Y+17, r24	; 0x11
    300e:	9a 8b       	std	Y+18, r25	; 0x12
    3010:	ab 8b       	std	Y+19, r26	; 0x13
    3012:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3014:	69 89       	ldd	r22, Y+17	; 0x11
    3016:	7a 89       	ldd	r23, Y+18	; 0x12
    3018:	8b 89       	ldd	r24, Y+19	; 0x13
    301a:	9c 89       	ldd	r25, Y+20	; 0x14
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3028:	88 23       	and	r24, r24
    302a:	1c f4       	brge	.+6      	; 0x3032 <FunctionSet4Bit+0x14c>
		__ticks = 1;
    302c:	81 e0       	ldi	r24, 0x01	; 1
    302e:	88 8b       	std	Y+16, r24	; 0x10
    3030:	91 c0       	rjmp	.+290    	; 0x3154 <FunctionSet4Bit+0x26e>
	else if (__tmp > 255)
    3032:	69 89       	ldd	r22, Y+17	; 0x11
    3034:	7a 89       	ldd	r23, Y+18	; 0x12
    3036:	8b 89       	ldd	r24, Y+19	; 0x13
    3038:	9c 89       	ldd	r25, Y+20	; 0x14
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	53 e4       	ldi	r21, 0x43	; 67
    3042:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3046:	18 16       	cp	r1, r24
    3048:	0c f0       	brlt	.+2      	; 0x304c <FunctionSet4Bit+0x166>
    304a:	7b c0       	rjmp	.+246    	; 0x3142 <FunctionSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    304c:	6d 89       	ldd	r22, Y+21	; 0x15
    304e:	7e 89       	ldd	r23, Y+22	; 0x16
    3050:	8f 89       	ldd	r24, Y+23	; 0x17
    3052:	98 8d       	ldd	r25, Y+24	; 0x18
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a e7       	ldi	r20, 0x7A	; 122
    305a:	54 e4       	ldi	r21, 0x44	; 68
    305c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	8c 87       	std	Y+12, r24	; 0x0c
    3066:	9d 87       	std	Y+13, r25	; 0x0d
    3068:	ae 87       	std	Y+14, r26	; 0x0e
    306a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306c:	6c 85       	ldd	r22, Y+12	; 0x0c
    306e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3070:	8e 85       	ldd	r24, Y+14	; 0x0e
    3072:	9f 85       	ldd	r25, Y+15	; 0x0f
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	4a ef       	ldi	r20, 0xFA	; 250
    307a:	54 e4       	ldi	r21, 0x44	; 68
    307c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	88 87       	std	Y+8, r24	; 0x08
    3086:	99 87       	std	Y+9, r25	; 0x09
    3088:	aa 87       	std	Y+10, r26	; 0x0a
    308a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    308c:	68 85       	ldd	r22, Y+8	; 0x08
    308e:	79 85       	ldd	r23, Y+9	; 0x09
    3090:	8a 85       	ldd	r24, Y+10	; 0x0a
    3092:	9b 85       	ldd	r25, Y+11	; 0x0b
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	40 e8       	ldi	r20, 0x80	; 128
    309a:	5f e3       	ldi	r21, 0x3F	; 63
    309c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a0:	88 23       	and	r24, r24
    30a2:	2c f4       	brge	.+10     	; 0x30ae <FunctionSet4Bit+0x1c8>
		__ticks = 1;
    30a4:	81 e0       	ldi	r24, 0x01	; 1
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9f 83       	std	Y+7, r25	; 0x07
    30aa:	8e 83       	std	Y+6, r24	; 0x06
    30ac:	3f c0       	rjmp	.+126    	; 0x312c <FunctionSet4Bit+0x246>
	else if (__tmp > 65535)
    30ae:	68 85       	ldd	r22, Y+8	; 0x08
    30b0:	79 85       	ldd	r23, Y+9	; 0x09
    30b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    30b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	3f ef       	ldi	r19, 0xFF	; 255
    30ba:	4f e7       	ldi	r20, 0x7F	; 127
    30bc:	57 e4       	ldi	r21, 0x47	; 71
    30be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c2:	18 16       	cp	r1, r24
    30c4:	4c f5       	brge	.+82     	; 0x3118 <FunctionSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    30c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    30ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    30cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9f 83       	std	Y+7, r25	; 0x07
    30ec:	8e 83       	std	Y+6, r24	; 0x06
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <FunctionSet4Bit+0x228>
    30f0:	88 ec       	ldi	r24, 0xC8	; 200
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9d 83       	std	Y+5, r25	; 0x05
    30f6:	8c 83       	std	Y+4, r24	; 0x04
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <FunctionSet4Bit+0x216>
    3100:	9d 83       	std	Y+5, r25	; 0x05
    3102:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3104:	8e 81       	ldd	r24, Y+6	; 0x06
    3106:	9f 81       	ldd	r25, Y+7	; 0x07
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	9f 83       	std	Y+7, r25	; 0x07
    310c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	8e 81       	ldd	r24, Y+6	; 0x06
    3110:	9f 81       	ldd	r25, Y+7	; 0x07
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	69 f7       	brne	.-38     	; 0x30f0 <FunctionSet4Bit+0x20a>
    3116:	24 c0       	rjmp	.+72     	; 0x3160 <FunctionSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3118:	68 85       	ldd	r22, Y+8	; 0x08
    311a:	79 85       	ldd	r23, Y+9	; 0x09
    311c:	8a 85       	ldd	r24, Y+10	; 0x0a
    311e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9f 83       	std	Y+7, r25	; 0x07
    312a:	8e 83       	std	Y+6, r24	; 0x06
    312c:	8e 81       	ldd	r24, Y+6	; 0x06
    312e:	9f 81       	ldd	r25, Y+7	; 0x07
    3130:	9b 83       	std	Y+3, r25	; 0x03
    3132:	8a 83       	std	Y+2, r24	; 0x02
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <FunctionSet4Bit+0x252>
    313c:	9b 83       	std	Y+3, r25	; 0x03
    313e:	8a 83       	std	Y+2, r24	; 0x02
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <FunctionSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3142:	69 89       	ldd	r22, Y+17	; 0x11
    3144:	7a 89       	ldd	r23, Y+18	; 0x12
    3146:	8b 89       	ldd	r24, Y+19	; 0x13
    3148:	9c 89       	ldd	r25, Y+20	; 0x14
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	88 8b       	std	Y+16, r24	; 0x10
    3154:	88 89       	ldd	r24, Y+16	; 0x10
    3156:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	8a 95       	dec	r24
    315c:	f1 f7       	brne	.-4      	; 0x315a <FunctionSet4Bit+0x274>
    315e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x28);
    3160:	88 e2       	ldi	r24, 0x28	; 40
    3162:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
}
    3166:	a6 96       	adiw	r28, 0x26	; 38
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <DisplayOnOffControl4Bit>:
static void DisplayOnOffControl4Bit(void){
    3178:	df 93       	push	r29
    317a:	cf 93       	push	r28
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    3180:	e0 97       	sbiw	r28, 0x30	; 48
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	a8 e4       	ldi	r26, 0x48	; 72
    3192:	b2 e4       	ldi	r27, 0x42	; 66
    3194:	8d a7       	std	Y+45, r24	; 0x2d
    3196:	9e a7       	std	Y+46, r25	; 0x2e
    3198:	af a7       	std	Y+47, r26	; 0x2f
    319a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    319c:	6d a5       	ldd	r22, Y+45	; 0x2d
    319e:	7e a5       	ldd	r23, Y+46	; 0x2e
    31a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31a2:	98 a9       	ldd	r25, Y+48	; 0x30
    31a4:	2b ea       	ldi	r18, 0xAB	; 171
    31a6:	3a ea       	ldi	r19, 0xAA	; 170
    31a8:	4a e2       	ldi	r20, 0x2A	; 42
    31aa:	50 e4       	ldi	r21, 0x40	; 64
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	89 a7       	std	Y+41, r24	; 0x29
    31b6:	9a a7       	std	Y+42, r25	; 0x2a
    31b8:	ab a7       	std	Y+43, r26	; 0x2b
    31ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    31bc:	69 a5       	ldd	r22, Y+41	; 0x29
    31be:	7a a5       	ldd	r23, Y+42	; 0x2a
    31c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    31c4:	20 e0       	ldi	r18, 0x00	; 0
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	40 e8       	ldi	r20, 0x80	; 128
    31ca:	5f e3       	ldi	r21, 0x3F	; 63
    31cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31d0:	88 23       	and	r24, r24
    31d2:	1c f4       	brge	.+6      	; 0x31da <DisplayOnOffControl4Bit+0x62>
		__ticks = 1;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	88 a7       	std	Y+40, r24	; 0x28
    31d8:	91 c0       	rjmp	.+290    	; 0x32fc <DisplayOnOffControl4Bit+0x184>
	else if (__tmp > 255)
    31da:	69 a5       	ldd	r22, Y+41	; 0x29
    31dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    31de:	8b a5       	ldd	r24, Y+43	; 0x2b
    31e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	53 e4       	ldi	r21, 0x43	; 67
    31ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	0c f0       	brlt	.+2      	; 0x31f4 <DisplayOnOffControl4Bit+0x7c>
    31f2:	7b c0       	rjmp	.+246    	; 0x32ea <DisplayOnOffControl4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    31f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    31f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    31f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31fa:	98 a9       	ldd	r25, Y+48	; 0x30
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	4a e7       	ldi	r20, 0x7A	; 122
    3202:	54 e4       	ldi	r21, 0x44	; 68
    3204:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8c a3       	std	Y+36, r24	; 0x24
    320e:	9d a3       	std	Y+37, r25	; 0x25
    3210:	ae a3       	std	Y+38, r26	; 0x26
    3212:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3214:	6c a1       	ldd	r22, Y+36	; 0x24
    3216:	7d a1       	ldd	r23, Y+37	; 0x25
    3218:	8e a1       	ldd	r24, Y+38	; 0x26
    321a:	9f a1       	ldd	r25, Y+39	; 0x27
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	4a ef       	ldi	r20, 0xFA	; 250
    3222:	54 e4       	ldi	r21, 0x44	; 68
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	88 a3       	std	Y+32, r24	; 0x20
    322e:	99 a3       	std	Y+33, r25	; 0x21
    3230:	aa a3       	std	Y+34, r26	; 0x22
    3232:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3234:	68 a1       	ldd	r22, Y+32	; 0x20
    3236:	79 a1       	ldd	r23, Y+33	; 0x21
    3238:	8a a1       	ldd	r24, Y+34	; 0x22
    323a:	9b a1       	ldd	r25, Y+35	; 0x23
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e8       	ldi	r20, 0x80	; 128
    3242:	5f e3       	ldi	r21, 0x3F	; 63
    3244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3248:	88 23       	and	r24, r24
    324a:	2c f4       	brge	.+10     	; 0x3256 <DisplayOnOffControl4Bit+0xde>
		__ticks = 1;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9f 8f       	std	Y+31, r25	; 0x1f
    3252:	8e 8f       	std	Y+30, r24	; 0x1e
    3254:	3f c0       	rjmp	.+126    	; 0x32d4 <DisplayOnOffControl4Bit+0x15c>
	else if (__tmp > 65535)
    3256:	68 a1       	ldd	r22, Y+32	; 0x20
    3258:	79 a1       	ldd	r23, Y+33	; 0x21
    325a:	8a a1       	ldd	r24, Y+34	; 0x22
    325c:	9b a1       	ldd	r25, Y+35	; 0x23
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	3f ef       	ldi	r19, 0xFF	; 255
    3262:	4f e7       	ldi	r20, 0x7F	; 127
    3264:	57 e4       	ldi	r21, 0x47	; 71
    3266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326a:	18 16       	cp	r1, r24
    326c:	4c f5       	brge	.+82     	; 0x32c0 <DisplayOnOffControl4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326e:	6c a1       	ldd	r22, Y+36	; 0x24
    3270:	7d a1       	ldd	r23, Y+37	; 0x25
    3272:	8e a1       	ldd	r24, Y+38	; 0x26
    3274:	9f a1       	ldd	r25, Y+39	; 0x27
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	40 e2       	ldi	r20, 0x20	; 32
    327c:	51 e4       	ldi	r21, 0x41	; 65
    327e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	bc 01       	movw	r22, r24
    3288:	cd 01       	movw	r24, r26
    328a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9f 8f       	std	Y+31, r25	; 0x1f
    3294:	8e 8f       	std	Y+30, r24	; 0x1e
    3296:	0f c0       	rjmp	.+30     	; 0x32b6 <DisplayOnOffControl4Bit+0x13e>
    3298:	88 ec       	ldi	r24, 0xC8	; 200
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9d 8f       	std	Y+29, r25	; 0x1d
    329e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    32a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	f1 f7       	brne	.-4      	; 0x32a4 <DisplayOnOffControl4Bit+0x12c>
    32a8:	9d 8f       	std	Y+29, r25	; 0x1d
    32aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	9f 8f       	std	Y+31, r25	; 0x1f
    32b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	69 f7       	brne	.-38     	; 0x3298 <DisplayOnOffControl4Bit+0x120>
    32be:	24 c0       	rjmp	.+72     	; 0x3308 <DisplayOnOffControl4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c0:	68 a1       	ldd	r22, Y+32	; 0x20
    32c2:	79 a1       	ldd	r23, Y+33	; 0x21
    32c4:	8a a1       	ldd	r24, Y+34	; 0x22
    32c6:	9b a1       	ldd	r25, Y+35	; 0x23
    32c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32cc:	dc 01       	movw	r26, r24
    32ce:	cb 01       	movw	r24, r22
    32d0:	9f 8f       	std	Y+31, r25	; 0x1f
    32d2:	8e 8f       	std	Y+30, r24	; 0x1e
    32d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    32d8:	9b 8f       	std	Y+27, r25	; 0x1b
    32da:	8a 8f       	std	Y+26, r24	; 0x1a
    32dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	f1 f7       	brne	.-4      	; 0x32e0 <DisplayOnOffControl4Bit+0x168>
    32e4:	9b 8f       	std	Y+27, r25	; 0x1b
    32e6:	8a 8f       	std	Y+26, r24	; 0x1a
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <DisplayOnOffControl4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    32ea:	69 a5       	ldd	r22, Y+41	; 0x29
    32ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    32ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	88 a7       	std	Y+40, r24	; 0x28
    32fc:	88 a5       	ldd	r24, Y+40	; 0x28
    32fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3300:	89 8d       	ldd	r24, Y+25	; 0x19
    3302:	8a 95       	dec	r24
    3304:	f1 f7       	brne	.-4      	; 0x3302 <DisplayOnOffControl4Bit+0x18a>
    3306:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	a0 e2       	ldi	r26, 0x20	; 32
    3314:	b1 e4       	ldi	r27, 0x41	; 65
    3316:	8d 8b       	std	Y+21, r24	; 0x15
    3318:	9e 8b       	std	Y+22, r25	; 0x16
    331a:	af 8b       	std	Y+23, r26	; 0x17
    331c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    331e:	6d 89       	ldd	r22, Y+21	; 0x15
    3320:	7e 89       	ldd	r23, Y+22	; 0x16
    3322:	8f 89       	ldd	r24, Y+23	; 0x17
    3324:	98 8d       	ldd	r25, Y+24	; 0x18
    3326:	2b ea       	ldi	r18, 0xAB	; 171
    3328:	3a ea       	ldi	r19, 0xAA	; 170
    332a:	4a e2       	ldi	r20, 0x2A	; 42
    332c:	50 e4       	ldi	r21, 0x40	; 64
    332e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3332:	dc 01       	movw	r26, r24
    3334:	cb 01       	movw	r24, r22
    3336:	89 8b       	std	Y+17, r24	; 0x11
    3338:	9a 8b       	std	Y+18, r25	; 0x12
    333a:	ab 8b       	std	Y+19, r26	; 0x13
    333c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    333e:	69 89       	ldd	r22, Y+17	; 0x11
    3340:	7a 89       	ldd	r23, Y+18	; 0x12
    3342:	8b 89       	ldd	r24, Y+19	; 0x13
    3344:	9c 89       	ldd	r25, Y+20	; 0x14
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	40 e8       	ldi	r20, 0x80	; 128
    334c:	5f e3       	ldi	r21, 0x3F	; 63
    334e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3352:	88 23       	and	r24, r24
    3354:	1c f4       	brge	.+6      	; 0x335c <DisplayOnOffControl4Bit+0x1e4>
		__ticks = 1;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	88 8b       	std	Y+16, r24	; 0x10
    335a:	91 c0       	rjmp	.+290    	; 0x347e <DisplayOnOffControl4Bit+0x306>
	else if (__tmp > 255)
    335c:	69 89       	ldd	r22, Y+17	; 0x11
    335e:	7a 89       	ldd	r23, Y+18	; 0x12
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4f e7       	ldi	r20, 0x7F	; 127
    336a:	53 e4       	ldi	r21, 0x43	; 67
    336c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3370:	18 16       	cp	r1, r24
    3372:	0c f0       	brlt	.+2      	; 0x3376 <DisplayOnOffControl4Bit+0x1fe>
    3374:	7b c0       	rjmp	.+246    	; 0x346c <DisplayOnOffControl4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    3376:	6d 89       	ldd	r22, Y+21	; 0x15
    3378:	7e 89       	ldd	r23, Y+22	; 0x16
    337a:	8f 89       	ldd	r24, Y+23	; 0x17
    337c:	98 8d       	ldd	r25, Y+24	; 0x18
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	4a e7       	ldi	r20, 0x7A	; 122
    3384:	54 e4       	ldi	r21, 0x44	; 68
    3386:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    338a:	dc 01       	movw	r26, r24
    338c:	cb 01       	movw	r24, r22
    338e:	8c 87       	std	Y+12, r24	; 0x0c
    3390:	9d 87       	std	Y+13, r25	; 0x0d
    3392:	ae 87       	std	Y+14, r26	; 0x0e
    3394:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3396:	6c 85       	ldd	r22, Y+12	; 0x0c
    3398:	7d 85       	ldd	r23, Y+13	; 0x0d
    339a:	8e 85       	ldd	r24, Y+14	; 0x0e
    339c:	9f 85       	ldd	r25, Y+15	; 0x0f
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	4a ef       	ldi	r20, 0xFA	; 250
    33a4:	54 e4       	ldi	r21, 0x44	; 68
    33a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	88 87       	std	Y+8, r24	; 0x08
    33b0:	99 87       	std	Y+9, r25	; 0x09
    33b2:	aa 87       	std	Y+10, r26	; 0x0a
    33b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    33b6:	68 85       	ldd	r22, Y+8	; 0x08
    33b8:	79 85       	ldd	r23, Y+9	; 0x09
    33ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    33bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e8       	ldi	r20, 0x80	; 128
    33c4:	5f e3       	ldi	r21, 0x3F	; 63
    33c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ca:	88 23       	and	r24, r24
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <DisplayOnOffControl4Bit+0x260>
		__ticks = 1;
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	9f 83       	std	Y+7, r25	; 0x07
    33d4:	8e 83       	std	Y+6, r24	; 0x06
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <DisplayOnOffControl4Bit+0x2de>
	else if (__tmp > 65535)
    33d8:	68 85       	ldd	r22, Y+8	; 0x08
    33da:	79 85       	ldd	r23, Y+9	; 0x09
    33dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33de:	9b 85       	ldd	r25, Y+11	; 0x0b
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	3f ef       	ldi	r19, 0xFF	; 255
    33e4:	4f e7       	ldi	r20, 0x7F	; 127
    33e6:	57 e4       	ldi	r21, 0x47	; 71
    33e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33ec:	18 16       	cp	r1, r24
    33ee:	4c f5       	brge	.+82     	; 0x3442 <DisplayOnOffControl4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    33f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    33f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    33f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	bc 01       	movw	r22, r24
    340a:	cd 01       	movw	r24, r26
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	9f 83       	std	Y+7, r25	; 0x07
    3416:	8e 83       	std	Y+6, r24	; 0x06
    3418:	0f c0       	rjmp	.+30     	; 0x3438 <DisplayOnOffControl4Bit+0x2c0>
    341a:	88 ec       	ldi	r24, 0xC8	; 200
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	9d 83       	std	Y+5, r25	; 0x05
    3420:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3422:	8c 81       	ldd	r24, Y+4	; 0x04
    3424:	9d 81       	ldd	r25, Y+5	; 0x05
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	f1 f7       	brne	.-4      	; 0x3426 <DisplayOnOffControl4Bit+0x2ae>
    342a:	9d 83       	std	Y+5, r25	; 0x05
    342c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342e:	8e 81       	ldd	r24, Y+6	; 0x06
    3430:	9f 81       	ldd	r25, Y+7	; 0x07
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	9f 83       	std	Y+7, r25	; 0x07
    3436:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3438:	8e 81       	ldd	r24, Y+6	; 0x06
    343a:	9f 81       	ldd	r25, Y+7	; 0x07
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	69 f7       	brne	.-38     	; 0x341a <DisplayOnOffControl4Bit+0x2a2>
    3440:	24 c0       	rjmp	.+72     	; 0x348a <DisplayOnOffControl4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3442:	68 85       	ldd	r22, Y+8	; 0x08
    3444:	79 85       	ldd	r23, Y+9	; 0x09
    3446:	8a 85       	ldd	r24, Y+10	; 0x0a
    3448:	9b 85       	ldd	r25, Y+11	; 0x0b
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9f 83       	std	Y+7, r25	; 0x07
    3454:	8e 83       	std	Y+6, r24	; 0x06
    3456:	8e 81       	ldd	r24, Y+6	; 0x06
    3458:	9f 81       	ldd	r25, Y+7	; 0x07
    345a:	9b 83       	std	Y+3, r25	; 0x03
    345c:	8a 83       	std	Y+2, r24	; 0x02
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	f1 f7       	brne	.-4      	; 0x3462 <DisplayOnOffControl4Bit+0x2ea>
    3466:	9b 83       	std	Y+3, r25	; 0x03
    3468:	8a 83       	std	Y+2, r24	; 0x02
    346a:	0f c0       	rjmp	.+30     	; 0x348a <DisplayOnOffControl4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    346c:	69 89       	ldd	r22, Y+17	; 0x11
    346e:	7a 89       	ldd	r23, Y+18	; 0x12
    3470:	8b 89       	ldd	r24, Y+19	; 0x13
    3472:	9c 89       	ldd	r25, Y+20	; 0x14
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	88 8b       	std	Y+16, r24	; 0x10
    347e:	88 89       	ldd	r24, Y+16	; 0x10
    3480:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	8a 95       	dec	r24
    3486:	f1 f7       	brne	.-4      	; 0x3484 <DisplayOnOffControl4Bit+0x30c>
    3488:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0xC);
    348a:	8c e0       	ldi	r24, 0x0C	; 12
    348c:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
}
    3490:	e0 96       	adiw	r28, 0x30	; 48
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <DisplayClear4Bit>:
static void DisplayClear4Bit(void){
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	e0 97       	sbiw	r28, 0x30	; 48
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a8 e4       	ldi	r26, 0x48	; 72
    34bc:	b2 e4       	ldi	r27, 0x42	; 66
    34be:	8d a7       	std	Y+45, r24	; 0x2d
    34c0:	9e a7       	std	Y+46, r25	; 0x2e
    34c2:	af a7       	std	Y+47, r26	; 0x2f
    34c4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    34c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    34ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    34cc:	98 a9       	ldd	r25, Y+48	; 0x30
    34ce:	2b ea       	ldi	r18, 0xAB	; 171
    34d0:	3a ea       	ldi	r19, 0xAA	; 170
    34d2:	4a e2       	ldi	r20, 0x2A	; 42
    34d4:	50 e4       	ldi	r21, 0x40	; 64
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	89 a7       	std	Y+41, r24	; 0x29
    34e0:	9a a7       	std	Y+42, r25	; 0x2a
    34e2:	ab a7       	std	Y+43, r26	; 0x2b
    34e4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    34e6:	69 a5       	ldd	r22, Y+41	; 0x29
    34e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    34ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    34ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e8       	ldi	r20, 0x80	; 128
    34f4:	5f e3       	ldi	r21, 0x3F	; 63
    34f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	1c f4       	brge	.+6      	; 0x3504 <DisplayClear4Bit+0x62>
		__ticks = 1;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	88 a7       	std	Y+40, r24	; 0x28
    3502:	91 c0       	rjmp	.+290    	; 0x3626 <DisplayClear4Bit+0x184>
	else if (__tmp > 255)
    3504:	69 a5       	ldd	r22, Y+41	; 0x29
    3506:	7a a5       	ldd	r23, Y+42	; 0x2a
    3508:	8b a5       	ldd	r24, Y+43	; 0x2b
    350a:	9c a5       	ldd	r25, Y+44	; 0x2c
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	53 e4       	ldi	r21, 0x43	; 67
    3514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	0c f0       	brlt	.+2      	; 0x351e <DisplayClear4Bit+0x7c>
    351c:	7b c0       	rjmp	.+246    	; 0x3614 <DisplayClear4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    351e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3520:	7e a5       	ldd	r23, Y+46	; 0x2e
    3522:	8f a5       	ldd	r24, Y+47	; 0x2f
    3524:	98 a9       	ldd	r25, Y+48	; 0x30
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	4a e7       	ldi	r20, 0x7A	; 122
    352c:	54 e4       	ldi	r21, 0x44	; 68
    352e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	8c a3       	std	Y+36, r24	; 0x24
    3538:	9d a3       	std	Y+37, r25	; 0x25
    353a:	ae a3       	std	Y+38, r26	; 0x26
    353c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6c a1       	ldd	r22, Y+36	; 0x24
    3540:	7d a1       	ldd	r23, Y+37	; 0x25
    3542:	8e a1       	ldd	r24, Y+38	; 0x26
    3544:	9f a1       	ldd	r25, Y+39	; 0x27
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	88 a3       	std	Y+32, r24	; 0x20
    3558:	99 a3       	std	Y+33, r25	; 0x21
    355a:	aa a3       	std	Y+34, r26	; 0x22
    355c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    355e:	68 a1       	ldd	r22, Y+32	; 0x20
    3560:	79 a1       	ldd	r23, Y+33	; 0x21
    3562:	8a a1       	ldd	r24, Y+34	; 0x22
    3564:	9b a1       	ldd	r25, Y+35	; 0x23
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <DisplayClear4Bit+0xde>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9f 8f       	std	Y+31, r25	; 0x1f
    357c:	8e 8f       	std	Y+30, r24	; 0x1e
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <DisplayClear4Bit+0x15c>
	else if (__tmp > 65535)
    3580:	68 a1       	ldd	r22, Y+32	; 0x20
    3582:	79 a1       	ldd	r23, Y+33	; 0x21
    3584:	8a a1       	ldd	r24, Y+34	; 0x22
    3586:	9b a1       	ldd	r25, Y+35	; 0x23
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <DisplayClear4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6c a1       	ldd	r22, Y+36	; 0x24
    359a:	7d a1       	ldd	r23, Y+37	; 0x25
    359c:	8e a1       	ldd	r24, Y+38	; 0x26
    359e:	9f a1       	ldd	r25, Y+39	; 0x27
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9f 8f       	std	Y+31, r25	; 0x1f
    35be:	8e 8f       	std	Y+30, r24	; 0x1e
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <DisplayClear4Bit+0x13e>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9d 8f       	std	Y+29, r25	; 0x1d
    35c8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <DisplayClear4Bit+0x12c>
    35d2:	9d 8f       	std	Y+29, r25	; 0x1d
    35d4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9f 8f       	std	Y+31, r25	; 0x1f
    35de:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <DisplayClear4Bit+0x120>
    35e8:	24 c0       	rjmp	.+72     	; 0x3632 <DisplayClear4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	68 a1       	ldd	r22, Y+32	; 0x20
    35ec:	79 a1       	ldd	r23, Y+33	; 0x21
    35ee:	8a a1       	ldd	r24, Y+34	; 0x22
    35f0:	9b a1       	ldd	r25, Y+35	; 0x23
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9f 8f       	std	Y+31, r25	; 0x1f
    35fc:	8e 8f       	std	Y+30, r24	; 0x1e
    35fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3600:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3602:	9b 8f       	std	Y+27, r25	; 0x1b
    3604:	8a 8f       	std	Y+26, r24	; 0x1a
    3606:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3608:	9b 8d       	ldd	r25, Y+27	; 0x1b
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <DisplayClear4Bit+0x168>
    360e:	9b 8f       	std	Y+27, r25	; 0x1b
    3610:	8a 8f       	std	Y+26, r24	; 0x1a
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <DisplayClear4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3614:	69 a5       	ldd	r22, Y+41	; 0x29
    3616:	7a a5       	ldd	r23, Y+42	; 0x2a
    3618:	8b a5       	ldd	r24, Y+43	; 0x2b
    361a:	9c a5       	ldd	r25, Y+44	; 0x2c
    361c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	88 a7       	std	Y+40, r24	; 0x28
    3626:	88 a5       	ldd	r24, Y+40	; 0x28
    3628:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    362a:	89 8d       	ldd	r24, Y+25	; 0x19
    362c:	8a 95       	dec	r24
    362e:	f1 f7       	brne	.-4      	; 0x362c <DisplayClear4Bit+0x18a>
    3630:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	a0 e2       	ldi	r26, 0x20	; 32
    363e:	b1 e4       	ldi	r27, 0x41	; 65
    3640:	8d 8b       	std	Y+21, r24	; 0x15
    3642:	9e 8b       	std	Y+22, r25	; 0x16
    3644:	af 8b       	std	Y+23, r26	; 0x17
    3646:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3648:	6d 89       	ldd	r22, Y+21	; 0x15
    364a:	7e 89       	ldd	r23, Y+22	; 0x16
    364c:	8f 89       	ldd	r24, Y+23	; 0x17
    364e:	98 8d       	ldd	r25, Y+24	; 0x18
    3650:	2b ea       	ldi	r18, 0xAB	; 171
    3652:	3a ea       	ldi	r19, 0xAA	; 170
    3654:	4a e2       	ldi	r20, 0x2A	; 42
    3656:	50 e4       	ldi	r21, 0x40	; 64
    3658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365c:	dc 01       	movw	r26, r24
    365e:	cb 01       	movw	r24, r22
    3660:	89 8b       	std	Y+17, r24	; 0x11
    3662:	9a 8b       	std	Y+18, r25	; 0x12
    3664:	ab 8b       	std	Y+19, r26	; 0x13
    3666:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3668:	69 89       	ldd	r22, Y+17	; 0x11
    366a:	7a 89       	ldd	r23, Y+18	; 0x12
    366c:	8b 89       	ldd	r24, Y+19	; 0x13
    366e:	9c 89       	ldd	r25, Y+20	; 0x14
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e8       	ldi	r20, 0x80	; 128
    3676:	5f e3       	ldi	r21, 0x3F	; 63
    3678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    367c:	88 23       	and	r24, r24
    367e:	1c f4       	brge	.+6      	; 0x3686 <DisplayClear4Bit+0x1e4>
		__ticks = 1;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	88 8b       	std	Y+16, r24	; 0x10
    3684:	91 c0       	rjmp	.+290    	; 0x37a8 <DisplayClear4Bit+0x306>
	else if (__tmp > 255)
    3686:	69 89       	ldd	r22, Y+17	; 0x11
    3688:	7a 89       	ldd	r23, Y+18	; 0x12
    368a:	8b 89       	ldd	r24, Y+19	; 0x13
    368c:	9c 89       	ldd	r25, Y+20	; 0x14
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	4f e7       	ldi	r20, 0x7F	; 127
    3694:	53 e4       	ldi	r21, 0x43	; 67
    3696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    369a:	18 16       	cp	r1, r24
    369c:	0c f0       	brlt	.+2      	; 0x36a0 <DisplayClear4Bit+0x1fe>
    369e:	7b c0       	rjmp	.+246    	; 0x3796 <DisplayClear4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    36a0:	6d 89       	ldd	r22, Y+21	; 0x15
    36a2:	7e 89       	ldd	r23, Y+22	; 0x16
    36a4:	8f 89       	ldd	r24, Y+23	; 0x17
    36a6:	98 8d       	ldd	r25, Y+24	; 0x18
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	4a e7       	ldi	r20, 0x7A	; 122
    36ae:	54 e4       	ldi	r21, 0x44	; 68
    36b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	8c 87       	std	Y+12, r24	; 0x0c
    36ba:	9d 87       	std	Y+13, r25	; 0x0d
    36bc:	ae 87       	std	Y+14, r26	; 0x0e
    36be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    36c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    36c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a ef       	ldi	r20, 0xFA	; 250
    36ce:	54 e4       	ldi	r21, 0x44	; 68
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	88 87       	std	Y+8, r24	; 0x08
    36da:	99 87       	std	Y+9, r25	; 0x09
    36dc:	aa 87       	std	Y+10, r26	; 0x0a
    36de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    36e0:	68 85       	ldd	r22, Y+8	; 0x08
    36e2:	79 85       	ldd	r23, Y+9	; 0x09
    36e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    36e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e8       	ldi	r20, 0x80	; 128
    36ee:	5f e3       	ldi	r21, 0x3F	; 63
    36f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f4:	88 23       	and	r24, r24
    36f6:	2c f4       	brge	.+10     	; 0x3702 <DisplayClear4Bit+0x260>
		__ticks = 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9f 83       	std	Y+7, r25	; 0x07
    36fe:	8e 83       	std	Y+6, r24	; 0x06
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <DisplayClear4Bit+0x2de>
	else if (__tmp > 65535)
    3702:	68 85       	ldd	r22, Y+8	; 0x08
    3704:	79 85       	ldd	r23, Y+9	; 0x09
    3706:	8a 85       	ldd	r24, Y+10	; 0x0a
    3708:	9b 85       	ldd	r25, Y+11	; 0x0b
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	4c f5       	brge	.+82     	; 0x376c <DisplayClear4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371a:	6c 85       	ldd	r22, Y+12	; 0x0c
    371c:	7d 85       	ldd	r23, Y+13	; 0x0d
    371e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3720:	9f 85       	ldd	r25, Y+15	; 0x0f
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9f 83       	std	Y+7, r25	; 0x07
    3740:	8e 83       	std	Y+6, r24	; 0x06
    3742:	0f c0       	rjmp	.+30     	; 0x3762 <DisplayClear4Bit+0x2c0>
    3744:	88 ec       	ldi	r24, 0xC8	; 200
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	9d 83       	std	Y+5, r25	; 0x05
    374a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    374c:	8c 81       	ldd	r24, Y+4	; 0x04
    374e:	9d 81       	ldd	r25, Y+5	; 0x05
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <DisplayClear4Bit+0x2ae>
    3754:	9d 83       	std	Y+5, r25	; 0x05
    3756:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3758:	8e 81       	ldd	r24, Y+6	; 0x06
    375a:	9f 81       	ldd	r25, Y+7	; 0x07
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	9f 83       	std	Y+7, r25	; 0x07
    3760:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	8e 81       	ldd	r24, Y+6	; 0x06
    3764:	9f 81       	ldd	r25, Y+7	; 0x07
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	69 f7       	brne	.-38     	; 0x3744 <DisplayClear4Bit+0x2a2>
    376a:	24 c0       	rjmp	.+72     	; 0x37b4 <DisplayClear4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376c:	68 85       	ldd	r22, Y+8	; 0x08
    376e:	79 85       	ldd	r23, Y+9	; 0x09
    3770:	8a 85       	ldd	r24, Y+10	; 0x0a
    3772:	9b 85       	ldd	r25, Y+11	; 0x0b
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9f 83       	std	Y+7, r25	; 0x07
    377e:	8e 83       	std	Y+6, r24	; 0x06
    3780:	8e 81       	ldd	r24, Y+6	; 0x06
    3782:	9f 81       	ldd	r25, Y+7	; 0x07
    3784:	9b 83       	std	Y+3, r25	; 0x03
    3786:	8a 83       	std	Y+2, r24	; 0x02
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <DisplayClear4Bit+0x2ea>
    3790:	9b 83       	std	Y+3, r25	; 0x03
    3792:	8a 83       	std	Y+2, r24	; 0x02
    3794:	0f c0       	rjmp	.+30     	; 0x37b4 <DisplayClear4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3796:	69 89       	ldd	r22, Y+17	; 0x11
    3798:	7a 89       	ldd	r23, Y+18	; 0x12
    379a:	8b 89       	ldd	r24, Y+19	; 0x13
    379c:	9c 89       	ldd	r25, Y+20	; 0x14
    379e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	88 8b       	std	Y+16, r24	; 0x10
    37a8:	88 89       	ldd	r24, Y+16	; 0x10
    37aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37ac:	89 81       	ldd	r24, Y+1	; 0x01
    37ae:	8a 95       	dec	r24
    37b0:	f1 f7       	brne	.-4      	; 0x37ae <DisplayClear4Bit+0x30c>
    37b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x1);
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
}
    37ba:	e0 96       	adiw	r28, 0x30	; 48
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <EntryModeSet4Bit>:
static void EntryModeSet4Bit(void){
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	cd b7       	in	r28, 0x3d	; 61
    37d2:	de b7       	in	r29, 0x3e	; 62
    37d4:	a6 97       	sbiw	r28, 0x26	; 38
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	f8 94       	cli
    37da:	de bf       	out	0x3e, r29	; 62
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	cd bf       	out	0x3d, r28	; 61
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	a0 e0       	ldi	r26, 0x00	; 0
    37e6:	b0 e4       	ldi	r27, 0x40	; 64
    37e8:	8b a3       	std	Y+35, r24	; 0x23
    37ea:	9c a3       	std	Y+36, r25	; 0x24
    37ec:	ad a3       	std	Y+37, r26	; 0x25
    37ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f0:	6b a1       	ldd	r22, Y+35	; 0x23
    37f2:	7c a1       	ldd	r23, Y+36	; 0x24
    37f4:	8d a1       	ldd	r24, Y+37	; 0x25
    37f6:	9e a1       	ldd	r25, Y+38	; 0x26
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	4a ef       	ldi	r20, 0xFA	; 250
    37fe:	54 e4       	ldi	r21, 0x44	; 68
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	8f 8f       	std	Y+31, r24	; 0x1f
    380a:	98 a3       	std	Y+32, r25	; 0x20
    380c:	a9 a3       	std	Y+33, r26	; 0x21
    380e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3810:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3812:	78 a1       	ldd	r23, Y+32	; 0x20
    3814:	89 a1       	ldd	r24, Y+33	; 0x21
    3816:	9a a1       	ldd	r25, Y+34	; 0x22
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	2c f4       	brge	.+10     	; 0x3832 <EntryModeSet4Bit+0x66>
		__ticks = 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9e 8f       	std	Y+30, r25	; 0x1e
    382e:	8d 8f       	std	Y+29, r24	; 0x1d
    3830:	3f c0       	rjmp	.+126    	; 0x38b0 <EntryModeSet4Bit+0xe4>
	else if (__tmp > 65535)
    3832:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3834:	78 a1       	ldd	r23, Y+32	; 0x20
    3836:	89 a1       	ldd	r24, Y+33	; 0x21
    3838:	9a a1       	ldd	r25, Y+34	; 0x22
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	3f ef       	ldi	r19, 0xFF	; 255
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	57 e4       	ldi	r21, 0x47	; 71
    3842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	4c f5       	brge	.+82     	; 0x389c <EntryModeSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384a:	6b a1       	ldd	r22, Y+35	; 0x23
    384c:	7c a1       	ldd	r23, Y+36	; 0x24
    384e:	8d a1       	ldd	r24, Y+37	; 0x25
    3850:	9e a1       	ldd	r25, Y+38	; 0x26
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e2       	ldi	r20, 0x20	; 32
    3858:	51 e4       	ldi	r21, 0x41	; 65
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	9e 8f       	std	Y+30, r25	; 0x1e
    3870:	8d 8f       	std	Y+29, r24	; 0x1d
    3872:	0f c0       	rjmp	.+30     	; 0x3892 <EntryModeSet4Bit+0xc6>
    3874:	88 ec       	ldi	r24, 0xC8	; 200
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	9c 8f       	std	Y+28, r25	; 0x1c
    387a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    387c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    387e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <EntryModeSet4Bit+0xb4>
    3884:	9c 8f       	std	Y+28, r25	; 0x1c
    3886:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3888:	8d 8d       	ldd	r24, Y+29	; 0x1d
    388a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	9e 8f       	std	Y+30, r25	; 0x1e
    3890:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3892:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3894:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	69 f7       	brne	.-38     	; 0x3874 <EntryModeSet4Bit+0xa8>
    389a:	14 c0       	rjmp	.+40     	; 0x38c4 <EntryModeSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    389e:	78 a1       	ldd	r23, Y+32	; 0x20
    38a0:	89 a1       	ldd	r24, Y+33	; 0x21
    38a2:	9a a1       	ldd	r25, Y+34	; 0x22
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9e 8f       	std	Y+30, r25	; 0x1e
    38ae:	8d 8f       	std	Y+29, r24	; 0x1d
    38b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b4:	9a 8f       	std	Y+26, r25	; 0x1a
    38b6:	89 8f       	std	Y+25, r24	; 0x19
    38b8:	89 8d       	ldd	r24, Y+25	; 0x19
    38ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	f1 f7       	brne	.-4      	; 0x38bc <EntryModeSet4Bit+0xf0>
    38c0:	9a 8f       	std	Y+26, r25	; 0x1a
    38c2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);
	LCD_WriteCommand4Bit(0x0);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	a0 e2       	ldi	r26, 0x20	; 32
    38d0:	b1 e4       	ldi	r27, 0x41	; 65
    38d2:	8d 8b       	std	Y+21, r24	; 0x15
    38d4:	9e 8b       	std	Y+22, r25	; 0x16
    38d6:	af 8b       	std	Y+23, r26	; 0x17
    38d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    38da:	6d 89       	ldd	r22, Y+21	; 0x15
    38dc:	7e 89       	ldd	r23, Y+22	; 0x16
    38de:	8f 89       	ldd	r24, Y+23	; 0x17
    38e0:	98 8d       	ldd	r25, Y+24	; 0x18
    38e2:	2b ea       	ldi	r18, 0xAB	; 171
    38e4:	3a ea       	ldi	r19, 0xAA	; 170
    38e6:	4a e2       	ldi	r20, 0x2A	; 42
    38e8:	50 e4       	ldi	r21, 0x40	; 64
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	89 8b       	std	Y+17, r24	; 0x11
    38f4:	9a 8b       	std	Y+18, r25	; 0x12
    38f6:	ab 8b       	std	Y+19, r26	; 0x13
    38f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    38fa:	69 89       	ldd	r22, Y+17	; 0x11
    38fc:	7a 89       	ldd	r23, Y+18	; 0x12
    38fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3900:	9c 89       	ldd	r25, Y+20	; 0x14
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    390e:	88 23       	and	r24, r24
    3910:	1c f4       	brge	.+6      	; 0x3918 <EntryModeSet4Bit+0x14c>
		__ticks = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	88 8b       	std	Y+16, r24	; 0x10
    3916:	91 c0       	rjmp	.+290    	; 0x3a3a <EntryModeSet4Bit+0x26e>
	else if (__tmp > 255)
    3918:	69 89       	ldd	r22, Y+17	; 0x11
    391a:	7a 89       	ldd	r23, Y+18	; 0x12
    391c:	8b 89       	ldd	r24, Y+19	; 0x13
    391e:	9c 89       	ldd	r25, Y+20	; 0x14
    3920:	20 e0       	ldi	r18, 0x00	; 0
    3922:	30 e0       	ldi	r19, 0x00	; 0
    3924:	4f e7       	ldi	r20, 0x7F	; 127
    3926:	53 e4       	ldi	r21, 0x43	; 67
    3928:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    392c:	18 16       	cp	r1, r24
    392e:	0c f0       	brlt	.+2      	; 0x3932 <EntryModeSet4Bit+0x166>
    3930:	7b c0       	rjmp	.+246    	; 0x3a28 <EntryModeSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    3932:	6d 89       	ldd	r22, Y+21	; 0x15
    3934:	7e 89       	ldd	r23, Y+22	; 0x16
    3936:	8f 89       	ldd	r24, Y+23	; 0x17
    3938:	98 8d       	ldd	r25, Y+24	; 0x18
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	4a e7       	ldi	r20, 0x7A	; 122
    3940:	54 e4       	ldi	r21, 0x44	; 68
    3942:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	8c 87       	std	Y+12, r24	; 0x0c
    394c:	9d 87       	std	Y+13, r25	; 0x0d
    394e:	ae 87       	std	Y+14, r26	; 0x0e
    3950:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3952:	6c 85       	ldd	r22, Y+12	; 0x0c
    3954:	7d 85       	ldd	r23, Y+13	; 0x0d
    3956:	8e 85       	ldd	r24, Y+14	; 0x0e
    3958:	9f 85       	ldd	r25, Y+15	; 0x0f
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	4a ef       	ldi	r20, 0xFA	; 250
    3960:	54 e4       	ldi	r21, 0x44	; 68
    3962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	88 87       	std	Y+8, r24	; 0x08
    396c:	99 87       	std	Y+9, r25	; 0x09
    396e:	aa 87       	std	Y+10, r26	; 0x0a
    3970:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3972:	68 85       	ldd	r22, Y+8	; 0x08
    3974:	79 85       	ldd	r23, Y+9	; 0x09
    3976:	8a 85       	ldd	r24, Y+10	; 0x0a
    3978:	9b 85       	ldd	r25, Y+11	; 0x0b
    397a:	20 e0       	ldi	r18, 0x00	; 0
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	40 e8       	ldi	r20, 0x80	; 128
    3980:	5f e3       	ldi	r21, 0x3F	; 63
    3982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3986:	88 23       	and	r24, r24
    3988:	2c f4       	brge	.+10     	; 0x3994 <EntryModeSet4Bit+0x1c8>
		__ticks = 1;
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	9f 83       	std	Y+7, r25	; 0x07
    3990:	8e 83       	std	Y+6, r24	; 0x06
    3992:	3f c0       	rjmp	.+126    	; 0x3a12 <EntryModeSet4Bit+0x246>
	else if (__tmp > 65535)
    3994:	68 85       	ldd	r22, Y+8	; 0x08
    3996:	79 85       	ldd	r23, Y+9	; 0x09
    3998:	8a 85       	ldd	r24, Y+10	; 0x0a
    399a:	9b 85       	ldd	r25, Y+11	; 0x0b
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	3f ef       	ldi	r19, 0xFF	; 255
    39a0:	4f e7       	ldi	r20, 0x7F	; 127
    39a2:	57 e4       	ldi	r21, 0x47	; 71
    39a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39a8:	18 16       	cp	r1, r24
    39aa:	4c f5       	brge	.+82     	; 0x39fe <EntryModeSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    39ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    39b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    39b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e2       	ldi	r20, 0x20	; 32
    39ba:	51 e4       	ldi	r21, 0x41	; 65
    39bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	bc 01       	movw	r22, r24
    39c6:	cd 01       	movw	r24, r26
    39c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	9f 83       	std	Y+7, r25	; 0x07
    39d2:	8e 83       	std	Y+6, r24	; 0x06
    39d4:	0f c0       	rjmp	.+30     	; 0x39f4 <EntryModeSet4Bit+0x228>
    39d6:	88 ec       	ldi	r24, 0xC8	; 200
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	9d 83       	std	Y+5, r25	; 0x05
    39dc:	8c 83       	std	Y+4, r24	; 0x04
    39de:	8c 81       	ldd	r24, Y+4	; 0x04
    39e0:	9d 81       	ldd	r25, Y+5	; 0x05
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <EntryModeSet4Bit+0x216>
    39e6:	9d 83       	std	Y+5, r25	; 0x05
    39e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ea:	8e 81       	ldd	r24, Y+6	; 0x06
    39ec:	9f 81       	ldd	r25, Y+7	; 0x07
    39ee:	01 97       	sbiw	r24, 0x01	; 1
    39f0:	9f 83       	std	Y+7, r25	; 0x07
    39f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f4:	8e 81       	ldd	r24, Y+6	; 0x06
    39f6:	9f 81       	ldd	r25, Y+7	; 0x07
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	69 f7       	brne	.-38     	; 0x39d6 <EntryModeSet4Bit+0x20a>
    39fc:	24 c0       	rjmp	.+72     	; 0x3a46 <EntryModeSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fe:	68 85       	ldd	r22, Y+8	; 0x08
    3a00:	79 85       	ldd	r23, Y+9	; 0x09
    3a02:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a04:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	9f 83       	std	Y+7, r25	; 0x07
    3a10:	8e 83       	std	Y+6, r24	; 0x06
    3a12:	8e 81       	ldd	r24, Y+6	; 0x06
    3a14:	9f 81       	ldd	r25, Y+7	; 0x07
    3a16:	9b 83       	std	Y+3, r25	; 0x03
    3a18:	8a 83       	std	Y+2, r24	; 0x02
    3a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1e:	01 97       	sbiw	r24, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <EntryModeSet4Bit+0x252>
    3a22:	9b 83       	std	Y+3, r25	; 0x03
    3a24:	8a 83       	std	Y+2, r24	; 0x02
    3a26:	0f c0       	rjmp	.+30     	; 0x3a46 <EntryModeSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a28:	69 89       	ldd	r22, Y+17	; 0x11
    3a2a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a34:	dc 01       	movw	r26, r24
    3a36:	cb 01       	movw	r24, r22
    3a38:	88 8b       	std	Y+16, r24	; 0x10
    3a3a:	88 89       	ldd	r24, Y+16	; 0x10
    3a3c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	8a 95       	dec	r24
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <EntryModeSet4Bit+0x274>
    3a44:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x6);
    3a46:	86 e0       	ldi	r24, 0x06	; 6
    3a48:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <LCD_WriteCommand4Bit>
}
    3a4c:	a6 96       	adiw	r28, 0x26	; 38
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	08 95       	ret

00003a5e <KPD_Init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t KPD_Init(void){
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	0f 92       	push	r0
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    3a68:	19 82       	std	Y+1, r1	; 0x01
	/*	Rows	OUTPUT HIGH	*/
	RowsInitialization();
    3a6a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <RowsInitialization>

	/*	Columns	 INPUT PULLUP	*/
	ColumnsInitialization();
    3a6e:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <ColumnsInitialization>
	Local_enuErrorstate = ES_OK;
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a78:	0f 90       	pop	r0
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <KPD_u8GetPressedKey>:

@retval KPD_NO_PRESSED_KEY if no key is pressed.

@retval the value of the pressed key.
*/
u8 KPD_u8GetPressedKey(void){
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <KPD_u8GetPressedKey+0x6>
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <KPD_u8GetPressedKey+0x8>
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    3a8c:	8f ef       	ldi	r24, 0xFF	; 255
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    3a90:	1a 82       	std	Y+2, r1	; 0x02
    3a92:	76 c0       	rjmp	.+236    	; 0x3b80 <KPD_u8GetPressedKey+0x100>

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);
    3a94:	8a 81       	ldd	r24, Y+2	; 0x02
    3a96:	88 2f       	mov	r24, r24
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	ea 5f       	subi	r30, 0xFA	; 250
    3a9e:	fe 4f       	sbci	r31, 0xFE	; 254
    3aa0:	90 81       	ld	r25, Z
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	69 2f       	mov	r22, r25
    3aa6:	40 e0       	ldi	r20, 0x00	; 0
    3aa8:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    3aac:	19 82       	std	Y+1, r1	; 0x01
    3aae:	55 c0       	rjmp	.+170    	; 0x3b5a <KPD_u8GetPressedKey+0xda>
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	88 2f       	mov	r24, r24
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	e6 5f       	subi	r30, 0xF6	; 246
    3aba:	fe 4f       	sbci	r31, 0xFE	; 254
    3abc:	90 81       	ld	r25, Z
    3abe:	80 e0       	ldi	r24, 0x00	; 0
    3ac0:	69 2f       	mov	r22, r25
    3ac2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	88 2f       	mov	r24, r24
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	fc 01       	movw	r30, r24
    3ace:	e6 5f       	subi	r30, 0xF6	; 246
    3ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad2:	90 81       	ld	r25, Z
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	69 2f       	mov	r22, r25
    3ad8:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_u8GetPinValue>
    3adc:	88 23       	and	r24, r24
    3ade:	d1 f5       	brne	.+116    	; 0x3b54 <KPD_u8GetPressedKey+0xd4>

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    3ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae2:	48 2f       	mov	r20, r24
    3ae4:	50 e0       	ldi	r21, 0x00	; 0
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	28 2f       	mov	r18, r24
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	ca 01       	movw	r24, r20
    3aee:	88 0f       	add	r24, r24
    3af0:	99 1f       	adc	r25, r25
    3af2:	88 0f       	add	r24, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	82 0f       	add	r24, r18
    3af8:	93 1f       	adc	r25, r19
    3afa:	fc 01       	movw	r30, r24
    3afc:	e2 5f       	subi	r30, 0xF2	; 242
    3afe:	fe 4f       	sbci	r31, 0xFE	; 254
    3b00:	80 81       	ld	r24, Z
    3b02:	8b 83       	std	Y+3, r24	; 0x03
    3b04:	0b c0       	rjmp	.+22     	; 0x3b1c <KPD_u8GetPressedKey+0x9c>

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	fc 01       	movw	r30, r24
    3b0e:	e6 5f       	subi	r30, 0xF6	; 246
    3b10:	fe 4f       	sbci	r31, 0xFE	; 254
    3b12:	90 81       	ld	r25, Z
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	69 2f       	mov	r22, r25
    3b18:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    3b1c:	89 81       	ldd	r24, Y+1	; 0x01
    3b1e:	88 2f       	mov	r24, r24
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	fc 01       	movw	r30, r24
    3b24:	e6 5f       	subi	r30, 0xF6	; 246
    3b26:	fe 4f       	sbci	r31, 0xFE	; 254
    3b28:	90 81       	ld	r25, Z
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	69 2f       	mov	r22, r25
    3b2e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <DIO_u8GetPinValue>
    3b32:	88 23       	and	r24, r24
    3b34:	41 f3       	breq	.-48     	; 0x3b06 <KPD_u8GetPressedKey+0x86>

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);

				}

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    3b36:	8a 81       	ldd	r24, Y+2	; 0x02
    3b38:	88 2f       	mov	r24, r24
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	fc 01       	movw	r30, r24
    3b3e:	ea 5f       	subi	r30, 0xFA	; 250
    3b40:	fe 4f       	sbci	r31, 0xFE	; 254
    3b42:	90 81       	ld	r25, Z
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	69 2f       	mov	r22, r25
    3b48:	41 e0       	ldi	r20, 0x01	; 1
    3b4a:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
				return Local_u8PressedKey;
    3b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b50:	8c 83       	std	Y+4, r24	; 0x04
    3b52:	1c c0       	rjmp	.+56     	; 0x3b8c <KPD_u8GetPressedKey+0x10c>

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    3b54:	89 81       	ldd	r24, Y+1	; 0x01
    3b56:	8f 5f       	subi	r24, 0xFF	; 255
    3b58:	89 83       	std	Y+1, r24	; 0x01
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	84 30       	cpi	r24, 0x04	; 4
    3b5e:	08 f4       	brcc	.+2      	; 0x3b62 <KPD_u8GetPressedKey+0xe2>
    3b60:	a7 cf       	rjmp	.-178    	; 0x3ab0 <KPD_u8GetPressedKey+0x30>

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    3b62:	8a 81       	ldd	r24, Y+2	; 0x02
    3b64:	88 2f       	mov	r24, r24
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	fc 01       	movw	r30, r24
    3b6a:	ea 5f       	subi	r30, 0xFA	; 250
    3b6c:	fe 4f       	sbci	r31, 0xFE	; 254
    3b6e:	90 81       	ld	r25, Z
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	69 2f       	mov	r22, r25
    3b74:	41 e0       	ldi	r20, 0x01	; 1
    3b76:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    3b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7c:	8f 5f       	subi	r24, 0xFF	; 255
    3b7e:	8a 83       	std	Y+2, r24	; 0x02
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	84 30       	cpi	r24, 0x04	; 4
    3b84:	08 f4       	brcc	.+2      	; 0x3b88 <KPD_u8GetPressedKey+0x108>
    3b86:	86 cf       	rjmp	.-244    	; 0x3a94 <KPD_u8GetPressedKey+0x14>
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);

	}
	return Local_u8PressedKey;
    3b88:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8a:	8c 83       	std	Y+4, r24	; 0x04
    3b8c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <RowsInitialization>:


static void RowsInitialization(void){
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_ROW0,OUTPUT);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	41 e0       	ldi	r20, 0x01	; 1
    3baa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW0,HIGH);
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	60 e0       	ldi	r22, 0x00	; 0
    3bb2:	41 e0       	ldi	r20, 0x01	; 1
    3bb4:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW1,OUTPUT);
    3bb8:	80 e0       	ldi	r24, 0x00	; 0
    3bba:	61 e0       	ldi	r22, 0x01	; 1
    3bbc:	41 e0       	ldi	r20, 0x01	; 1
    3bbe:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW1,HIGH);
    3bc2:	80 e0       	ldi	r24, 0x00	; 0
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	41 e0       	ldi	r20, 0x01	; 1
    3bc8:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW2,OUTPUT);
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	62 e0       	ldi	r22, 0x02	; 2
    3bd0:	41 e0       	ldi	r20, 0x01	; 1
    3bd2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW2,HIGH);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	62 e0       	ldi	r22, 0x02	; 2
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW3,OUTPUT);
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	63 e0       	ldi	r22, 0x03	; 3
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW3,HIGH);
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	63 e0       	ldi	r22, 0x03	; 3
    3bee:	41 e0       	ldi	r20, 0x01	; 1
    3bf0:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
}
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <ColumnsInitialization>:
static void ColumnsInitialization(void){
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	cd b7       	in	r28, 0x3d	; 61
    3c00:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_COL0,INPUT);
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	64 e0       	ldi	r22, 0x04	; 4
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL0,HIGH);
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	64 e0       	ldi	r22, 0x04	; 4
    3c10:	41 e0       	ldi	r20, 0x01	; 1
    3c12:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL1,INPUT);
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	65 e0       	ldi	r22, 0x05	; 5
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL1,HIGH);
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	65 e0       	ldi	r22, 0x05	; 5
    3c24:	41 e0       	ldi	r20, 0x01	; 1
    3c26:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL2,INPUT);
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	66 e0       	ldi	r22, 0x06	; 6
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL2,HIGH);
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	66 e0       	ldi	r22, 0x06	; 6
    3c38:	41 e0       	ldi	r20, 0x01	; 1
    3c3a:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL3,INPUT);
    3c3e:	80 e0       	ldi	r24, 0x00	; 0
    3c40:	67 e0       	ldi	r22, 0x07	; 7
    3c42:	40 e0       	ldi	r20, 0x00	; 0
    3c44:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL3,HIGH);
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	67 e0       	ldi	r22, 0x07	; 7
    3c4c:	41 e0       	ldi	r20, 0x01	; 1
    3c4e:	0e 94 a7 0c 	call	0x194e	; 0x194e <DIO_SetPinValue>

}
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <main>:
/*****************************************/
#include "APP.h"

u8 Entered_Pass[4];

int main(void){
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	cd b7       	in	r28, 0x3d	; 61
    3c62:	de b7       	in	r29, 0x3e	; 62
    3c64:	c4 57       	subi	r28, 0x74	; 116
    3c66:	d0 40       	sbci	r29, 0x00	; 0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
	/*	Initialization	*/
	PORT_Init();				// Initialize ports
    3c72:	0e 94 20 08 	call	0x1040	; 0x1040 <PORT_Init>
	LCD_4BitInitialize();		// Initialize LCD in 4-bit mode
    3c76:	0e 94 3f 11 	call	0x227e	; 0x227e <LCD_4BitInitialize>
	KPD_Init();					// Initialize Keypad
    3c7a:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <KPD_Init>
	SPI_EEPROM_Init();			// Initialize SPI EEPROM
    3c7e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <SPI_EEPROM_Init>
	 /* ------------ */
	u8 Login,LoginAttempts=0 ;
    3c82:	fe 01       	movw	r30, r28
    3c84:	ed 58       	subi	r30, 0x8D	; 141
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	10 82       	st	Z, r1
	while(1){
		 // Display welcome message
		LED_ON(PORTD,LOGGED_OUT);
    3c8a:	83 e0       	ldi	r24, 0x03	; 3
    3c8c:	61 e0       	ldi	r22, 0x01	; 1
    3c8e:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LED_ON>
		LCD_ClearDisplay4Bit();
    3c92:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
		LCD_GoToXY4Bit(3,0);
    3c96:	83 e0       	ldi	r24, 0x03	; 3
    3c98:	60 e0       	ldi	r22, 0x00	; 0
    3c9a:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
		LCD_WriteString4Bit("Welcome To ");
    3c9e:	80 e6       	ldi	r24, 0x60	; 96
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
		LCD_GoToXY4Bit(2,1);
    3ca6:	82 e0       	ldi	r24, 0x02	; 2
    3ca8:	61 e0       	ldi	r22, 0x01	; 1
    3caa:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
		LCD_WriteString4Bit("Login System !");
    3cae:	8c e6       	ldi	r24, 0x6C	; 108
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
		LED_ON(PORTD,LOGGED_OUT);
    3cb6:	83 e0       	ldi	r24, 0x03	; 3
    3cb8:	61 e0       	ldi	r22, 0x01	; 1
    3cba:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LED_ON>
    3cbe:	fe 01       	movw	r30, r28
    3cc0:	e3 59       	subi	r30, 0x93	; 147
    3cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	af e2       	ldi	r26, 0x2F	; 47
    3cca:	b4 e4       	ldi	r27, 0x44	; 68
    3ccc:	80 83       	st	Z, r24
    3cce:	91 83       	std	Z+1, r25	; 0x01
    3cd0:	a2 83       	std	Z+2, r26	; 0x02
    3cd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cd4:	8e 01       	movw	r16, r28
    3cd6:	07 59       	subi	r16, 0x97	; 151
    3cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cda:	fe 01       	movw	r30, r28
    3cdc:	e3 59       	subi	r30, 0x93	; 147
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	60 81       	ld	r22, Z
    3ce2:	71 81       	ldd	r23, Z+1	; 0x01
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	93 81       	ldd	r25, Z+3	; 0x03
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	4a ef       	ldi	r20, 0xFA	; 250
    3cee:	54 e4       	ldi	r21, 0x44	; 68
    3cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	f8 01       	movw	r30, r16
    3cfa:	80 83       	st	Z, r24
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	a2 83       	std	Z+2, r26	; 0x02
    3d00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d02:	fe 01       	movw	r30, r28
    3d04:	e7 59       	subi	r30, 0x97	; 151
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	60 81       	ld	r22, Z
    3d0a:	71 81       	ldd	r23, Z+1	; 0x01
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	93 81       	ldd	r25, Z+3	; 0x03
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	40 e8       	ldi	r20, 0x80	; 128
    3d16:	5f e3       	ldi	r21, 0x3F	; 63
    3d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d1c:	88 23       	and	r24, r24
    3d1e:	44 f4       	brge	.+16     	; 0x3d30 <main+0xd8>
		__ticks = 1;
    3d20:	fe 01       	movw	r30, r28
    3d22:	e9 59       	subi	r30, 0x99	; 153
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	80 83       	st	Z, r24
    3d2e:	64 c0       	rjmp	.+200    	; 0x3df8 <main+0x1a0>
	else if (__tmp > 65535)
    3d30:	fe 01       	movw	r30, r28
    3d32:	e7 59       	subi	r30, 0x97	; 151
    3d34:	ff 4f       	sbci	r31, 0xFF	; 255
    3d36:	60 81       	ld	r22, Z
    3d38:	71 81       	ldd	r23, Z+1	; 0x01
    3d3a:	82 81       	ldd	r24, Z+2	; 0x02
    3d3c:	93 81       	ldd	r25, Z+3	; 0x03
    3d3e:	20 e0       	ldi	r18, 0x00	; 0
    3d40:	3f ef       	ldi	r19, 0xFF	; 255
    3d42:	4f e7       	ldi	r20, 0x7F	; 127
    3d44:	57 e4       	ldi	r21, 0x47	; 71
    3d46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d4a:	18 16       	cp	r1, r24
    3d4c:	0c f0       	brlt	.+2      	; 0x3d50 <main+0xf8>
    3d4e:	43 c0       	rjmp	.+134    	; 0x3dd6 <main+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d50:	fe 01       	movw	r30, r28
    3d52:	e3 59       	subi	r30, 0x93	; 147
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e2       	ldi	r20, 0x20	; 32
    3d64:	51 e4       	ldi	r21, 0x41	; 65
    3d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	8e 01       	movw	r16, r28
    3d70:	09 59       	subi	r16, 0x99	; 153
    3d72:	1f 4f       	sbci	r17, 0xFF	; 255
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	f8 01       	movw	r30, r16
    3d82:	91 83       	std	Z+1, r25	; 0x01
    3d84:	80 83       	st	Z, r24
    3d86:	1f c0       	rjmp	.+62     	; 0x3dc6 <main+0x16e>
    3d88:	fe 01       	movw	r30, r28
    3d8a:	eb 59       	subi	r30, 0x9B	; 155
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	88 ec       	ldi	r24, 0xC8	; 200
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d96:	fe 01       	movw	r30, r28
    3d98:	eb 59       	subi	r30, 0x9B	; 155
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	01 97       	sbiw	r24, 0x01	; 1
    3da2:	f1 f7       	brne	.-4      	; 0x3da0 <main+0x148>
    3da4:	fe 01       	movw	r30, r28
    3da6:	eb 59       	subi	r30, 0x9B	; 155
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	91 83       	std	Z+1, r25	; 0x01
    3dac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dae:	de 01       	movw	r26, r28
    3db0:	a9 59       	subi	r26, 0x99	; 153
    3db2:	bf 4f       	sbci	r27, 0xFF	; 255
    3db4:	fe 01       	movw	r30, r28
    3db6:	e9 59       	subi	r30, 0x99	; 153
    3db8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dba:	80 81       	ld	r24, Z
    3dbc:	91 81       	ldd	r25, Z+1	; 0x01
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	11 96       	adiw	r26, 0x01	; 1
    3dc2:	9c 93       	st	X, r25
    3dc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e9 59       	subi	r30, 0x99	; 153
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	80 81       	ld	r24, Z
    3dce:	91 81       	ldd	r25, Z+1	; 0x01
    3dd0:	00 97       	sbiw	r24, 0x00	; 0
    3dd2:	d1 f6       	brne	.-76     	; 0x3d88 <main+0x130>
    3dd4:	27 c0       	rjmp	.+78     	; 0x3e24 <main+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd6:	8e 01       	movw	r16, r28
    3dd8:	09 59       	subi	r16, 0x99	; 153
    3dda:	1f 4f       	sbci	r17, 0xFF	; 255
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e7 59       	subi	r30, 0x97	; 151
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	60 81       	ld	r22, Z
    3de4:	71 81       	ldd	r23, Z+1	; 0x01
    3de6:	82 81       	ldd	r24, Z+2	; 0x02
    3de8:	93 81       	ldd	r25, Z+3	; 0x03
    3dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	f8 01       	movw	r30, r16
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	80 83       	st	Z, r24
    3df8:	de 01       	movw	r26, r28
    3dfa:	ad 59       	subi	r26, 0x9D	; 157
    3dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e9 59       	subi	r30, 0x99	; 153
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	8d 93       	st	X+, r24
    3e0a:	9c 93       	st	X, r25
    3e0c:	fe 01       	movw	r30, r28
    3e0e:	ed 59       	subi	r30, 0x9D	; 157
    3e10:	ff 4f       	sbci	r31, 0xFF	; 255
    3e12:	80 81       	ld	r24, Z
    3e14:	91 81       	ldd	r25, Z+1	; 0x01
    3e16:	01 97       	sbiw	r24, 0x01	; 1
    3e18:	f1 f7       	brne	.-4      	; 0x3e16 <main+0x1be>
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ed 59       	subi	r30, 0x9D	; 157
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	91 83       	std	Z+1, r25	; 0x01
    3e22:	80 83       	st	Z, r24
		_delay_ms(700);
		LCD_ClearDisplay4Bit();
    3e24:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
		EEPROM_ReadByte(LOGIN_STATUS_ADDRESS,&Login);
    3e28:	9e 01       	movw	r18, r28
    3e2a:	2c 58       	subi	r18, 0x8C	; 140
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	67 e0       	ldi	r22, 0x07	; 7
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	90 e0       	ldi	r25, 0x00	; 0
    3e36:	a9 01       	movw	r20, r18
    3e38:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <EEPROM_ReadByte>
		// Check if it's the first login
		if(Login == FIRST_TIME_LOGIN){
    3e3c:	fe 01       	movw	r30, r28
    3e3e:	ec 58       	subi	r30, 0x8C	; 140
    3e40:	ff 4f       	sbci	r31, 0xFF	; 255
    3e42:	80 81       	ld	r24, Z
    3e44:	8f 3f       	cpi	r24, 0xFF	; 255
    3e46:	09 f0       	breq	.+2      	; 0x3e4a <main+0x1f2>
    3e48:	9b c1       	rjmp	.+822    	; 0x4180 <main+0x528>
			// First login, prompt user to set admin password
			LCD_WriteString4Bit("First Login");
    3e4a:	8b e7       	ldi	r24, 0x7B	; 123
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
			LCD_GoToXY4Bit(0,1);
    3e52:	80 e0       	ldi	r24, 0x00	; 0
    3e54:	61 e0       	ldi	r22, 0x01	; 1
    3e56:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
			LCD_WriteString4Bit("Set Admin Pass");
    3e5a:	87 e8       	ldi	r24, 0x87	; 135
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    3e62:	fe 01       	movw	r30, r28
    3e64:	e1 5a       	subi	r30, 0xA1	; 161
    3e66:	ff 4f       	sbci	r31, 0xFF	; 255
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	af e2       	ldi	r26, 0x2F	; 47
    3e6e:	b4 e4       	ldi	r27, 0x44	; 68
    3e70:	80 83       	st	Z, r24
    3e72:	91 83       	std	Z+1, r25	; 0x01
    3e74:	a2 83       	std	Z+2, r26	; 0x02
    3e76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e78:	8e 01       	movw	r16, r28
    3e7a:	05 5a       	subi	r16, 0xA5	; 165
    3e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e1 5a       	subi	r30, 0xA1	; 161
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	4a ef       	ldi	r20, 0xFA	; 250
    3e92:	54 e4       	ldi	r21, 0x44	; 68
    3e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	f8 01       	movw	r30, r16
    3e9e:	80 83       	st	Z, r24
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	a2 83       	std	Z+2, r26	; 0x02
    3ea4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e5 5a       	subi	r30, 0xA5	; 165
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e8       	ldi	r20, 0x80	; 128
    3eba:	5f e3       	ldi	r21, 0x3F	; 63
    3ebc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ec0:	88 23       	and	r24, r24
    3ec2:	44 f4       	brge	.+16     	; 0x3ed4 <main+0x27c>
		__ticks = 1;
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e7 5a       	subi	r30, 0xA7	; 167
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	64 c0       	rjmp	.+200    	; 0x3f9c <main+0x344>
	else if (__tmp > 65535)
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e5 5a       	subi	r30, 0xA5	; 165
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	60 81       	ld	r22, Z
    3edc:	71 81       	ldd	r23, Z+1	; 0x01
    3ede:	82 81       	ldd	r24, Z+2	; 0x02
    3ee0:	93 81       	ldd	r25, Z+3	; 0x03
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	3f ef       	ldi	r19, 0xFF	; 255
    3ee6:	4f e7       	ldi	r20, 0x7F	; 127
    3ee8:	57 e4       	ldi	r21, 0x47	; 71
    3eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3eee:	18 16       	cp	r1, r24
    3ef0:	0c f0       	brlt	.+2      	; 0x3ef4 <main+0x29c>
    3ef2:	43 c0       	rjmp	.+134    	; 0x3f7a <main+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e1 5a       	subi	r30, 0xA1	; 161
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	60 81       	ld	r22, Z
    3efc:	71 81       	ldd	r23, Z+1	; 0x01
    3efe:	82 81       	ldd	r24, Z+2	; 0x02
    3f00:	93 81       	ldd	r25, Z+3	; 0x03
    3f02:	20 e0       	ldi	r18, 0x00	; 0
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	40 e2       	ldi	r20, 0x20	; 32
    3f08:	51 e4       	ldi	r21, 0x41	; 65
    3f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	8e 01       	movw	r16, r28
    3f14:	07 5a       	subi	r16, 0xA7	; 167
    3f16:	1f 4f       	sbci	r17, 0xFF	; 255
    3f18:	bc 01       	movw	r22, r24
    3f1a:	cd 01       	movw	r24, r26
    3f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	f8 01       	movw	r30, r16
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
    3f2a:	1f c0       	rjmp	.+62     	; 0x3f6a <main+0x312>
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	e9 5a       	subi	r30, 0xA9	; 169
    3f30:	ff 4f       	sbci	r31, 0xFF	; 255
    3f32:	88 ec       	ldi	r24, 0xC8	; 200
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	91 83       	std	Z+1, r25	; 0x01
    3f38:	80 83       	st	Z, r24
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	e9 5a       	subi	r30, 0xA9	; 169
    3f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f40:	80 81       	ld	r24, Z
    3f42:	91 81       	ldd	r25, Z+1	; 0x01
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <main+0x2ec>
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e9 5a       	subi	r30, 0xA9	; 169
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f52:	de 01       	movw	r26, r28
    3f54:	a7 5a       	subi	r26, 0xA7	; 167
    3f56:	bf 4f       	sbci	r27, 0xFF	; 255
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e7 5a       	subi	r30, 0xA7	; 167
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	11 96       	adiw	r26, 0x01	; 1
    3f66:	9c 93       	st	X, r25
    3f68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e7 5a       	subi	r30, 0xA7	; 167
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	d1 f6       	brne	.-76     	; 0x3f2c <main+0x2d4>
    3f78:	27 c0       	rjmp	.+78     	; 0x3fc8 <main+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7a:	8e 01       	movw	r16, r28
    3f7c:	07 5a       	subi	r16, 0xA7	; 167
    3f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f80:	fe 01       	movw	r30, r28
    3f82:	e5 5a       	subi	r30, 0xA5	; 165
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	60 81       	ld	r22, Z
    3f88:	71 81       	ldd	r23, Z+1	; 0x01
    3f8a:	82 81       	ldd	r24, Z+2	; 0x02
    3f8c:	93 81       	ldd	r25, Z+3	; 0x03
    3f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f92:	dc 01       	movw	r26, r24
    3f94:	cb 01       	movw	r24, r22
    3f96:	f8 01       	movw	r30, r16
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
    3f9c:	de 01       	movw	r26, r28
    3f9e:	ab 5a       	subi	r26, 0xAB	; 171
    3fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e7 5a       	subi	r30, 0xA7	; 167
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 81       	ld	r24, Z
    3faa:	91 81       	ldd	r25, Z+1	; 0x01
    3fac:	8d 93       	st	X+, r24
    3fae:	9c 93       	st	X, r25
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	eb 5a       	subi	r30, 0xAB	; 171
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	01 97       	sbiw	r24, 0x01	; 1
    3fbc:	f1 f7       	brne	.-4      	; 0x3fba <main+0x362>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	eb 5a       	subi	r30, 0xAB	; 171
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	91 83       	std	Z+1, r25	; 0x01
    3fc6:	80 83       	st	Z, r24
			_delay_ms(700);
			LCD_ClearDisplay4Bit();
    3fc8:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
			// Prompt user to enter password and save it
			LCD_GoToXY4Bit(0,0);
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	60 e0       	ldi	r22, 0x00	; 0
    3fd0:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
			LCD_WriteString4Bit("Password : ");
    3fd4:	86 e9       	ldi	r24, 0x96	; 150
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
			LCD_GoToXY4Bit(0,1);
    3fdc:	80 e0       	ldi	r24, 0x00	; 0
    3fde:	61 e0       	ldi	r22, 0x01	; 1
    3fe0:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
			Accept_Password(Entered_Pass);
    3fe4:	8a e2       	ldi	r24, 0x2A	; 42
    3fe6:	91 e0       	ldi	r25, 0x01	; 1
    3fe8:	0e 94 ad 23 	call	0x475a	; 0x475a <Accept_Password>
			LCD_ClearDisplay4Bit();
    3fec:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
			LCD_GoToXY4Bit(0,0);
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	60 e0       	ldi	r22, 0x00	; 0
    3ff4:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
			LCD_WriteString4Bit("Login Successful");
    3ff8:	82 ea       	ldi	r24, 0xA2	; 162
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
			// Set login status to indicate first login has occurred
			SPI_EEPROM_WriteByte(LOGIN_STATUS_ADDRESS,0x11);
    4000:	67 e0       	ldi	r22, 0x07	; 7
    4002:	70 e0       	ldi	r23, 0x00	; 0
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	41 e1       	ldi	r20, 0x11	; 17
    400a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SPI_EEPROM_WriteByte>
			// Save admin password
			SaveAdmin_Password(Entered_Pass);
    400e:	8a e2       	ldi	r24, 0x2A	; 42
    4010:	91 e0       	ldi	r25, 0x01	; 1
    4012:	0e 94 60 24 	call	0x48c0	; 0x48c0 <SaveAdmin_Password>
    4016:	fe 01       	movw	r30, r28
    4018:	ef 5a       	subi	r30, 0xAF	; 175
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	aa e7       	ldi	r26, 0x7A	; 122
    4022:	b4 e4       	ldi	r27, 0x44	; 68
    4024:	80 83       	st	Z, r24
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	a2 83       	std	Z+2, r26	; 0x02
    402a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402c:	8e 01       	movw	r16, r28
    402e:	03 5b       	subi	r16, 0xB3	; 179
    4030:	1f 4f       	sbci	r17, 0xFF	; 255
    4032:	fe 01       	movw	r30, r28
    4034:	ef 5a       	subi	r30, 0xAF	; 175
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	4a ef       	ldi	r20, 0xFA	; 250
    4046:	54 e4       	ldi	r21, 0x44	; 68
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	f8 01       	movw	r30, r16
    4052:	80 83       	st	Z, r24
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	a2 83       	std	Z+2, r26	; 0x02
    4058:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    405a:	fe 01       	movw	r30, r28
    405c:	e3 5b       	subi	r30, 0xB3	; 179
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e8       	ldi	r20, 0x80	; 128
    406e:	5f e3       	ldi	r21, 0x3F	; 63
    4070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4074:	88 23       	and	r24, r24
    4076:	44 f4       	brge	.+16     	; 0x4088 <main+0x430>
		__ticks = 1;
    4078:	fe 01       	movw	r30, r28
    407a:	e5 5b       	subi	r30, 0xB5	; 181
    407c:	ff 4f       	sbci	r31, 0xFF	; 255
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	80 83       	st	Z, r24
    4086:	64 c0       	rjmp	.+200    	; 0x4150 <main+0x4f8>
	else if (__tmp > 65535)
    4088:	fe 01       	movw	r30, r28
    408a:	e3 5b       	subi	r30, 0xB3	; 179
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	20 e0       	ldi	r18, 0x00	; 0
    4098:	3f ef       	ldi	r19, 0xFF	; 255
    409a:	4f e7       	ldi	r20, 0x7F	; 127
    409c:	57 e4       	ldi	r21, 0x47	; 71
    409e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40a2:	18 16       	cp	r1, r24
    40a4:	0c f0       	brlt	.+2      	; 0x40a8 <main+0x450>
    40a6:	43 c0       	rjmp	.+134    	; 0x412e <main+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a8:	fe 01       	movw	r30, r28
    40aa:	ef 5a       	subi	r30, 0xAF	; 175
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	60 81       	ld	r22, Z
    40b0:	71 81       	ldd	r23, Z+1	; 0x01
    40b2:	82 81       	ldd	r24, Z+2	; 0x02
    40b4:	93 81       	ldd	r25, Z+3	; 0x03
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e2       	ldi	r20, 0x20	; 32
    40bc:	51 e4       	ldi	r21, 0x41	; 65
    40be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	8e 01       	movw	r16, r28
    40c8:	05 5b       	subi	r16, 0xB5	; 181
    40ca:	1f 4f       	sbci	r17, 0xFF	; 255
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	f8 01       	movw	r30, r16
    40da:	91 83       	std	Z+1, r25	; 0x01
    40dc:	80 83       	st	Z, r24
    40de:	1f c0       	rjmp	.+62     	; 0x411e <main+0x4c6>
    40e0:	fe 01       	movw	r30, r28
    40e2:	e7 5b       	subi	r30, 0xB7	; 183
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	88 ec       	ldi	r24, 0xC8	; 200
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	91 83       	std	Z+1, r25	; 0x01
    40ec:	80 83       	st	Z, r24
    40ee:	fe 01       	movw	r30, r28
    40f0:	e7 5b       	subi	r30, 0xB7	; 183
    40f2:	ff 4f       	sbci	r31, 0xFF	; 255
    40f4:	80 81       	ld	r24, Z
    40f6:	91 81       	ldd	r25, Z+1	; 0x01
    40f8:	01 97       	sbiw	r24, 0x01	; 1
    40fa:	f1 f7       	brne	.-4      	; 0x40f8 <main+0x4a0>
    40fc:	fe 01       	movw	r30, r28
    40fe:	e7 5b       	subi	r30, 0xB7	; 183
    4100:	ff 4f       	sbci	r31, 0xFF	; 255
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4106:	de 01       	movw	r26, r28
    4108:	a5 5b       	subi	r26, 0xB5	; 181
    410a:	bf 4f       	sbci	r27, 0xFF	; 255
    410c:	fe 01       	movw	r30, r28
    410e:	e5 5b       	subi	r30, 0xB5	; 181
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	80 81       	ld	r24, Z
    4114:	91 81       	ldd	r25, Z+1	; 0x01
    4116:	01 97       	sbiw	r24, 0x01	; 1
    4118:	11 96       	adiw	r26, 0x01	; 1
    411a:	9c 93       	st	X, r25
    411c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    411e:	fe 01       	movw	r30, r28
    4120:	e5 5b       	subi	r30, 0xB5	; 181
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 81       	ld	r24, Z
    4126:	91 81       	ldd	r25, Z+1	; 0x01
    4128:	00 97       	sbiw	r24, 0x00	; 0
    412a:	d1 f6       	brne	.-76     	; 0x40e0 <main+0x488>
    412c:	ae cd       	rjmp	.-1188   	; 0x3c8a <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    412e:	8e 01       	movw	r16, r28
    4130:	05 5b       	subi	r16, 0xB5	; 181
    4132:	1f 4f       	sbci	r17, 0xFF	; 255
    4134:	fe 01       	movw	r30, r28
    4136:	e3 5b       	subi	r30, 0xB3	; 179
    4138:	ff 4f       	sbci	r31, 0xFF	; 255
    413a:	60 81       	ld	r22, Z
    413c:	71 81       	ldd	r23, Z+1	; 0x01
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4146:	dc 01       	movw	r26, r24
    4148:	cb 01       	movw	r24, r22
    414a:	f8 01       	movw	r30, r16
    414c:	91 83       	std	Z+1, r25	; 0x01
    414e:	80 83       	st	Z, r24
    4150:	de 01       	movw	r26, r28
    4152:	a9 5b       	subi	r26, 0xB9	; 185
    4154:	bf 4f       	sbci	r27, 0xFF	; 255
    4156:	fe 01       	movw	r30, r28
    4158:	e5 5b       	subi	r30, 0xB5	; 181
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	80 81       	ld	r24, Z
    415e:	91 81       	ldd	r25, Z+1	; 0x01
    4160:	11 96       	adiw	r26, 0x01	; 1
    4162:	9c 93       	st	X, r25
    4164:	8e 93       	st	-X, r24
    4166:	fe 01       	movw	r30, r28
    4168:	e9 5b       	subi	r30, 0xB9	; 185
    416a:	ff 4f       	sbci	r31, 0xFF	; 255
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	01 97       	sbiw	r24, 0x01	; 1
    4172:	f1 f7       	brne	.-4      	; 0x4170 <main+0x518>
    4174:	fe 01       	movw	r30, r28
    4176:	e9 5b       	subi	r30, 0xB9	; 185
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	91 83       	std	Z+1, r25	; 0x01
    417c:	80 83       	st	Z, r24
    417e:	85 cd       	rjmp	.-1270   	; 0x3c8a <main+0x32>
			_delay_ms(1000);

		}
		else if(Login == NOT_FIRST_TIME) {
    4180:	fe 01       	movw	r30, r28
    4182:	ec 58       	subi	r30, 0x8C	; 140
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	80 81       	ld	r24, Z
    4188:	81 31       	cpi	r24, 0x11	; 17
    418a:	09 f0       	breq	.+2      	; 0x418e <main+0x536>
    418c:	7e cd       	rjmp	.-1284   	; 0x3c8a <main+0x32>
    418e:	28 c1       	rjmp	.+592    	; 0x43e0 <main+0x788>
			while (LoginAttempts < 3) {
				// Not first login, prompt user to enter password
			    LCD_WriteString4Bit("PLS Enter Pass");
    4190:	83 eb       	ldi	r24, 0xB3	; 179
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
			    LCD_GoToXY4Bit(0, 1);
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	61 e0       	ldi	r22, 0x01	; 1
    419c:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
			    Accept_Password(Entered_Pass);
    41a0:	8a e2       	ldi	r24, 0x2A	; 42
    41a2:	91 e0       	ldi	r25, 0x01	; 1
    41a4:	0e 94 ad 23 	call	0x475a	; 0x475a <Accept_Password>
			    LCD_ClearDisplay4Bit();
    41a8:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
			    // Check if entered password is correct
			    if (IsCorrect(Entered_Pass) == CORRECT) {
    41ac:	8a e2       	ldi	r24, 0x2A	; 42
    41ae:	91 e0       	ldi	r25, 0x01	; 1
    41b0:	0e 94 b6 24 	call	0x496c	; 0x496c <IsCorrect>
    41b4:	88 23       	and	r24, r24
    41b6:	09 f0       	breq	.+2      	; 0x41ba <main+0x562>
    41b8:	92 c0       	rjmp	.+292    	; 0x42de <main+0x686>
			        LCD_WriteString4Bit("Correct Password");
    41ba:	82 ec       	ldi	r24, 0xC2	; 194
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    41c2:	fe 01       	movw	r30, r28
    41c4:	ed 5b       	subi	r30, 0xBD	; 189
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	aa e7       	ldi	r26, 0x7A	; 122
    41ce:	b4 e4       	ldi	r27, 0x44	; 68
    41d0:	80 83       	st	Z, r24
    41d2:	91 83       	std	Z+1, r25	; 0x01
    41d4:	a2 83       	std	Z+2, r26	; 0x02
    41d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d8:	8e 01       	movw	r16, r28
    41da:	01 5c       	subi	r16, 0xC1	; 193
    41dc:	1f 4f       	sbci	r17, 0xFF	; 255
    41de:	fe 01       	movw	r30, r28
    41e0:	ed 5b       	subi	r30, 0xBD	; 189
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	60 81       	ld	r22, Z
    41e6:	71 81       	ldd	r23, Z+1	; 0x01
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	4a ef       	ldi	r20, 0xFA	; 250
    41f2:	54 e4       	ldi	r21, 0x44	; 68
    41f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	f8 01       	movw	r30, r16
    41fe:	80 83       	st	Z, r24
    4200:	91 83       	std	Z+1, r25	; 0x01
    4202:	a2 83       	std	Z+2, r26	; 0x02
    4204:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4206:	fe 01       	movw	r30, r28
    4208:	ff 96       	adiw	r30, 0x3f	; 63
    420a:	60 81       	ld	r22, Z
    420c:	71 81       	ldd	r23, Z+1	; 0x01
    420e:	82 81       	ldd	r24, Z+2	; 0x02
    4210:	93 81       	ldd	r25, Z+3	; 0x03
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	40 e8       	ldi	r20, 0x80	; 128
    4218:	5f e3       	ldi	r21, 0x3F	; 63
    421a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    421e:	88 23       	and	r24, r24
    4220:	2c f4       	brge	.+10     	; 0x422c <main+0x5d4>
		__ticks = 1;
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	9e af       	std	Y+62, r25	; 0x3e
    4228:	8d af       	std	Y+61, r24	; 0x3d
    422a:	46 c0       	rjmp	.+140    	; 0x42b8 <main+0x660>
	else if (__tmp > 65535)
    422c:	fe 01       	movw	r30, r28
    422e:	ff 96       	adiw	r30, 0x3f	; 63
    4230:	60 81       	ld	r22, Z
    4232:	71 81       	ldd	r23, Z+1	; 0x01
    4234:	82 81       	ldd	r24, Z+2	; 0x02
    4236:	93 81       	ldd	r25, Z+3	; 0x03
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	3f ef       	ldi	r19, 0xFF	; 255
    423c:	4f e7       	ldi	r20, 0x7F	; 127
    423e:	57 e4       	ldi	r21, 0x47	; 71
    4240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4244:	18 16       	cp	r1, r24
    4246:	64 f5       	brge	.+88     	; 0x42a0 <main+0x648>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4248:	fe 01       	movw	r30, r28
    424a:	ed 5b       	subi	r30, 0xBD	; 189
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e2       	ldi	r20, 0x20	; 32
    425c:	51 e4       	ldi	r21, 0x41	; 65
    425e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	bc 01       	movw	r22, r24
    4268:	cd 01       	movw	r24, r26
    426a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426e:	dc 01       	movw	r26, r24
    4270:	cb 01       	movw	r24, r22
    4272:	9e af       	std	Y+62, r25	; 0x3e
    4274:	8d af       	std	Y+61, r24	; 0x3d
    4276:	0f c0       	rjmp	.+30     	; 0x4296 <main+0x63e>
    4278:	88 ec       	ldi	r24, 0xC8	; 200
    427a:	90 e0       	ldi	r25, 0x00	; 0
    427c:	9c af       	std	Y+60, r25	; 0x3c
    427e:	8b af       	std	Y+59, r24	; 0x3b
    4280:	8b ad       	ldd	r24, Y+59	; 0x3b
    4282:	9c ad       	ldd	r25, Y+60	; 0x3c
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	f1 f7       	brne	.-4      	; 0x4284 <main+0x62c>
    4288:	9c af       	std	Y+60, r25	; 0x3c
    428a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428c:	8d ad       	ldd	r24, Y+61	; 0x3d
    428e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4290:	01 97       	sbiw	r24, 0x01	; 1
    4292:	9e af       	std	Y+62, r25	; 0x3e
    4294:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4296:	8d ad       	ldd	r24, Y+61	; 0x3d
    4298:	9e ad       	ldd	r25, Y+62	; 0x3e
    429a:	00 97       	sbiw	r24, 0x00	; 0
    429c:	69 f7       	brne	.-38     	; 0x4278 <main+0x620>
    429e:	16 c0       	rjmp	.+44     	; 0x42cc <main+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a0:	fe 01       	movw	r30, r28
    42a2:	ff 96       	adiw	r30, 0x3f	; 63
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	9e af       	std	Y+62, r25	; 0x3e
    42b6:	8d af       	std	Y+61, r24	; 0x3d
    42b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    42ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    42bc:	9a af       	std	Y+58, r25	; 0x3a
    42be:	89 af       	std	Y+57, r24	; 0x39
    42c0:	89 ad       	ldd	r24, Y+57	; 0x39
    42c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    42c4:	01 97       	sbiw	r24, 0x01	; 1
    42c6:	f1 f7       	brne	.-4      	; 0x42c4 <main+0x66c>
    42c8:	9a af       	std	Y+58, r25	; 0x3a
    42ca:	89 af       	std	Y+57, r24	; 0x39
			        _delay_ms(1000);
			        LED_OFF(PORTD,LOGGED_OUT);
    42cc:	83 e0       	ldi	r24, 0x03	; 3
    42ce:	61 e0       	ldi	r22, 0x01	; 1
    42d0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <LED_OFF>
			        LED_ON(PORTD,LOGGED_IN);
    42d4:	83 e0       	ldi	r24, 0x03	; 3
    42d6:	60 e0       	ldi	r22, 0x00	; 0
    42d8:	0e 94 61 10 	call	0x20c2	; 0x20c2 <LED_ON>
    42dc:	88 c0       	rjmp	.+272    	; 0x43ee <main+0x796>
			        break;  // Exit the loop if the password is correct
			    } else {
			    	// Password is incorrect, prompt user to enter password again
			        LCD_WriteString4Bit("Wrong Password");
    42de:	83 ed       	ldi	r24, 0xD3	; 211
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	aa e7       	ldi	r26, 0x7A	; 122
    42ec:	b4 e4       	ldi	r27, 0x44	; 68
    42ee:	8d ab       	std	Y+53, r24	; 0x35
    42f0:	9e ab       	std	Y+54, r25	; 0x36
    42f2:	af ab       	std	Y+55, r26	; 0x37
    42f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f6:	6d a9       	ldd	r22, Y+53	; 0x35
    42f8:	7e a9       	ldd	r23, Y+54	; 0x36
    42fa:	8f a9       	ldd	r24, Y+55	; 0x37
    42fc:	98 ad       	ldd	r25, Y+56	; 0x38
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	4a ef       	ldi	r20, 0xFA	; 250
    4304:	54 e4       	ldi	r21, 0x44	; 68
    4306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	89 ab       	std	Y+49, r24	; 0x31
    4310:	9a ab       	std	Y+50, r25	; 0x32
    4312:	ab ab       	std	Y+51, r26	; 0x33
    4314:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4316:	69 a9       	ldd	r22, Y+49	; 0x31
    4318:	7a a9       	ldd	r23, Y+50	; 0x32
    431a:	8b a9       	ldd	r24, Y+51	; 0x33
    431c:	9c a9       	ldd	r25, Y+52	; 0x34
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	40 e8       	ldi	r20, 0x80	; 128
    4324:	5f e3       	ldi	r21, 0x3F	; 63
    4326:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    432a:	88 23       	and	r24, r24
    432c:	2c f4       	brge	.+10     	; 0x4338 <main+0x6e0>
		__ticks = 1;
    432e:	81 e0       	ldi	r24, 0x01	; 1
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	98 ab       	std	Y+48, r25	; 0x30
    4334:	8f a7       	std	Y+47, r24	; 0x2f
    4336:	3f c0       	rjmp	.+126    	; 0x43b6 <main+0x75e>
	else if (__tmp > 65535)
    4338:	69 a9       	ldd	r22, Y+49	; 0x31
    433a:	7a a9       	ldd	r23, Y+50	; 0x32
    433c:	8b a9       	ldd	r24, Y+51	; 0x33
    433e:	9c a9       	ldd	r25, Y+52	; 0x34
    4340:	20 e0       	ldi	r18, 0x00	; 0
    4342:	3f ef       	ldi	r19, 0xFF	; 255
    4344:	4f e7       	ldi	r20, 0x7F	; 127
    4346:	57 e4       	ldi	r21, 0x47	; 71
    4348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    434c:	18 16       	cp	r1, r24
    434e:	4c f5       	brge	.+82     	; 0x43a2 <main+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4350:	6d a9       	ldd	r22, Y+53	; 0x35
    4352:	7e a9       	ldd	r23, Y+54	; 0x36
    4354:	8f a9       	ldd	r24, Y+55	; 0x37
    4356:	98 ad       	ldd	r25, Y+56	; 0x38
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e2       	ldi	r20, 0x20	; 32
    435e:	51 e4       	ldi	r21, 0x41	; 65
    4360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	bc 01       	movw	r22, r24
    436a:	cd 01       	movw	r24, r26
    436c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	98 ab       	std	Y+48, r25	; 0x30
    4376:	8f a7       	std	Y+47, r24	; 0x2f
    4378:	0f c0       	rjmp	.+30     	; 0x4398 <main+0x740>
    437a:	88 ec       	ldi	r24, 0xC8	; 200
    437c:	90 e0       	ldi	r25, 0x00	; 0
    437e:	9e a7       	std	Y+46, r25	; 0x2e
    4380:	8d a7       	std	Y+45, r24	; 0x2d
    4382:	8d a5       	ldd	r24, Y+45	; 0x2d
    4384:	9e a5       	ldd	r25, Y+46	; 0x2e
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <main+0x72e>
    438a:	9e a7       	std	Y+46, r25	; 0x2e
    438c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4390:	98 a9       	ldd	r25, Y+48	; 0x30
    4392:	01 97       	sbiw	r24, 0x01	; 1
    4394:	98 ab       	std	Y+48, r25	; 0x30
    4396:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4398:	8f a5       	ldd	r24, Y+47	; 0x2f
    439a:	98 a9       	ldd	r25, Y+48	; 0x30
    439c:	00 97       	sbiw	r24, 0x00	; 0
    439e:	69 f7       	brne	.-38     	; 0x437a <main+0x722>
    43a0:	14 c0       	rjmp	.+40     	; 0x43ca <main+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a2:	69 a9       	ldd	r22, Y+49	; 0x31
    43a4:	7a a9       	ldd	r23, Y+50	; 0x32
    43a6:	8b a9       	ldd	r24, Y+51	; 0x33
    43a8:	9c a9       	ldd	r25, Y+52	; 0x34
    43aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	98 ab       	std	Y+48, r25	; 0x30
    43b4:	8f a7       	std	Y+47, r24	; 0x2f
    43b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    43b8:	98 a9       	ldd	r25, Y+48	; 0x30
    43ba:	9c a7       	std	Y+44, r25	; 0x2c
    43bc:	8b a7       	std	Y+43, r24	; 0x2b
    43be:	8b a5       	ldd	r24, Y+43	; 0x2b
    43c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    43c2:	01 97       	sbiw	r24, 0x01	; 1
    43c4:	f1 f7       	brne	.-4      	; 0x43c2 <main+0x76a>
    43c6:	9c a7       	std	Y+44, r25	; 0x2c
    43c8:	8b a7       	std	Y+43, r24	; 0x2b
			        _delay_ms(1000);
			        LCD_ClearDisplay4Bit();
    43ca:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
			        LoginAttempts++;
    43ce:	de 01       	movw	r26, r28
    43d0:	ad 58       	subi	r26, 0x8D	; 141
    43d2:	bf 4f       	sbci	r27, 0xFF	; 255
    43d4:	fe 01       	movw	r30, r28
    43d6:	ed 58       	subi	r30, 0x8D	; 141
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	80 81       	ld	r24, Z
    43dc:	8f 5f       	subi	r24, 0xFF	; 255
    43de:	8c 93       	st	X, r24
			SaveAdmin_Password(Entered_Pass);
			_delay_ms(1000);

		}
		else if(Login == NOT_FIRST_TIME) {
			while (LoginAttempts < 3) {
    43e0:	fe 01       	movw	r30, r28
    43e2:	ed 58       	subi	r30, 0x8D	; 141
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	80 81       	ld	r24, Z
    43e8:	83 30       	cpi	r24, 0x03	; 3
    43ea:	08 f4       	brcc	.+2      	; 0x43ee <main+0x796>
    43ec:	d1 ce       	rjmp	.-606    	; 0x4190 <main+0x538>
			        _delay_ms(1000);
			        LCD_ClearDisplay4Bit();
			        LoginAttempts++;
			    }
			}
			if(LoginAttempts >= 3) {
    43ee:	fe 01       	movw	r30, r28
    43f0:	ed 58       	subi	r30, 0x8D	; 141
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	80 81       	ld	r24, Z
    43f6:	83 30       	cpi	r24, 0x03	; 3
    43f8:	08 f4       	brcc	.+2      	; 0x43fc <main+0x7a4>
    43fa:	86 c0       	rjmp	.+268    	; 0x4508 <main+0x8b0>
				LCD_ClearDisplay4Bit();
    43fc:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
				LCD_WriteString4Bit("Too many attempts");
    4400:	82 ee       	ldi	r24, 0xE2	; 226
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	aa e7       	ldi	r26, 0x7A	; 122
    440e:	b4 e4       	ldi	r27, 0x44	; 68
    4410:	8f a3       	std	Y+39, r24	; 0x27
    4412:	98 a7       	std	Y+40, r25	; 0x28
    4414:	a9 a7       	std	Y+41, r26	; 0x29
    4416:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4418:	6f a1       	ldd	r22, Y+39	; 0x27
    441a:	78 a5       	ldd	r23, Y+40	; 0x28
    441c:	89 a5       	ldd	r24, Y+41	; 0x29
    441e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	4a ef       	ldi	r20, 0xFA	; 250
    4426:	54 e4       	ldi	r21, 0x44	; 68
    4428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	8b a3       	std	Y+35, r24	; 0x23
    4432:	9c a3       	std	Y+36, r25	; 0x24
    4434:	ad a3       	std	Y+37, r26	; 0x25
    4436:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4438:	6b a1       	ldd	r22, Y+35	; 0x23
    443a:	7c a1       	ldd	r23, Y+36	; 0x24
    443c:	8d a1       	ldd	r24, Y+37	; 0x25
    443e:	9e a1       	ldd	r25, Y+38	; 0x26
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e8       	ldi	r20, 0x80	; 128
    4446:	5f e3       	ldi	r21, 0x3F	; 63
    4448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    444c:	88 23       	and	r24, r24
    444e:	2c f4       	brge	.+10     	; 0x445a <main+0x802>
		__ticks = 1;
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	9a a3       	std	Y+34, r25	; 0x22
    4456:	89 a3       	std	Y+33, r24	; 0x21
    4458:	3f c0       	rjmp	.+126    	; 0x44d8 <main+0x880>
	else if (__tmp > 65535)
    445a:	6b a1       	ldd	r22, Y+35	; 0x23
    445c:	7c a1       	ldd	r23, Y+36	; 0x24
    445e:	8d a1       	ldd	r24, Y+37	; 0x25
    4460:	9e a1       	ldd	r25, Y+38	; 0x26
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	3f ef       	ldi	r19, 0xFF	; 255
    4466:	4f e7       	ldi	r20, 0x7F	; 127
    4468:	57 e4       	ldi	r21, 0x47	; 71
    446a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    446e:	18 16       	cp	r1, r24
    4470:	4c f5       	brge	.+82     	; 0x44c4 <main+0x86c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4472:	6f a1       	ldd	r22, Y+39	; 0x27
    4474:	78 a5       	ldd	r23, Y+40	; 0x28
    4476:	89 a5       	ldd	r24, Y+41	; 0x29
    4478:	9a a5       	ldd	r25, Y+42	; 0x2a
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e2       	ldi	r20, 0x20	; 32
    4480:	51 e4       	ldi	r21, 0x41	; 65
    4482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	9a a3       	std	Y+34, r25	; 0x22
    4498:	89 a3       	std	Y+33, r24	; 0x21
    449a:	0f c0       	rjmp	.+30     	; 0x44ba <main+0x862>
    449c:	88 ec       	ldi	r24, 0xC8	; 200
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	98 a3       	std	Y+32, r25	; 0x20
    44a2:	8f 8f       	std	Y+31, r24	; 0x1f
    44a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44a6:	98 a1       	ldd	r25, Y+32	; 0x20
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <main+0x850>
    44ac:	98 a3       	std	Y+32, r25	; 0x20
    44ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	89 a1       	ldd	r24, Y+33	; 0x21
    44b2:	9a a1       	ldd	r25, Y+34	; 0x22
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	9a a3       	std	Y+34, r25	; 0x22
    44b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ba:	89 a1       	ldd	r24, Y+33	; 0x21
    44bc:	9a a1       	ldd	r25, Y+34	; 0x22
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	69 f7       	brne	.-38     	; 0x449c <main+0x844>
    44c2:	14 c0       	rjmp	.+40     	; 0x44ec <main+0x894>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c4:	6b a1       	ldd	r22, Y+35	; 0x23
    44c6:	7c a1       	ldd	r23, Y+36	; 0x24
    44c8:	8d a1       	ldd	r24, Y+37	; 0x25
    44ca:	9e a1       	ldd	r25, Y+38	; 0x26
    44cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	9a a3       	std	Y+34, r25	; 0x22
    44d6:	89 a3       	std	Y+33, r24	; 0x21
    44d8:	89 a1       	ldd	r24, Y+33	; 0x21
    44da:	9a a1       	ldd	r25, Y+34	; 0x22
    44dc:	9e 8f       	std	Y+30, r25	; 0x1e
    44de:	8d 8f       	std	Y+29, r24	; 0x1d
    44e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <main+0x88c>
    44e8:	9e 8f       	std	Y+30, r25	; 0x1e
    44ea:	8d 8f       	std	Y+29, r24	; 0x1d
					}
				}
			}
		}
	}
	return 0;
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
}
    44f0:	cc 58       	subi	r28, 0x8C	; 140
    44f2:	df 4f       	sbci	r29, 0xFF	; 255
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	f8 94       	cli
    44f8:	de bf       	out	0x3e, r29	; 62
    44fa:	0f be       	out	0x3f, r0	; 63
    44fc:	cd bf       	out	0x3d, r28	; 61
    44fe:	cf 91       	pop	r28
    4500:	df 91       	pop	r29
    4502:	1f 91       	pop	r17
    4504:	0f 91       	pop	r16
    4506:	08 95       	ret
				break;
			}
			else{
				while(1){
					/*	Write Your Program Here	*/
					for(u8 i=0;i<9;i++){
    4508:	fe 01       	movw	r30, r28
    450a:	ee 58       	subi	r30, 0x8E	; 142
    450c:	ff 4f       	sbci	r31, 0xFF	; 255
    450e:	10 82       	st	Z, r1
    4510:	88 c0       	rjmp	.+272    	; 0x4622 <main+0x9ca>
						LCD_ClearDisplay4Bit();
    4512:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
						LCD_GoToXY4Bit(i,0);
    4516:	fe 01       	movw	r30, r28
    4518:	ee 58       	subi	r30, 0x8E	; 142
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	80 81       	ld	r24, Z
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
						LCD_WriteString4Bit("Welcome!");
    4524:	84 ef       	ldi	r24, 0xF4	; 244
    4526:	90 e0       	ldi	r25, 0x00	; 0
    4528:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    452c:	80 e0       	ldi	r24, 0x00	; 0
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	a8 ec       	ldi	r26, 0xC8	; 200
    4532:	b2 e4       	ldi	r27, 0x42	; 66
    4534:	89 8f       	std	Y+25, r24	; 0x19
    4536:	9a 8f       	std	Y+26, r25	; 0x1a
    4538:	ab 8f       	std	Y+27, r26	; 0x1b
    453a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    453c:	69 8d       	ldd	r22, Y+25	; 0x19
    453e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4540:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4542:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	4a ef       	ldi	r20, 0xFA	; 250
    454a:	54 e4       	ldi	r21, 0x44	; 68
    454c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	8d 8b       	std	Y+21, r24	; 0x15
    4556:	9e 8b       	std	Y+22, r25	; 0x16
    4558:	af 8b       	std	Y+23, r26	; 0x17
    455a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    455c:	6d 89       	ldd	r22, Y+21	; 0x15
    455e:	7e 89       	ldd	r23, Y+22	; 0x16
    4560:	8f 89       	ldd	r24, Y+23	; 0x17
    4562:	98 8d       	ldd	r25, Y+24	; 0x18
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	40 e8       	ldi	r20, 0x80	; 128
    456a:	5f e3       	ldi	r21, 0x3F	; 63
    456c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4570:	88 23       	and	r24, r24
    4572:	2c f4       	brge	.+10     	; 0x457e <main+0x926>
		__ticks = 1;
    4574:	81 e0       	ldi	r24, 0x01	; 1
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	9c 8b       	std	Y+20, r25	; 0x14
    457a:	8b 8b       	std	Y+19, r24	; 0x13
    457c:	3f c0       	rjmp	.+126    	; 0x45fc <main+0x9a4>
	else if (__tmp > 65535)
    457e:	6d 89       	ldd	r22, Y+21	; 0x15
    4580:	7e 89       	ldd	r23, Y+22	; 0x16
    4582:	8f 89       	ldd	r24, Y+23	; 0x17
    4584:	98 8d       	ldd	r25, Y+24	; 0x18
    4586:	20 e0       	ldi	r18, 0x00	; 0
    4588:	3f ef       	ldi	r19, 0xFF	; 255
    458a:	4f e7       	ldi	r20, 0x7F	; 127
    458c:	57 e4       	ldi	r21, 0x47	; 71
    458e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4592:	18 16       	cp	r1, r24
    4594:	4c f5       	brge	.+82     	; 0x45e8 <main+0x990>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4596:	69 8d       	ldd	r22, Y+25	; 0x19
    4598:	7a 8d       	ldd	r23, Y+26	; 0x1a
    459a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    459c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    459e:	20 e0       	ldi	r18, 0x00	; 0
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	40 e2       	ldi	r20, 0x20	; 32
    45a4:	51 e4       	ldi	r21, 0x41	; 65
    45a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45aa:	dc 01       	movw	r26, r24
    45ac:	cb 01       	movw	r24, r22
    45ae:	bc 01       	movw	r22, r24
    45b0:	cd 01       	movw	r24, r26
    45b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b6:	dc 01       	movw	r26, r24
    45b8:	cb 01       	movw	r24, r22
    45ba:	9c 8b       	std	Y+20, r25	; 0x14
    45bc:	8b 8b       	std	Y+19, r24	; 0x13
    45be:	0f c0       	rjmp	.+30     	; 0x45de <main+0x986>
    45c0:	88 ec       	ldi	r24, 0xC8	; 200
    45c2:	90 e0       	ldi	r25, 0x00	; 0
    45c4:	9a 8b       	std	Y+18, r25	; 0x12
    45c6:	89 8b       	std	Y+17, r24	; 0x11
    45c8:	89 89       	ldd	r24, Y+17	; 0x11
    45ca:	9a 89       	ldd	r25, Y+18	; 0x12
    45cc:	01 97       	sbiw	r24, 0x01	; 1
    45ce:	f1 f7       	brne	.-4      	; 0x45cc <main+0x974>
    45d0:	9a 8b       	std	Y+18, r25	; 0x12
    45d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45d4:	8b 89       	ldd	r24, Y+19	; 0x13
    45d6:	9c 89       	ldd	r25, Y+20	; 0x14
    45d8:	01 97       	sbiw	r24, 0x01	; 1
    45da:	9c 8b       	std	Y+20, r25	; 0x14
    45dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45de:	8b 89       	ldd	r24, Y+19	; 0x13
    45e0:	9c 89       	ldd	r25, Y+20	; 0x14
    45e2:	00 97       	sbiw	r24, 0x00	; 0
    45e4:	69 f7       	brne	.-38     	; 0x45c0 <main+0x968>
    45e6:	14 c0       	rjmp	.+40     	; 0x4610 <main+0x9b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45e8:	6d 89       	ldd	r22, Y+21	; 0x15
    45ea:	7e 89       	ldd	r23, Y+22	; 0x16
    45ec:	8f 89       	ldd	r24, Y+23	; 0x17
    45ee:	98 8d       	ldd	r25, Y+24	; 0x18
    45f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f4:	dc 01       	movw	r26, r24
    45f6:	cb 01       	movw	r24, r22
    45f8:	9c 8b       	std	Y+20, r25	; 0x14
    45fa:	8b 8b       	std	Y+19, r24	; 0x13
    45fc:	8b 89       	ldd	r24, Y+19	; 0x13
    45fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4600:	98 8b       	std	Y+16, r25	; 0x10
    4602:	8f 87       	std	Y+15, r24	; 0x0f
    4604:	8f 85       	ldd	r24, Y+15	; 0x0f
    4606:	98 89       	ldd	r25, Y+16	; 0x10
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	f1 f7       	brne	.-4      	; 0x4608 <main+0x9b0>
    460c:	98 8b       	std	Y+16, r25	; 0x10
    460e:	8f 87       	std	Y+15, r24	; 0x0f
				break;
			}
			else{
				while(1){
					/*	Write Your Program Here	*/
					for(u8 i=0;i<9;i++){
    4610:	de 01       	movw	r26, r28
    4612:	ae 58       	subi	r26, 0x8E	; 142
    4614:	bf 4f       	sbci	r27, 0xFF	; 255
    4616:	fe 01       	movw	r30, r28
    4618:	ee 58       	subi	r30, 0x8E	; 142
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	80 81       	ld	r24, Z
    461e:	8f 5f       	subi	r24, 0xFF	; 255
    4620:	8c 93       	st	X, r24
    4622:	fe 01       	movw	r30, r28
    4624:	ee 58       	subi	r30, 0x8E	; 142
    4626:	ff 4f       	sbci	r31, 0xFF	; 255
    4628:	80 81       	ld	r24, Z
    462a:	89 30       	cpi	r24, 0x09	; 9
    462c:	08 f4       	brcc	.+2      	; 0x4630 <main+0x9d8>
    462e:	71 cf       	rjmp	.-286    	; 0x4512 <main+0x8ba>
						LCD_ClearDisplay4Bit();
						LCD_GoToXY4Bit(i,0);
						LCD_WriteString4Bit("Welcome!");
						_delay_ms(100);
					}
					for(u8 i=0;i<9;i++){
    4630:	fe 01       	movw	r30, r28
    4632:	ef 58       	subi	r30, 0x8F	; 143
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	10 82       	st	Z, r1
    4638:	88 c0       	rjmp	.+272    	; 0x474a <main+0xaf2>
						LCD_ClearDisplay4Bit();
    463a:	0e 94 80 13 	call	0x2700	; 0x2700 <LCD_ClearDisplay4Bit>
						LCD_GoToXY4Bit(i,1);
    463e:	fe 01       	movw	r30, r28
    4640:	ef 58       	subi	r30, 0x8F	; 143
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	80 81       	ld	r24, Z
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
						LCD_WriteString4Bit("Welcome!");
    464c:	84 ef       	ldi	r24, 0xF4	; 244
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	0e 94 63 12 	call	0x24c6	; 0x24c6 <LCD_WriteString4Bit>
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	a8 ec       	ldi	r26, 0xC8	; 200
    465a:	b2 e4       	ldi	r27, 0x42	; 66
    465c:	8b 87       	std	Y+11, r24	; 0x0b
    465e:	9c 87       	std	Y+12, r25	; 0x0c
    4660:	ad 87       	std	Y+13, r26	; 0x0d
    4662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4664:	6b 85       	ldd	r22, Y+11	; 0x0b
    4666:	7c 85       	ldd	r23, Y+12	; 0x0c
    4668:	8d 85       	ldd	r24, Y+13	; 0x0d
    466a:	9e 85       	ldd	r25, Y+14	; 0x0e
    466c:	20 e0       	ldi	r18, 0x00	; 0
    466e:	30 e0       	ldi	r19, 0x00	; 0
    4670:	4a ef       	ldi	r20, 0xFA	; 250
    4672:	54 e4       	ldi	r21, 0x44	; 68
    4674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	8f 83       	std	Y+7, r24	; 0x07
    467e:	98 87       	std	Y+8, r25	; 0x08
    4680:	a9 87       	std	Y+9, r26	; 0x09
    4682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4684:	6f 81       	ldd	r22, Y+7	; 0x07
    4686:	78 85       	ldd	r23, Y+8	; 0x08
    4688:	89 85       	ldd	r24, Y+9	; 0x09
    468a:	9a 85       	ldd	r25, Y+10	; 0x0a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e8       	ldi	r20, 0x80	; 128
    4692:	5f e3       	ldi	r21, 0x3F	; 63
    4694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4698:	88 23       	and	r24, r24
    469a:	2c f4       	brge	.+10     	; 0x46a6 <main+0xa4e>
		__ticks = 1;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	9e 83       	std	Y+6, r25	; 0x06
    46a2:	8d 83       	std	Y+5, r24	; 0x05
    46a4:	3f c0       	rjmp	.+126    	; 0x4724 <main+0xacc>
	else if (__tmp > 65535)
    46a6:	6f 81       	ldd	r22, Y+7	; 0x07
    46a8:	78 85       	ldd	r23, Y+8	; 0x08
    46aa:	89 85       	ldd	r24, Y+9	; 0x09
    46ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	3f ef       	ldi	r19, 0xFF	; 255
    46b2:	4f e7       	ldi	r20, 0x7F	; 127
    46b4:	57 e4       	ldi	r21, 0x47	; 71
    46b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46ba:	18 16       	cp	r1, r24
    46bc:	4c f5       	brge	.+82     	; 0x4710 <main+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46be:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    46c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    46c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	30 e0       	ldi	r19, 0x00	; 0
    46ca:	40 e2       	ldi	r20, 0x20	; 32
    46cc:	51 e4       	ldi	r21, 0x41	; 65
    46ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	bc 01       	movw	r22, r24
    46d8:	cd 01       	movw	r24, r26
    46da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	9e 83       	std	Y+6, r25	; 0x06
    46e4:	8d 83       	std	Y+5, r24	; 0x05
    46e6:	0f c0       	rjmp	.+30     	; 0x4706 <main+0xaae>
    46e8:	88 ec       	ldi	r24, 0xC8	; 200
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
    46f0:	8b 81       	ldd	r24, Y+3	; 0x03
    46f2:	9c 81       	ldd	r25, Y+4	; 0x04
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	f1 f7       	brne	.-4      	; 0x46f4 <main+0xa9c>
    46f8:	9c 83       	std	Y+4, r25	; 0x04
    46fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46fc:	8d 81       	ldd	r24, Y+5	; 0x05
    46fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	9e 83       	std	Y+6, r25	; 0x06
    4704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4706:	8d 81       	ldd	r24, Y+5	; 0x05
    4708:	9e 81       	ldd	r25, Y+6	; 0x06
    470a:	00 97       	sbiw	r24, 0x00	; 0
    470c:	69 f7       	brne	.-38     	; 0x46e8 <main+0xa90>
    470e:	14 c0       	rjmp	.+40     	; 0x4738 <main+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4710:	6f 81       	ldd	r22, Y+7	; 0x07
    4712:	78 85       	ldd	r23, Y+8	; 0x08
    4714:	89 85       	ldd	r24, Y+9	; 0x09
    4716:	9a 85       	ldd	r25, Y+10	; 0x0a
    4718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	9e 83       	std	Y+6, r25	; 0x06
    4722:	8d 83       	std	Y+5, r24	; 0x05
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
    472c:	89 81       	ldd	r24, Y+1	; 0x01
    472e:	9a 81       	ldd	r25, Y+2	; 0x02
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <main+0xad8>
    4734:	9a 83       	std	Y+2, r25	; 0x02
    4736:	89 83       	std	Y+1, r24	; 0x01
						LCD_ClearDisplay4Bit();
						LCD_GoToXY4Bit(i,0);
						LCD_WriteString4Bit("Welcome!");
						_delay_ms(100);
					}
					for(u8 i=0;i<9;i++){
    4738:	de 01       	movw	r26, r28
    473a:	af 58       	subi	r26, 0x8F	; 143
    473c:	bf 4f       	sbci	r27, 0xFF	; 255
    473e:	fe 01       	movw	r30, r28
    4740:	ef 58       	subi	r30, 0x8F	; 143
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	80 81       	ld	r24, Z
    4746:	8f 5f       	subi	r24, 0xFF	; 255
    4748:	8c 93       	st	X, r24
    474a:	fe 01       	movw	r30, r28
    474c:	ef 58       	subi	r30, 0x8F	; 143
    474e:	ff 4f       	sbci	r31, 0xFF	; 255
    4750:	80 81       	ld	r24, Z
    4752:	89 30       	cpi	r24, 0x09	; 9
    4754:	08 f4       	brcc	.+2      	; 0x4758 <main+0xb00>
    4756:	71 cf       	rjmp	.-286    	; 0x463a <main+0x9e2>
    4758:	d7 ce       	rjmp	.-594    	; 0x4508 <main+0x8b0>

0000475a <Accept_Password>:
		}
	}
	return 0;
}

void Accept_Password(u8 *Copy_u8Password){
    475a:	0f 93       	push	r16
    475c:	1f 93       	push	r17
    475e:	df 93       	push	r29
    4760:	cf 93       	push	r28
    4762:	cd b7       	in	r28, 0x3d	; 61
    4764:	de b7       	in	r29, 0x3e	; 62
    4766:	61 97       	sbiw	r28, 0x11	; 17
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	f8 94       	cli
    476c:	de bf       	out	0x3e, r29	; 62
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	cd bf       	out	0x3d, r28	; 61
    4772:	99 8b       	std	Y+17, r25	; 0x11
    4774:	88 8b       	std	Y+16, r24	; 0x10
	u8 iterator=0;
    4776:	1f 86       	std	Y+15, r1	; 0x0f
	for(iterator = 0;iterator<4;iterator++){
    4778:	1f 86       	std	Y+15, r1	; 0x0f
    477a:	93 c0       	rjmp	.+294    	; 0x48a2 <Accept_Password+0x148>
		Copy_u8Password[iterator] = KPD_Press();
    477c:	8f 85       	ldd	r24, Y+15	; 0x0f
    477e:	28 2f       	mov	r18, r24
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	88 89       	ldd	r24, Y+16	; 0x10
    4784:	99 89       	ldd	r25, Y+17	; 0x11
    4786:	8c 01       	movw	r16, r24
    4788:	02 0f       	add	r16, r18
    478a:	13 1f       	adc	r17, r19
    478c:	0e 94 a3 24 	call	0x4946	; 0x4946 <KPD_Press>
    4790:	f8 01       	movw	r30, r16
    4792:	80 83       	st	Z, r24
		LCD_WriteData4Bit(Copy_u8Password[iterator]);
    4794:	8f 85       	ldd	r24, Y+15	; 0x0f
    4796:	28 2f       	mov	r18, r24
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	88 89       	ldd	r24, Y+16	; 0x10
    479c:	99 89       	ldd	r25, Y+17	; 0x11
    479e:	fc 01       	movw	r30, r24
    47a0:	e2 0f       	add	r30, r18
    47a2:	f3 1f       	adc	r31, r19
    47a4:	80 81       	ld	r24, Z
    47a6:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
    47aa:	80 e0       	ldi	r24, 0x00	; 0
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	ac e8       	ldi	r26, 0x8C	; 140
    47b0:	b2 e4       	ldi	r27, 0x42	; 66
    47b2:	8b 87       	std	Y+11, r24	; 0x0b
    47b4:	9c 87       	std	Y+12, r25	; 0x0c
    47b6:	ad 87       	std	Y+13, r26	; 0x0d
    47b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    47bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47be:	8d 85       	ldd	r24, Y+13	; 0x0d
    47c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	4a ef       	ldi	r20, 0xFA	; 250
    47c8:	54 e4       	ldi	r21, 0x44	; 68
    47ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	8f 83       	std	Y+7, r24	; 0x07
    47d4:	98 87       	std	Y+8, r25	; 0x08
    47d6:	a9 87       	std	Y+9, r26	; 0x09
    47d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47da:	6f 81       	ldd	r22, Y+7	; 0x07
    47dc:	78 85       	ldd	r23, Y+8	; 0x08
    47de:	89 85       	ldd	r24, Y+9	; 0x09
    47e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e8       	ldi	r20, 0x80	; 128
    47e8:	5f e3       	ldi	r21, 0x3F	; 63
    47ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47ee:	88 23       	and	r24, r24
    47f0:	2c f4       	brge	.+10     	; 0x47fc <Accept_Password+0xa2>
		__ticks = 1;
    47f2:	81 e0       	ldi	r24, 0x01	; 1
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	9e 83       	std	Y+6, r25	; 0x06
    47f8:	8d 83       	std	Y+5, r24	; 0x05
    47fa:	3f c0       	rjmp	.+126    	; 0x487a <Accept_Password+0x120>
	else if (__tmp > 65535)
    47fc:	6f 81       	ldd	r22, Y+7	; 0x07
    47fe:	78 85       	ldd	r23, Y+8	; 0x08
    4800:	89 85       	ldd	r24, Y+9	; 0x09
    4802:	9a 85       	ldd	r25, Y+10	; 0x0a
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	3f ef       	ldi	r19, 0xFF	; 255
    4808:	4f e7       	ldi	r20, 0x7F	; 127
    480a:	57 e4       	ldi	r21, 0x47	; 71
    480c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4810:	18 16       	cp	r1, r24
    4812:	4c f5       	brge	.+82     	; 0x4866 <Accept_Password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4814:	6b 85       	ldd	r22, Y+11	; 0x0b
    4816:	7c 85       	ldd	r23, Y+12	; 0x0c
    4818:	8d 85       	ldd	r24, Y+13	; 0x0d
    481a:	9e 85       	ldd	r25, Y+14	; 0x0e
    481c:	20 e0       	ldi	r18, 0x00	; 0
    481e:	30 e0       	ldi	r19, 0x00	; 0
    4820:	40 e2       	ldi	r20, 0x20	; 32
    4822:	51 e4       	ldi	r21, 0x41	; 65
    4824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4828:	dc 01       	movw	r26, r24
    482a:	cb 01       	movw	r24, r22
    482c:	bc 01       	movw	r22, r24
    482e:	cd 01       	movw	r24, r26
    4830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	9e 83       	std	Y+6, r25	; 0x06
    483a:	8d 83       	std	Y+5, r24	; 0x05
    483c:	0f c0       	rjmp	.+30     	; 0x485c <Accept_Password+0x102>
    483e:	88 ec       	ldi	r24, 0xC8	; 200
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	9c 83       	std	Y+4, r25	; 0x04
    4844:	8b 83       	std	Y+3, r24	; 0x03
    4846:	8b 81       	ldd	r24, Y+3	; 0x03
    4848:	9c 81       	ldd	r25, Y+4	; 0x04
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <Accept_Password+0xf0>
    484e:	9c 83       	std	Y+4, r25	; 0x04
    4850:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4852:	8d 81       	ldd	r24, Y+5	; 0x05
    4854:	9e 81       	ldd	r25, Y+6	; 0x06
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	9e 83       	std	Y+6, r25	; 0x06
    485a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	00 97       	sbiw	r24, 0x00	; 0
    4862:	69 f7       	brne	.-38     	; 0x483e <Accept_Password+0xe4>
    4864:	14 c0       	rjmp	.+40     	; 0x488e <Accept_Password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4866:	6f 81       	ldd	r22, Y+7	; 0x07
    4868:	78 85       	ldd	r23, Y+8	; 0x08
    486a:	89 85       	ldd	r24, Y+9	; 0x09
    486c:	9a 85       	ldd	r25, Y+10	; 0x0a
    486e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	9e 83       	std	Y+6, r25	; 0x06
    4878:	8d 83       	std	Y+5, r24	; 0x05
    487a:	8d 81       	ldd	r24, Y+5	; 0x05
    487c:	9e 81       	ldd	r25, Y+6	; 0x06
    487e:	9a 83       	std	Y+2, r25	; 0x02
    4880:	89 83       	std	Y+1, r24	; 0x01
    4882:	89 81       	ldd	r24, Y+1	; 0x01
    4884:	9a 81       	ldd	r25, Y+2	; 0x02
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	f1 f7       	brne	.-4      	; 0x4886 <Accept_Password+0x12c>
    488a:	9a 83       	std	Y+2, r25	; 0x02
    488c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(70);
		LCD_GoToXY4Bit(iterator,1);
    488e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4890:	61 e0       	ldi	r22, 0x01	; 1
    4892:	0e 94 91 12 	call	0x2522	; 0x2522 <LCD_GoToXY4Bit>
		LCD_WriteData4Bit('*');
    4896:	8a e2       	ldi	r24, 0x2A	; 42
    4898:	0e 94 18 11 	call	0x2230	; 0x2230 <LCD_WriteData4Bit>
	return 0;
}

void Accept_Password(u8 *Copy_u8Password){
	u8 iterator=0;
	for(iterator = 0;iterator<4;iterator++){
    489c:	8f 85       	ldd	r24, Y+15	; 0x0f
    489e:	8f 5f       	subi	r24, 0xFF	; 255
    48a0:	8f 87       	std	Y+15, r24	; 0x0f
    48a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    48a4:	84 30       	cpi	r24, 0x04	; 4
    48a6:	08 f4       	brcc	.+2      	; 0x48aa <Accept_Password+0x150>
    48a8:	69 cf       	rjmp	.-302    	; 0x477c <Accept_Password+0x22>
		LCD_WriteData4Bit(Copy_u8Password[iterator]);
		_delay_ms(70);
		LCD_GoToXY4Bit(iterator,1);
		LCD_WriteData4Bit('*');
	}
}
    48aa:	61 96       	adiw	r28, 0x11	; 17
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	f8 94       	cli
    48b0:	de bf       	out	0x3e, r29	; 62
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	cd bf       	out	0x3d, r28	; 61
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	08 95       	ret

000048c0 <SaveAdmin_Password>:

void SaveAdmin_Password(u8 *Copy_u8Password){
    48c0:	df 93       	push	r29
    48c2:	cf 93       	push	r28
    48c4:	cd b7       	in	r28, 0x3d	; 61
    48c6:	de b7       	in	r29, 0x3e	; 62
    48c8:	27 97       	sbiw	r28, 0x07	; 7
    48ca:	0f b6       	in	r0, 0x3f	; 63
    48cc:	f8 94       	cli
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	0f be       	out	0x3f, r0	; 63
    48d2:	cd bf       	out	0x3d, r28	; 61
    48d4:	9f 83       	std	Y+7, r25	; 0x07
    48d6:	8e 83       	std	Y+6, r24	; 0x06
	u32 Address=PASS_START_ADDRESS;
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	a0 e0       	ldi	r26, 0x00	; 0
    48de:	b0 e0       	ldi	r27, 0x00	; 0
    48e0:	8a 83       	std	Y+2, r24	; 0x02
    48e2:	9b 83       	std	Y+3, r25	; 0x03
    48e4:	ac 83       	std	Y+4, r26	; 0x04
    48e6:	bd 83       	std	Y+5, r27	; 0x05
	u8 iterator = 0;
    48e8:	19 82       	std	Y+1, r1	; 0x01
	for(iterator = 0;iterator <4;iterator++,Address++){
    48ea:	19 82       	std	Y+1, r1	; 0x01
    48ec:	20 c0       	rjmp	.+64     	; 0x492e <SaveAdmin_Password+0x6e>
		SPI_EEPROM_WriteByte(Address,Copy_u8Password[iterator]);
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	28 2f       	mov	r18, r24
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	8e 81       	ldd	r24, Y+6	; 0x06
    48f6:	9f 81       	ldd	r25, Y+7	; 0x07
    48f8:	fc 01       	movw	r30, r24
    48fa:	e2 0f       	add	r30, r18
    48fc:	f3 1f       	adc	r31, r19
    48fe:	20 81       	ld	r18, Z
    4900:	8a 81       	ldd	r24, Y+2	; 0x02
    4902:	9b 81       	ldd	r25, Y+3	; 0x03
    4904:	ac 81       	ldd	r26, Y+4	; 0x04
    4906:	bd 81       	ldd	r27, Y+5	; 0x05
    4908:	bc 01       	movw	r22, r24
    490a:	cd 01       	movw	r24, r26
    490c:	42 2f       	mov	r20, r18
    490e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <SPI_EEPROM_WriteByte>
}

void SaveAdmin_Password(u8 *Copy_u8Password){
	u32 Address=PASS_START_ADDRESS;
	u8 iterator = 0;
	for(iterator = 0;iterator <4;iterator++,Address++){
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	8f 5f       	subi	r24, 0xFF	; 255
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	8a 81       	ldd	r24, Y+2	; 0x02
    491a:	9b 81       	ldd	r25, Y+3	; 0x03
    491c:	ac 81       	ldd	r26, Y+4	; 0x04
    491e:	bd 81       	ldd	r27, Y+5	; 0x05
    4920:	01 96       	adiw	r24, 0x01	; 1
    4922:	a1 1d       	adc	r26, r1
    4924:	b1 1d       	adc	r27, r1
    4926:	8a 83       	std	Y+2, r24	; 0x02
    4928:	9b 83       	std	Y+3, r25	; 0x03
    492a:	ac 83       	std	Y+4, r26	; 0x04
    492c:	bd 83       	std	Y+5, r27	; 0x05
    492e:	89 81       	ldd	r24, Y+1	; 0x01
    4930:	84 30       	cpi	r24, 0x04	; 4
    4932:	e8 f2       	brcs	.-70     	; 0x48ee <SaveAdmin_Password+0x2e>
		SPI_EEPROM_WriteByte(Address,Copy_u8Password[iterator]);
	}
}
    4934:	27 96       	adiw	r28, 0x07	; 7
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <KPD_Press>:

u8 KPD_Press(void){
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	0f 92       	push	r0
    494c:	cd b7       	in	r28, 0x3d	; 61
    494e:	de b7       	in	r29, 0x3e	; 62
	u8 PressedKey = 0xff;
    4950:	8f ef       	ldi	r24, 0xFF	; 255
    4952:	89 83       	std	Y+1, r24	; 0x01
    4954:	03 c0       	rjmp	.+6      	; 0x495c <KPD_Press+0x16>
	while(PressedKey == 0Xff){
		PressedKey = KPD_u8GetPressedKey();
    4956:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <KPD_u8GetPressedKey>
    495a:	89 83       	std	Y+1, r24	; 0x01
	}
}

u8 KPD_Press(void){
	u8 PressedKey = 0xff;
	while(PressedKey == 0Xff){
    495c:	89 81       	ldd	r24, Y+1	; 0x01
    495e:	8f 3f       	cpi	r24, 0xFF	; 255
    4960:	d1 f3       	breq	.-12     	; 0x4956 <KPD_Press+0x10>
		PressedKey = KPD_u8GetPressedKey();
	}
	return PressedKey;
    4962:	89 81       	ldd	r24, Y+1	; 0x01
}
    4964:	0f 90       	pop	r0
    4966:	cf 91       	pop	r28
    4968:	df 91       	pop	r29
    496a:	08 95       	ret

0000496c <IsCorrect>:

u8 IsCorrect(u8 *Copy_u8Password) {
    496c:	df 93       	push	r29
    496e:	cf 93       	push	r28
    4970:	cd b7       	in	r28, 0x3d	; 61
    4972:	de b7       	in	r29, 0x3e	; 62
    4974:	2c 97       	sbiw	r28, 0x0c	; 12
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	de bf       	out	0x3e, r29	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	cd bf       	out	0x3d, r28	; 61
    4980:	9c 87       	std	Y+12, r25	; 0x0c
    4982:	8b 87       	std	Y+11, r24	; 0x0b
    u32 Address = PASS_START_ADDRESS;
    4984:	81 e0       	ldi	r24, 0x01	; 1
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	a0 e0       	ldi	r26, 0x00	; 0
    498a:	b0 e0       	ldi	r27, 0x00	; 0
    498c:	8b 83       	std	Y+3, r24	; 0x03
    498e:	9c 83       	std	Y+4, r25	; 0x04
    4990:	ad 83       	std	Y+5, r26	; 0x05
    4992:	be 83       	std	Y+6, r27	; 0x06
    u8 iterator, state = NOT_CORRECT;
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	89 83       	std	Y+1, r24	; 0x01
    u8 Local_u8Pass[4] = {0};
    4998:	1f 82       	std	Y+7, r1	; 0x07
    499a:	18 86       	std	Y+8, r1	; 0x08
    499c:	19 86       	std	Y+9, r1	; 0x09
    499e:	1a 86       	std	Y+10, r1	; 0x0a

    // Load password from EEPROM into Local_u8Pass
    for (iterator = 0; iterator < 4; iterator++, Address++) {
    49a0:	1a 82       	std	Y+2, r1	; 0x02
    49a2:	1f c0       	rjmp	.+62     	; 0x49e2 <IsCorrect+0x76>
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
    49a4:	8a 81       	ldd	r24, Y+2	; 0x02
    49a6:	88 2f       	mov	r24, r24
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	9e 01       	movw	r18, r28
    49ac:	29 5f       	subi	r18, 0xF9	; 249
    49ae:	3f 4f       	sbci	r19, 0xFF	; 255
    49b0:	28 0f       	add	r18, r24
    49b2:	39 1f       	adc	r19, r25
    49b4:	8b 81       	ldd	r24, Y+3	; 0x03
    49b6:	9c 81       	ldd	r25, Y+4	; 0x04
    49b8:	ad 81       	ldd	r26, Y+5	; 0x05
    49ba:	be 81       	ldd	r27, Y+6	; 0x06
    49bc:	bc 01       	movw	r22, r24
    49be:	cd 01       	movw	r24, r26
    49c0:	a9 01       	movw	r20, r18
    49c2:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <EEPROM_ReadByte>
    u32 Address = PASS_START_ADDRESS;
    u8 iterator, state = NOT_CORRECT;
    u8 Local_u8Pass[4] = {0};

    // Load password from EEPROM into Local_u8Pass
    for (iterator = 0; iterator < 4; iterator++, Address++) {
    49c6:	8a 81       	ldd	r24, Y+2	; 0x02
    49c8:	8f 5f       	subi	r24, 0xFF	; 255
    49ca:	8a 83       	std	Y+2, r24	; 0x02
    49cc:	8b 81       	ldd	r24, Y+3	; 0x03
    49ce:	9c 81       	ldd	r25, Y+4	; 0x04
    49d0:	ad 81       	ldd	r26, Y+5	; 0x05
    49d2:	be 81       	ldd	r27, Y+6	; 0x06
    49d4:	01 96       	adiw	r24, 0x01	; 1
    49d6:	a1 1d       	adc	r26, r1
    49d8:	b1 1d       	adc	r27, r1
    49da:	8b 83       	std	Y+3, r24	; 0x03
    49dc:	9c 83       	std	Y+4, r25	; 0x04
    49de:	ad 83       	std	Y+5, r26	; 0x05
    49e0:	be 83       	std	Y+6, r27	; 0x06
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	84 30       	cpi	r24, 0x04	; 4
    49e6:	f0 f2       	brcs	.-68     	; 0x49a4 <IsCorrect+0x38>
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
        }

    // Compare entered password with stored password
    for (iterator = 0; iterator < 4; iterator++) {
    49e8:	1a 82       	std	Y+2, r1	; 0x02
    49ea:	1b c0       	rjmp	.+54     	; 0x4a22 <IsCorrect+0xb6>
        if (Copy_u8Password[iterator] != Local_u8Pass[iterator]) {
    49ec:	8a 81       	ldd	r24, Y+2	; 0x02
    49ee:	28 2f       	mov	r18, r24
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    49f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    49f6:	fc 01       	movw	r30, r24
    49f8:	e2 0f       	add	r30, r18
    49fa:	f3 1f       	adc	r31, r19
    49fc:	40 81       	ld	r20, Z
    49fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4a00:	28 2f       	mov	r18, r24
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	ce 01       	movw	r24, r28
    4a06:	07 96       	adiw	r24, 0x07	; 7
    4a08:	fc 01       	movw	r30, r24
    4a0a:	e2 0f       	add	r30, r18
    4a0c:	f3 1f       	adc	r31, r19
    4a0e:	80 81       	ld	r24, Z
    4a10:	48 17       	cp	r20, r24
    4a12:	19 f0       	breq	.+6      	; 0x4a1a <IsCorrect+0xae>
            state = NOT_CORRECT;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	01 c0       	rjmp	.+2      	; 0x4a1c <IsCorrect+0xb0>
        } else {
            state = CORRECT;
    4a1a:	19 82       	std	Y+1, r1	; 0x01
    for (iterator = 0; iterator < 4; iterator++, Address++) {
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
        }

    // Compare entered password with stored password
    for (iterator = 0; iterator < 4; iterator++) {
    4a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1e:	8f 5f       	subi	r24, 0xFF	; 255
    4a20:	8a 83       	std	Y+2, r24	; 0x02
    4a22:	8a 81       	ldd	r24, Y+2	; 0x02
    4a24:	84 30       	cpi	r24, 0x04	; 4
    4a26:	10 f3       	brcs	.-60     	; 0x49ec <IsCorrect+0x80>
        } else {
            state = CORRECT;
        }
    }

    return state;
    4a28:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a2a:	2c 96       	adiw	r28, 0x0c	; 12
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	cf 91       	pop	r28
    4a38:	df 91       	pop	r29
    4a3a:	08 95       	ret

00004a3c <__mulsi3>:
    4a3c:	62 9f       	mul	r22, r18
    4a3e:	d0 01       	movw	r26, r0
    4a40:	73 9f       	mul	r23, r19
    4a42:	f0 01       	movw	r30, r0
    4a44:	82 9f       	mul	r24, r18
    4a46:	e0 0d       	add	r30, r0
    4a48:	f1 1d       	adc	r31, r1
    4a4a:	64 9f       	mul	r22, r20
    4a4c:	e0 0d       	add	r30, r0
    4a4e:	f1 1d       	adc	r31, r1
    4a50:	92 9f       	mul	r25, r18
    4a52:	f0 0d       	add	r31, r0
    4a54:	83 9f       	mul	r24, r19
    4a56:	f0 0d       	add	r31, r0
    4a58:	74 9f       	mul	r23, r20
    4a5a:	f0 0d       	add	r31, r0
    4a5c:	65 9f       	mul	r22, r21
    4a5e:	f0 0d       	add	r31, r0
    4a60:	99 27       	eor	r25, r25
    4a62:	72 9f       	mul	r23, r18
    4a64:	b0 0d       	add	r27, r0
    4a66:	e1 1d       	adc	r30, r1
    4a68:	f9 1f       	adc	r31, r25
    4a6a:	63 9f       	mul	r22, r19
    4a6c:	b0 0d       	add	r27, r0
    4a6e:	e1 1d       	adc	r30, r1
    4a70:	f9 1f       	adc	r31, r25
    4a72:	bd 01       	movw	r22, r26
    4a74:	cf 01       	movw	r24, r30
    4a76:	11 24       	eor	r1, r1
    4a78:	08 95       	ret

00004a7a <__divmodsi4>:
    4a7a:	97 fb       	bst	r25, 7
    4a7c:	09 2e       	mov	r0, r25
    4a7e:	05 26       	eor	r0, r21
    4a80:	0e d0       	rcall	.+28     	; 0x4a9e <__divmodsi4_neg1>
    4a82:	57 fd       	sbrc	r21, 7
    4a84:	04 d0       	rcall	.+8      	; 0x4a8e <__divmodsi4_neg2>
    4a86:	14 d0       	rcall	.+40     	; 0x4ab0 <__udivmodsi4>
    4a88:	0a d0       	rcall	.+20     	; 0x4a9e <__divmodsi4_neg1>
    4a8a:	00 1c       	adc	r0, r0
    4a8c:	38 f4       	brcc	.+14     	; 0x4a9c <__divmodsi4_exit>

00004a8e <__divmodsi4_neg2>:
    4a8e:	50 95       	com	r21
    4a90:	40 95       	com	r20
    4a92:	30 95       	com	r19
    4a94:	21 95       	neg	r18
    4a96:	3f 4f       	sbci	r19, 0xFF	; 255
    4a98:	4f 4f       	sbci	r20, 0xFF	; 255
    4a9a:	5f 4f       	sbci	r21, 0xFF	; 255

00004a9c <__divmodsi4_exit>:
    4a9c:	08 95       	ret

00004a9e <__divmodsi4_neg1>:
    4a9e:	f6 f7       	brtc	.-4      	; 0x4a9c <__divmodsi4_exit>
    4aa0:	90 95       	com	r25
    4aa2:	80 95       	com	r24
    4aa4:	70 95       	com	r23
    4aa6:	61 95       	neg	r22
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    4aac:	9f 4f       	sbci	r25, 0xFF	; 255
    4aae:	08 95       	ret

00004ab0 <__udivmodsi4>:
    4ab0:	a1 e2       	ldi	r26, 0x21	; 33
    4ab2:	1a 2e       	mov	r1, r26
    4ab4:	aa 1b       	sub	r26, r26
    4ab6:	bb 1b       	sub	r27, r27
    4ab8:	fd 01       	movw	r30, r26
    4aba:	0d c0       	rjmp	.+26     	; 0x4ad6 <__udivmodsi4_ep>

00004abc <__udivmodsi4_loop>:
    4abc:	aa 1f       	adc	r26, r26
    4abe:	bb 1f       	adc	r27, r27
    4ac0:	ee 1f       	adc	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	a2 17       	cp	r26, r18
    4ac6:	b3 07       	cpc	r27, r19
    4ac8:	e4 07       	cpc	r30, r20
    4aca:	f5 07       	cpc	r31, r21
    4acc:	20 f0       	brcs	.+8      	; 0x4ad6 <__udivmodsi4_ep>
    4ace:	a2 1b       	sub	r26, r18
    4ad0:	b3 0b       	sbc	r27, r19
    4ad2:	e4 0b       	sbc	r30, r20
    4ad4:	f5 0b       	sbc	r31, r21

00004ad6 <__udivmodsi4_ep>:
    4ad6:	66 1f       	adc	r22, r22
    4ad8:	77 1f       	adc	r23, r23
    4ada:	88 1f       	adc	r24, r24
    4adc:	99 1f       	adc	r25, r25
    4ade:	1a 94       	dec	r1
    4ae0:	69 f7       	brne	.-38     	; 0x4abc <__udivmodsi4_loop>
    4ae2:	60 95       	com	r22
    4ae4:	70 95       	com	r23
    4ae6:	80 95       	com	r24
    4ae8:	90 95       	com	r25
    4aea:	9b 01       	movw	r18, r22
    4aec:	ac 01       	movw	r20, r24
    4aee:	bd 01       	movw	r22, r26
    4af0:	cf 01       	movw	r24, r30
    4af2:	08 95       	ret

00004af4 <__prologue_saves__>:
    4af4:	2f 92       	push	r2
    4af6:	3f 92       	push	r3
    4af8:	4f 92       	push	r4
    4afa:	5f 92       	push	r5
    4afc:	6f 92       	push	r6
    4afe:	7f 92       	push	r7
    4b00:	8f 92       	push	r8
    4b02:	9f 92       	push	r9
    4b04:	af 92       	push	r10
    4b06:	bf 92       	push	r11
    4b08:	cf 92       	push	r12
    4b0a:	df 92       	push	r13
    4b0c:	ef 92       	push	r14
    4b0e:	ff 92       	push	r15
    4b10:	0f 93       	push	r16
    4b12:	1f 93       	push	r17
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
    4b18:	cd b7       	in	r28, 0x3d	; 61
    4b1a:	de b7       	in	r29, 0x3e	; 62
    4b1c:	ca 1b       	sub	r28, r26
    4b1e:	db 0b       	sbc	r29, r27
    4b20:	0f b6       	in	r0, 0x3f	; 63
    4b22:	f8 94       	cli
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	cd bf       	out	0x3d, r28	; 61
    4b2a:	09 94       	ijmp

00004b2c <__epilogue_restores__>:
    4b2c:	2a 88       	ldd	r2, Y+18	; 0x12
    4b2e:	39 88       	ldd	r3, Y+17	; 0x11
    4b30:	48 88       	ldd	r4, Y+16	; 0x10
    4b32:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b34:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b36:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b38:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b3a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b3c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b3e:	b9 84       	ldd	r11, Y+9	; 0x09
    4b40:	c8 84       	ldd	r12, Y+8	; 0x08
    4b42:	df 80       	ldd	r13, Y+7	; 0x07
    4b44:	ee 80       	ldd	r14, Y+6	; 0x06
    4b46:	fd 80       	ldd	r15, Y+5	; 0x05
    4b48:	0c 81       	ldd	r16, Y+4	; 0x04
    4b4a:	1b 81       	ldd	r17, Y+3	; 0x03
    4b4c:	aa 81       	ldd	r26, Y+2	; 0x02
    4b4e:	b9 81       	ldd	r27, Y+1	; 0x01
    4b50:	ce 0f       	add	r28, r30
    4b52:	d1 1d       	adc	r29, r1
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	f8 94       	cli
    4b58:	de bf       	out	0x3e, r29	; 62
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	cd bf       	out	0x3d, r28	; 61
    4b5e:	ed 01       	movw	r28, r26
    4b60:	08 95       	ret

00004b62 <_exit>:
    4b62:	f8 94       	cli

00004b64 <__stop_program>:
    4b64:	ff cf       	rjmp	.-2      	; 0x4b64 <__stop_program>
