
LoginSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d2  00800060  00004f7a  0000500e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800132  00800132  000050e0  2**0
                  ALLOC
  3 .stab         0000612c  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000027ad  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000d9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000db19  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000dca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000fced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00010dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00011d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000121b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_1>
       8:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <__vector_2>
       c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_10>
      2c:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_11>
      30:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 34       	cpi	r26, 0x49	; 73
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <main>
      8a:	0c 94 bb 27 	jmp	0x4f76	; 0x4f76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e0       	ldi	r26, 0x0B	; 11
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 27 	jmp	0x4f08	; 0x4f08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 27 	jmp	0x4f18	; 0x4f18 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e0       	ldi	r22, 0x0B	; 11
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a8 27 	jmp	0x4f50	; 0x4f50 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 90 27 	jmp	0x4f20	; 0x4f20 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ac 27 	jmp	0x4f58	; 0x4f58 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 94 27 	jmp	0x4f28	; 0x4f28 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b0 27 	jmp	0x4f60	; 0x4f60 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <TMR0_Init>:
#include "TMR0_interface.h"
/*      Used in CallBack Functions      */
static void (*TMR0_OvfCallbackFuncPTR)(void) = NULLPTR;
static void (*TMR0_CTCCallbackFuncPTR)(void) = NULLPTR;

ES_t TMR0_Init(TMR0_t *Copy_Timer0){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <TMR0_Init+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9b 83       	std	Y+3, r25	; 0x03
     cac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     cae:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f4       	brne	.+6      	; 0xcbe <TMR0_Init+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     cb8:	82 e0       	ldi	r24, 0x02	; 2
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	9e c0       	rjmp	.+316    	; 0xdfa <TMR0_Init+0x15c>
    }
    else{
    /*      Choose Mode     */
    if(Copy_Timer0->TIMER0_Mode == NORMAL_MODE){
     cbe:	ea 81       	ldd	r30, Y+2	; 0x02
     cc0:	fb 81       	ldd	r31, Y+3	; 0x03
     cc2:	80 81       	ld	r24, Z
     cc4:	88 23       	and	r24, r24
     cc6:	b1 f4       	brne	.+44     	; 0xcf4 <TMR0_Init+0x56>
                
        CHOOSE_NORMAL_MODE();
     cc8:	a3 e5       	ldi	r26, 0x53	; 83
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e3 e5       	ldi	r30, 0x53	; 83
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7b       	andi	r24, 0xBF	; 191
     cd4:	8c 93       	st	X, r24
     cd6:	a3 e5       	ldi	r26, 0x53	; 83
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e3 e5       	ldi	r30, 0x53	; 83
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	87 7f       	andi	r24, 0xF7	; 247
     ce2:	8c 93       	st	X, r24
        /*Timer Over flow flag Enable*/
	    TMR0_OVF_INTERRUPT_EN();
     ce4:	a9 e5       	ldi	r26, 0x59	; 89
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e9 e5       	ldi	r30, 0x59	; 89
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	8c 93       	st	X, r24
     cf2:	70 c0       	rjmp	.+224    	; 0xdd4 <TMR0_Init+0x136>
    }
    else if(Copy_Timer0->TIMER0_Mode == CTC_MODE){
     cf4:	ea 81       	ldd	r30, Y+2	; 0x02
     cf6:	fb 81       	ldd	r31, Y+3	; 0x03
     cf8:	80 81       	ld	r24, Z
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	e1 f4       	brne	.+56     	; 0xd36 <TMR0_Init+0x98>
        CHOOSE_CTC_MODE();
     cfe:	a3 e5       	ldi	r26, 0x53	; 83
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e3 e5       	ldi	r30, 0x53	; 83
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	8c 93       	st	X, r24
     d0c:	a3 e5       	ldi	r26, 0x53	; 83
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e3 e5       	ldi	r30, 0x53	; 83
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 60       	ori	r24, 0x08	; 8
     d18:	8c 93       	st	X, r24
        /*OUTPUT COMPARE MATCH INTERRUPT ENABLE*/
	    TMR0_CTC_INTERRUPT_EN();
     d1a:	a9 e5       	ldi	r26, 0x59	; 89
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e9 e5       	ldi	r30, 0x59	; 89
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	82 60       	ori	r24, 0x02	; 2
     d26:	8c 93       	st	X, r24
        /*Set compare match value*/
        OCR0 = Copy_Timer0->TMR0_OCR0;
     d28:	ac e5       	ldi	r26, 0x5C	; 92
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ea 81       	ldd	r30, Y+2	; 0x02
     d2e:	fb 81       	ldd	r31, Y+3	; 0x03
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	8c 93       	st	X, r24
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <TMR0_Init+0x136>
    }
    else if(Copy_Timer0->TIMER0_Mode == PHASE_CORRECT_PWM){
     d36:	ea 81       	ldd	r30, Y+2	; 0x02
     d38:	fb 81       	ldd	r31, Y+3	; 0x03
     d3a:	80 81       	ld	r24, Z
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	19 f5       	brne	.+70     	; 0xd86 <TMR0_Init+0xe8>
        CHOOSE_PHASE_CORRECT_PWM();
     d40:	a3 e5       	ldi	r26, 0x53	; 83
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e3 e5       	ldi	r30, 0x53	; 83
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 64       	ori	r24, 0x40	; 64
     d4c:	8c 93       	st	X, r24
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,TCCR0_COM01);
        #elif PHASE_PWM_MODE == PHASE_PWM_CLR_ON_RISING       //Inverting
            CLR_BIT(TCCR0,TCCR0_COM00);
            SET_BIT(TCCR0,TCCR0_COM01);
        #elif PHASE_PWM_MODE == PHASE_PWM_SET_ON_RISING      //Non Inverting
            SET_BIT(TCCR0,TCCR0_COM00);
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 61       	ori	r24, 0x10	; 16
     d68:	8c 93       	st	X, r24
            SET_BIT(TCCR0,TCCR0_COM01);
     d6a:	a3 e5       	ldi	r26, 0x53	; 83
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e3 e5       	ldi	r30, 0x53	; 83
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	80 62       	ori	r24, 0x20	; 32
     d76:	8c 93       	st	X, r24
        #endif
        OCR0 = Copy_Timer0->TMR0_OCR0;
     d78:	ac e5       	ldi	r26, 0x5C	; 92
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	fb 81       	ldd	r31, Y+3	; 0x03
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	8c 93       	st	X, r24
     d84:	27 c0       	rjmp	.+78     	; 0xdd4 <TMR0_Init+0x136>
        /*TODO: */
    }
    else if(Copy_Timer0->TIMER0_Mode == FAST_PWM){
     d86:	ea 81       	ldd	r30, Y+2	; 0x02
     d88:	fb 81       	ldd	r31, Y+3	; 0x03
     d8a:	80 81       	ld	r24, Z
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	11 f5       	brne	.+68     	; 0xdd4 <TMR0_Init+0x136>
        CHOOSE_FAST_PWM();
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 64       	ori	r24, 0x40	; 64
     d9c:	8c 93       	st	X, r24
     d9e:	a3 e5       	ldi	r26, 0x53	; 83
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	88 60       	ori	r24, 0x08	; 8
     daa:	8c 93       	st	X, r24
            CLR_BIT(TCCR0,TCCR0_COM01);
        #elif FAST_PWM_MODE == FAST_PWM_CLR_ON_COMPARE       //Inverting
            CLR_BIT(TCCR0,TCCR0_COM00);
            SET_BIT(TCCR0,TCCR0_COM01);
        #elif FAST_PWM_MODE == FAST_PWM_SET_ON_COMPARE      //Non Inverting
            SET_BIT(TCCR0,TCCR0_COM00);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	80 61       	ori	r24, 0x10	; 16
     db8:	8c 93       	st	X, r24
            SET_BIT(TCCR0,TCCR0_COM01);
     dba:	a3 e5       	ldi	r26, 0x53	; 83
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 e5       	ldi	r30, 0x53	; 83
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	80 62       	ori	r24, 0x20	; 32
     dc6:	8c 93       	st	X, r24
        #endif
        OCR0 = Copy_Timer0->TMR0_OCR0;
     dc8:	ac e5       	ldi	r26, 0x5C	; 92
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	ea 81       	ldd	r30, Y+2	; 0x02
     dce:	fb 81       	ldd	r31, Y+3	; 0x03
     dd0:	82 81       	ldd	r24, Z+2	; 0x02
     dd2:	8c 93       	st	X, r24
    }
    /*      Clock Select    */
    TMR0_CLK_MASK();
     dd4:	a3 e5       	ldi	r26, 0x53	; 83
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e3 e5       	ldi	r30, 0x53	; 83
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 7f       	andi	r24, 0xF8	; 248
     de0:	8c 93       	st	X, r24
    TMR0_CLK_SELECT(Copy_Timer0->TIMER0_Prescaler);
     de2:	a3 e5       	ldi	r26, 0x53	; 83
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e3 e5       	ldi	r30, 0x53	; 83
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	90 81       	ld	r25, Z
     dec:	ea 81       	ldd	r30, Y+2	; 0x02
     dee:	fb 81       	ldd	r31, Y+3	; 0x03
     df0:	81 81       	ldd	r24, Z+1	; 0x01
     df2:	89 2b       	or	r24, r25
     df4:	8c 93       	st	X, r24
    /*      */
    Local_enuErrorstate = ES_OK;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <TMR0_OvfSetCallBack>:

ES_t TMR0_OvfSetCallBack(TMR0_t *Copy_Timer0){
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <TMR0_OvfSetCallBack+0x6>
     e0e:	0f 92       	push	r0
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	9b 83       	std	Y+3, r25	; 0x03
     e16:	8a 83       	std	Y+2, r24	; 0x02
    	ES_t Local_enuErrorstate = ES_NOK;
     e18:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	19 f4       	brne	.+6      	; 0xe28 <TMR0_OvfSetCallBack+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	0a c0       	rjmp	.+20     	; 0xe3c <TMR0_OvfSetCallBack+0x34>
    }
    else{
        TMR0_OvfCallbackFuncPTR = Copy_Timer0->ActionFunction;
     e28:	ea 81       	ldd	r30, Y+2	; 0x02
     e2a:	fb 81       	ldd	r31, Y+3	; 0x03
     e2c:	83 81       	ldd	r24, Z+3	; 0x03
     e2e:	94 81       	ldd	r25, Z+4	; 0x04
     e30:	90 93 33 01 	sts	0x0133, r25
     e34:	80 93 32 01 	sts	0x0132, r24
        Local_enuErrorstate = ES_OK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <TMR0_CTCSetCallBack>:

ES_t TMR0_CTCSetCallBack(TMR0_t *Copy_Timer0){
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <TMR0_CTCSetCallBack+0x6>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
    	ES_t Local_enuErrorstate = ES_NOK;
     e5a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_Timer0 == NULLPTR){
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	19 f4       	brne	.+6      	; 0xe6a <TMR0_CTCSetCallBack+0x20>
        Local_enuErrorstate = ES_NULL_POINTER;
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <TMR0_CTCSetCallBack+0x34>
    }
    else{
        TMR0_CTCCallbackFuncPTR = Copy_Timer0->ActionFunction;
     e6a:	ea 81       	ldd	r30, Y+2	; 0x02
     e6c:	fb 81       	ldd	r31, Y+3	; 0x03
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	94 81       	ldd	r25, Z+4	; 0x04
     e72:	90 93 35 01 	sts	0x0135, r25
     e76:	80 93 34 01 	sts	0x0134, r24
        Local_enuErrorstate = ES_OK;
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
    }
    return Local_enuErrorstate;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <TMR0_SetDutyCycle>:

ES_t TMR0_SetDutyCycle(u8 Copy_u8DutyCycle){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <TMR0_SetDutyCycle+0x6>
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	8a 83       	std	Y+2, r24	; 0x02
    ES_t Local_enuErrorstate = ES_NOK;
     e98:	19 82       	std	Y+1, r1	; 0x01
    OCR0 = Copy_u8DutyCycle;
     e9a:	ec e5       	ldi	r30, 0x5C	; 92
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	80 83       	st	Z, r24
    Local_enuErrorstate = ES_OK;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorstate;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <__vector_11>:

//OVF ISR
ISR(__vector_11){
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
    if(TMR0_OvfCallbackFuncPTR == NULLPTR){
     edc:	80 91 32 01 	lds	r24, 0x0132
     ee0:	90 91 33 01 	lds	r25, 0x0133
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	29 f0       	breq	.+10     	; 0xef2 <__vector_11+0x40>
        /*  Do Nothing  */
    }
    else{
    TMR0_OvfCallbackFuncPTR();
     ee8:	e0 91 32 01 	lds	r30, 0x0132
     eec:	f0 91 33 01 	lds	r31, 0x0133
     ef0:	09 95       	icall
    }
}
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	ff 91       	pop	r31
     ef8:	ef 91       	pop	r30
     efa:	bf 91       	pop	r27
     efc:	af 91       	pop	r26
     efe:	9f 91       	pop	r25
     f00:	8f 91       	pop	r24
     f02:	7f 91       	pop	r23
     f04:	6f 91       	pop	r22
     f06:	5f 91       	pop	r21
     f08:	4f 91       	pop	r20
     f0a:	3f 91       	pop	r19
     f0c:	2f 91       	pop	r18
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_10>:
//CTC ISR
ISR(__vector_10){
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	11 24       	eor	r1, r1
     f22:	2f 93       	push	r18
     f24:	3f 93       	push	r19
     f26:	4f 93       	push	r20
     f28:	5f 93       	push	r21
     f2a:	6f 93       	push	r22
     f2c:	7f 93       	push	r23
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
     f32:	af 93       	push	r26
     f34:	bf 93       	push	r27
     f36:	ef 93       	push	r30
     f38:	ff 93       	push	r31
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
    if(TMR0_CTCCallbackFuncPTR == NULLPTR){
     f42:	80 91 34 01 	lds	r24, 0x0134
     f46:	90 91 35 01 	lds	r25, 0x0135
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	29 f0       	breq	.+10     	; 0xf58 <__vector_10+0x40>
        /*  Do Nothing  */
    }
    else{
    TMR0_CTCCallbackFuncPTR();
     f4e:	e0 91 34 01 	lds	r30, 0x0134
     f52:	f0 91 35 01 	lds	r31, 0x0135
     f56:	09 95       	icall
    }
}
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <SPI_InitMaster>:
static u8 *pGu8_DataBuffer = NULL;
static u8 Gu8_BufferSize = 0;
static u8 Gu8_BufferIndex = 0;
static void(*SPI_FunctionPTR)(void) = NULLPTR ;

ES_t SPI_InitMaster(void){
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorstate = ES_NOK;
     f88:	19 82       	std	Y+1, r1	; 0x01
    /*  Select Master   */
    SET_BIT(SPCR,SPCR_MSTR);
     f8a:	ad e2       	ldi	r26, 0x2D	; 45
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ed e2       	ldi	r30, 0x2D	; 45
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	80 61       	ori	r24, 0x10	; 16
     f96:	8c 93       	st	X, r24
    /*  Data Order Select  */
            #if SPI_DATA_ORDER == SPI_MSB_FIRST
            CLR_BIT(SPCR,SPCR_DORD);
     f98:	ad e2       	ldi	r26, 0x2D	; 45
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ed e2       	ldi	r30, 0x2D	; 45
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	8f 7d       	andi	r24, 0xDF	; 223
     fa4:	8c 93       	st	X, r24
            #endif
    /*  Select Clock Polarity   */
            #if SPI_CLK_POLARITY  ==  SPI_SCK_HIGH_IDLE
            SET_BIT(SPCR,SPCR_CPOL);
            #elif SPI_CLK_POLARITY  ==  SPI_SCK_LOW_IDLE
            CLR_BIT(SPCR,SPCR_CPOL);
     fa6:	ad e2       	ldi	r26, 0x2D	; 45
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ed e2       	ldi	r30, 0x2D	; 45
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	87 7f       	andi	r24, 0xF7	; 247
     fb2:	8c 93       	st	X, r24
            #endif
    /*  Select Clock Phase  */
            #if SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_LEADING
            CLR_BIT(SPCR,SPCR_CPHA);
     fb4:	ad e2       	ldi	r26, 0x2D	; 45
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ed e2       	ldi	r30, 0x2D	; 45
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	8b 7f       	andi	r24, 0xFB	; 251
     fc0:	8c 93       	st	X, r24
            #elif SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_TRAILING
            SET_BIT(SPCR,SPCR_CPHA);
            #endif
    /*  Choose SCK Freq/8*/
            SET_BIT(SPSR,SPSR_SPI2X);
     fc2:	ae e2       	ldi	r26, 0x2E	; 46
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	ee e2       	ldi	r30, 0x2E	; 46
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	8c 93       	st	X, r24
            SET_BIT(SPCR,SPCR_SPR0);
     fd0:	ad e2       	ldi	r26, 0x2D	; 45
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ed e2       	ldi	r30, 0x2D	; 45
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	8c 93       	st	X, r24
            CLR_BIT(SPCR,SPCR_SPR1);
     fde:	ad e2       	ldi	r26, 0x2D	; 45
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ed e2       	ldi	r30, 0x2D	; 45
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	8c 93       	st	X, r24
    /*  Enable SPI Module  */
    SET_BIT(SPCR,SPCR_SPE);
     fec:	ad e2       	ldi	r26, 0x2D	; 45
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ed e2       	ldi	r30, 0x2D	; 45
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	8c 93       	st	X, r24
    Local_enuErrorstate = ES_OK;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorstate;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <SPI_InitSlave>:

ES_t SPI_InitSlave(void){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    	ES_t Local_enuErrorstate = ES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
        /*  Select Slave   */
    	CLR_BIT(SPCR,SPCR_MSTR);
    1014:	ad e2       	ldi	r26, 0x2D	; 45
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ed e2       	ldi	r30, 0x2D	; 45
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7e       	andi	r24, 0xEF	; 239
    1020:	8c 93       	st	X, r24
    	/*  Data Order Select  */
                #if SPI_DATA_ORDER == SPI_MSB_FIRST
                CLR_BIT(SPCR,SPCR_DORD);
    1022:	ad e2       	ldi	r26, 0x2D	; 45
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ed e2       	ldi	r30, 0x2D	; 45
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	8f 7d       	andi	r24, 0xDF	; 223
    102e:	8c 93       	st	X, r24
                #endif
        /*  Select Clock Polarity   */
                #if SPI_CLK_POLARITY  ==  SPI_SCK_HIGH_IDLE
                SET_BIT(SPCR,SPCR_CPOL);
                #elif SPI_CLK_POLARITY  ==  SPI_SCK_LOW_IDLE
                CLR_BIT(SPCR,SPCR_CPOL);
    1030:	ad e2       	ldi	r26, 0x2D	; 45
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ed e2       	ldi	r30, 0x2D	; 45
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	87 7f       	andi	r24, 0xF7	; 247
    103c:	8c 93       	st	X, r24
                #endif
        /*  Select Clock Phase  */
                #if SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_LEADING
                CLR_BIT(SPCR,SPCR_CPHA);
    103e:	ad e2       	ldi	r26, 0x2D	; 45
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ed e2       	ldi	r30, 0x2D	; 45
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8b 7f       	andi	r24, 0xFB	; 251
    104a:	8c 93       	st	X, r24
                #elif SPI_CLK_PHASE   ==    SPI_DATA_SAMPLED_TRAILING
                SET_BIT(SPCR,SPCR_CPHA);
                #endif
        /*  Enable SPI Module  */
        SET_BIT(SPCR,SPCR_SPE);
    104c:	ad e2       	ldi	r26, 0x2D	; 45
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ed e2       	ldi	r30, 0x2D	; 45
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	8c 93       	st	X, r24
    return Local_enuErrorstate;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <SPI_Transceive>:




ES_t SPI_Transceive(u8 Data,u8 *pRxData)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <SPI_Transceive+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <SPI_Transceive+0x8>
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	7c 83       	std	Y+4, r23	; 0x04
    1074:	6b 83       	std	Y+3, r22	; 0x03
    ES_t Local_enuErrorState = ES_OK;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01

        if(SPI_State == SPI_BUSY){
    107a:	80 91 13 01 	lds	r24, 0x0113
    107e:	88 23       	and	r24, r24
    1080:	19 f4       	brne	.+6      	; 0x1088 <SPI_Transceive+0x24>
            Local_enuErrorState = ES_BUSY_FUNCTION;
    1082:	85 e0       	ldi	r24, 0x05	; 5
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <SPI_Transceive+0x4c>
        }
        else{
        SPI_State = SPI_BUSY;
    1088:	10 92 13 01 	sts	0x0113, r1
        /* Set SS low to select slave */
        //DIO_SetPinValue(PORTB,PIN4,LOW);
        
        /* Write data to SPI data register */
        SPDR = Data;
    108c:	ef e2       	ldi	r30, 0x2F	; 47
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	80 83       	st	Z, r24
        
        /* Wait for the SPIF flag to be set */
        while (GET_BIT(SPSR, SPSR_SPIF) == 0);
    1094:	ee e2       	ldi	r30, 0x2E	; 46
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	dc f7       	brge	.-10     	; 0x1094 <SPI_Transceive+0x30>
        
        /* Read received data from SPI data register */
        *pRxData = SPDR;
    109e:	ef e2       	ldi	r30, 0x2F	; 47
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	eb 81       	ldd	r30, Y+3	; 0x03
    10a6:	fc 81       	ldd	r31, Y+4	; 0x04
    10a8:	80 83       	st	Z, r24
        
        /* Set SS high to deselect slave */
        //DIO_SetPinValue(PORTB,PIN4,HIGH);
        SPI_State = SPI_IDLE;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 13 01 	sts	0x0113, r24
    }
    return Local_enuErrorState;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <SPI_SendBufferSynch>:

ES_t SPI_SendBufferSynch(u8 *DataBuffer,u8 BufferSize){
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <SPI_SendBufferSynch+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <SPI_SendBufferSynch+0x8>
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9c 83       	std	Y+4, r25	; 0x04
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	6d 83       	std	Y+5, r22	; 0x05
    ES_t Local_enuErrorState = ES_NOK;
    10d4:	1a 82       	std	Y+2, r1	; 0x02
    if(DataBuffer == NULLPTR){
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	19 f4       	brne	.+6      	; 0x10e4 <SPI_SendBufferSynch+0x24>
        Local_enuErrorState = ES_NULL_POINTER;
    10de:	82 e0       	ldi	r24, 0x02	; 2
    10e0:	8a 83       	std	Y+2, r24	; 0x02
    10e2:	26 c0       	rjmp	.+76     	; 0x1130 <SPI_SendBufferSynch+0x70>
    }
    else{
        if(SPI_State == SPI_BUSY){
    10e4:	80 91 13 01 	lds	r24, 0x0113
    10e8:	88 23       	and	r24, r24
    10ea:	19 f4       	brne	.+6      	; 0x10f2 <SPI_SendBufferSynch+0x32>
            Local_enuErrorState = ES_BUSY_FUNCTION;
    10ec:	85 e0       	ldi	r24, 0x05	; 5
    10ee:	8a 83       	std	Y+2, r24	; 0x02
    10f0:	1c c0       	rjmp	.+56     	; 0x112a <SPI_SendBufferSynch+0x6a>
        }
        else{
            SPI_State = SPI_BUSY;
    10f2:	10 92 13 01 	sts	0x0113, r1
            u8 Local_Index = 0;
    10f6:	19 82       	std	Y+1, r1	; 0x01
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <SPI_SendBufferSynch+0x62>
            while(Local_Index < BufferSize){
                Local_enuErrorState = SPI_Transceive(DataBuffer[Local_Index],NULLPTR);
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	80 81       	ld	r24, Z
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    1114:	8a 83       	std	Y+2, r24	; 0x02
                if (Local_enuErrorState != ES_OK) {
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	39 f4       	brne	.+14     	; 0x112a <SPI_SendBufferSynch+0x6a>
                break;
                }
                Local_Index++;
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    1120:	89 83       	std	Y+1, r24	; 0x01
            Local_enuErrorState = ES_BUSY_FUNCTION;
        }
        else{
            SPI_State = SPI_BUSY;
            u8 Local_Index = 0;
            while(Local_Index < BufferSize){
    1122:	99 81       	ldd	r25, Y+1	; 0x01
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	98 17       	cp	r25, r24
    1128:	40 f3       	brcs	.-48     	; 0x10fa <SPI_SendBufferSynch+0x3a>
                break;
                }
                Local_Index++;
            }
        }
        SPI_State = SPI_IDLE;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 13 01 	sts	0x0113, r24
    }
    return Local_enuErrorState;
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <SPI_SendBufferASynch>:

ES_t SPI_SendBufferASynch(u8 *DataBuffer, u8 BufferSize, void(*LocalFunc)(void)){
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <SPI_SendBufferASynch+0x6>
    1148:	00 d0       	rcall	.+0      	; 0x114a <SPI_SendBufferASynch+0x8>
    114a:	00 d0       	rcall	.+0      	; 0x114c <SPI_SendBufferASynch+0xa>
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	9b 83       	std	Y+3, r25	; 0x03
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6c 83       	std	Y+4, r22	; 0x04
    1156:	5e 83       	std	Y+6, r21	; 0x06
    1158:	4d 83       	std	Y+5, r20	; 0x05
    ES_t Local_enuErrorState = ES_OK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01
    if(DataBuffer == NULLPTR || LocalFunc == NULLPTR){
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	21 f0       	breq	.+8      	; 0x116e <SPI_SendBufferASynch+0x2c>
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	19 f4       	brne	.+6      	; 0x1174 <SPI_SendBufferASynch+0x32>
        Local_enuErrorState = ES_NULL_POINTER;
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	37 c0       	rjmp	.+110    	; 0x11e2 <SPI_SendBufferASynch+0xa0>
    }
    else{
        if(SPI_State == SPI_BUSY){
    1174:	80 91 13 01 	lds	r24, 0x0113
    1178:	88 23       	and	r24, r24
    117a:	19 f4       	brne	.+6      	; 0x1182 <SPI_SendBufferASynch+0x40>
            Local_enuErrorState = ES_BUSY_FUNCTION;
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	30 c0       	rjmp	.+96     	; 0x11e2 <SPI_SendBufferASynch+0xa0>
        }
        else{
            SPI_State = SPI_BUSY;
    1182:	10 92 13 01 	sts	0x0113, r1
            pGu8_DataBuffer = DataBuffer;
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	90 93 37 01 	sts	0x0137, r25
    118e:	80 93 36 01 	sts	0x0136, r24
            Gu8_BufferSize = BufferSize;
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	80 93 38 01 	sts	0x0138, r24
            SPI_FunctionPTR = LocalFunc;
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	90 93 3b 01 	sts	0x013B, r25
    11a0:	80 93 3a 01 	sts	0x013A, r24
            Gu8_BufferIndex = 0;
    11a4:	10 92 39 01 	sts	0x0139, r1
            /*  Enable SPI Interrupt    */
            SET_BIT(SPCR,SPCR_SPIE);
    11a8:	ad e2       	ldi	r26, 0x2D	; 45
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ed e2       	ldi	r30, 0x2D	; 45
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	8c 93       	st	X, r24
            /*  Start Transmission  */
            SPDR = pGu8_DataBuffer[Gu8_BufferIndex];
    11b6:	af e2       	ldi	r26, 0x2F	; 47
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	20 91 36 01 	lds	r18, 0x0136
    11be:	30 91 37 01 	lds	r19, 0x0137
    11c2:	80 91 39 01 	lds	r24, 0x0139
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	f9 01       	movw	r30, r18
    11cc:	e8 0f       	add	r30, r24
    11ce:	f9 1f       	adc	r31, r25
    11d0:	80 81       	ld	r24, Z
    11d2:	8c 93       	st	X, r24
            Gu8_BufferIndex++;
    11d4:	80 91 39 01 	lds	r24, 0x0139
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	80 93 39 01 	sts	0x0139, r24
            Local_enuErrorState = ES_OK;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
        }
    }
    return Local_enuErrorState;
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e4:	26 96       	adiw	r28, 0x06	; 6
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <SPI_EnableInterrupt>:



ES_t SPI_EnableInterrupt(void){
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SPCR,SPCR_SPIE);
    11fe:	ad e2       	ldi	r26, 0x2D	; 45
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	ed e2       	ldi	r30, 0x2D	; 45
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
    return ES_OK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <SPI_DisableInterrupt>:

ES_t SPI_DisableInterrupt(void){
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SPCR,SPCR_SPIE);
    121c:	ad e2       	ldi	r26, 0x2D	; 45
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ed e2       	ldi	r30, 0x2D	; 45
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8f 77       	andi	r24, 0x7F	; 127
    1228:	8c 93       	st	X, r24
    return ES_OK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <SPI_GetStatus>:

ES_t SPI_GetStatus(u8* Copy_u8Status)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <SPI_GetStatus+0x6>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    /* Check if the input argument is NULL */
    if (Copy_u8Status == NULLPTR) {
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	19 f4       	brne	.+6      	; 0x1250 <SPI_GetStatus+0x1e>
        return ES_NULL_POINTER;
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	8b 83       	std	Y+3, r24	; 0x03
    124e:	0f c0       	rjmp	.+30     	; 0x126e <SPI_GetStatus+0x3c>
    }
    
    /* Check if SPI is busy */
    if (GET_BIT(SPSR, SPSR_SPIF) == 0) {
    1250:	ee e2       	ldi	r30, 0x2E	; 46
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	24 f0       	brlt	.+8      	; 0x1262 <SPI_GetStatus+0x30>
        /* SPI is busy */
        *Copy_u8Status = SPI_BUSY;
    125a:	e9 81       	ldd	r30, Y+1	; 0x01
    125c:	fa 81       	ldd	r31, Y+2	; 0x02
    125e:	10 82       	st	Z, r1
    1260:	04 c0       	rjmp	.+8      	; 0x126a <SPI_GetStatus+0x38>
    } else {
        /* SPI is not busy */
        *Copy_u8Status = SPI_IDLE;
    1262:	e9 81       	ldd	r30, Y+1	; 0x01
    1264:	fa 81       	ldd	r31, Y+2	; 0x02
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    }
    
    /* Return success status */
    return ES_OK;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	8b 83       	std	Y+3, r24	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <__vector_12>:


ISR(__vector_12){
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	2f 93       	push	r18
    1288:	3f 93       	push	r19
    128a:	4f 93       	push	r20
    128c:	5f 93       	push	r21
    128e:	6f 93       	push	r22
    1290:	7f 93       	push	r23
    1292:	8f 93       	push	r24
    1294:	9f 93       	push	r25
    1296:	af 93       	push	r26
    1298:	bf 93       	push	r27
    129a:	ef 93       	push	r30
    129c:	ff 93       	push	r31
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    /* Check if all data has been sent */
    if(Gu8_BufferIndex < Gu8_BufferSize){
    12a6:	90 91 39 01 	lds	r25, 0x0139
    12aa:	80 91 38 01 	lds	r24, 0x0138
    12ae:	98 17       	cp	r25, r24
    12b0:	a8 f4       	brcc	.+42     	; 0x12dc <__vector_12+0x60>
        /* Send the next byte of data */
        SPDR = pGu8_DataBuffer[Gu8_BufferIndex];
    12b2:	af e2       	ldi	r26, 0x2F	; 47
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	20 91 36 01 	lds	r18, 0x0136
    12ba:	30 91 37 01 	lds	r19, 0x0137
    12be:	80 91 39 01 	lds	r24, 0x0139
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	e8 0f       	add	r30, r24
    12ca:	f9 1f       	adc	r31, r25
    12cc:	80 81       	ld	r24, Z
    12ce:	8c 93       	st	X, r24
        Gu8_BufferIndex++;
    12d0:	80 91 39 01 	lds	r24, 0x0139
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	80 93 39 01 	sts	0x0139, r24
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <__vector_12+0x7e>
    }
    else{
        /*  Disable SPI Interrupt   */
        CLR_BIT(SPCR,SPCR_SPIE);
    12dc:	ad e2       	ldi	r26, 0x2D	; 45
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	ed e2       	ldi	r30, 0x2D	; 45
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	8c 93       	st	X, r24
        /*  Reset SPI State */
        SPI_State = SPI_IDLE;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 13 01 	sts	0x0113, r24
        /*  Call Back Fucntion  */
        SPI_FunctionPTR();
    12f0:	e0 91 3a 01 	lds	r30, 0x013A
    12f4:	f0 91 3b 01 	lds	r31, 0x013B
    12f8:	09 95       	icall
    }
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	ff 91       	pop	r31
    1300:	ef 91       	pop	r30
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	9f 91       	pop	r25
    1308:	8f 91       	pop	r24
    130a:	7f 91       	pop	r23
    130c:	6f 91       	pop	r22
    130e:	5f 91       	pop	r21
    1310:	4f 91       	pop	r20
    1312:	3f 91       	pop	r19
    1314:	2f 91       	pop	r18
    1316:	0f 90       	pop	r0
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	0f 90       	pop	r0
    131c:	1f 90       	pop	r1
    131e:	18 95       	reti

00001320 <PORT_Init>:
*@brief Initializes the PORT peripheral.
This function configures the direction and initial values of the PORTA, PORTB, PORTC, and PORTD registers.
*@return ES_t Returns ES_OK if the initialization was successful, otherwise ES_NOK.
*/
ES_t PORT_Init(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
   ES_t Local_enuErrorstate = ES_NOK;
    132a:	19 82       	std	Y+1, r1	; 0x01
	/*DIRECTION*/
   DDRA_REG = PORTA_DIR ;
    132c:	ea e3       	ldi	r30, 0x3A	; 58
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	10 82       	st	Z, r1
   DDRB_REG = PORTB_DIR ;
    1332:	e7 e3       	ldi	r30, 0x37	; 55
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 eb       	ldi	r24, 0xB0	; 176
    1338:	80 83       	st	Z, r24
   DDRC_REG = PORTC_DIR ;
    133a:	e4 e3       	ldi	r30, 0x34	; 52
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	10 82       	st	Z, r1
   DDRD_REG = PORTD_DIR ;
    1340:	e1 e3       	ldi	r30, 0x31	; 49
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	80 83       	st	Z, r24
   /*INITIAL VALUE*/
   PORTA_REG = PORTA_VALUE ;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1
   PORTB_REG = PORTB_VALUE ;
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	10 82       	st	Z, r1
   PORTC_REG = PORTC_VALUE ;
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	10 82       	st	Z, r1
   PORTD_REG = PORTD_VALUE ;
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	10 82       	st	Z, r1

   Local_enuErrorstate = ES_OK;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    1364:	89 81       	ldd	r24, Y+1	; 0x01

}
    1366:	0f 90       	pop	r0
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <GIE_Enable>:
/****************************************************************************************/

#include "GIE_interface.h"


ES_t GIE_Enable(void){
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1378:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(SREG,SREG_GIE);
    137a:	af e5       	ldi	r26, 0x5F	; 95
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ef e5       	ldi	r30, 0x5F	; 95
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	80 68       	ori	r24, 0x80	; 128
    1386:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <GIE_Disable>:

ES_t GIE_Disable(void){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	CLR_BIT(SREG,SREG_GIE);
    13a2:	af e5       	ldi	r26, 0x5F	; 95
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ef e5       	ldi	r30, 0x5F	; 95
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 77       	andi	r24, 0x7F	; 127
    13ae:	8c 93       	st	X, r24
	Local_enuErrorstate = ES_OK;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <EXTI_INT0Init>:
static void (*INT2_FunctionPointer) (void) = NULLPTR;



/*		External Interrupt 0 APIs   	*/
ES_t EXTI_INT0Init(u8 Local_u8Sense){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <EXTI_INT0Init+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <EXTI_INT0Init+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    13cc:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <EXTI_INT0Init+0x18>
    13d4:	5d c0       	rjmp	.+186    	; 0x1490 <EXTI_INT0Init+0xd2>

	switch(Local_u8Sense){
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3c 83       	std	Y+4, r19	; 0x04
    13de:	2b 83       	std	Y+3, r18	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	21 f1       	breq	.+72     	; 0x1432 <EXTI_INT0Init+0x74>
    13ea:	2b 81       	ldd	r18, Y+3	; 0x03
    13ec:	3c 81       	ldd	r19, Y+4	; 0x04
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <EXTI_INT0Init+0x40>
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	9c 81       	ldd	r25, Y+4	; 0x04
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	61 f0       	breq	.+24     	; 0x1414 <EXTI_INT0Init+0x56>
    13fc:	46 c0       	rjmp	.+140    	; 0x148a <EXTI_INT0Init+0xcc>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	21 f1       	breq	.+72     	; 0x1450 <EXTI_INT0Init+0x92>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	71 f1       	breq	.+92     	; 0x146e <EXTI_INT0Init+0xb0>
    1412:	3b c0       	rjmp	.+118    	; 0x148a <EXTI_INT0Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1414:	a5 e5       	ldi	r26, 0x55	; 85
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e5       	ldi	r30, 0x55	; 85
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	8e 7f       	andi	r24, 0xFE	; 254
    1420:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1422:	a5 e5       	ldi	r26, 0x55	; 85
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	8d 7f       	andi	r24, 0xFD	; 253
    142e:	8c 93       	st	X, r24
    1430:	2c c0       	rjmp	.+88     	; 0x148a <EXTI_INT0Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    1432:	a5 e5       	ldi	r26, 0x55	; 85
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e5 e5       	ldi	r30, 0x55	; 85
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	81 60       	ori	r24, 0x01	; 1
    143e:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8d 7f       	andi	r24, 0xFD	; 253
    144c:	8c 93       	st	X, r24
    144e:	1d c0       	rjmp	.+58     	; 0x148a <EXTI_INT0Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC00);
    1450:	a5 e5       	ldi	r26, 0x55	; 85
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e5 e5       	ldi	r30, 0x55	; 85
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8e 7f       	andi	r24, 0xFE	; 254
    145c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    145e:	a5 e5       	ldi	r26, 0x55	; 85
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e5       	ldi	r30, 0x55	; 85
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	8c 93       	st	X, r24
    146c:	0e c0       	rjmp	.+28     	; 0x148a <EXTI_INT0Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC00);
    146e:	a5 e5       	ldi	r26, 0x55	; 85
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e5       	ldi	r30, 0x55	; 85
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    147c:	a5 e5       	ldi	r26, 0x55	; 85
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e5       	ldi	r30, 0x55	; 85
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	82 60       	ori	r24, 0x02	; 2
    1488:	8c 93       	st	X, r24
			break;
		}
			Local_enuErrorstate = ES_OK;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <EXTI_INT0Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT0);
    1494:	ab e5       	ldi	r26, 0x5B	; 91
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e5       	ldi	r30, 0x5B	; 91
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	80 64       	ori	r24, 0x40	; 64
    14a0:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <EXTI_u8INT0Status>:

ES_t   EXTI_u8INT0Status(u8 *Copy_u8Status){
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <EXTI_u8INT0Status+0x6>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9b 83       	std	Y+3, r25	; 0x03
    14c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    14c2:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF0) == 1){
    14c4:	ea e5       	ldi	r30, 0x5A	; 90
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	82 95       	swap	r24
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	83 70       	andi	r24, 0x03	; 3
    14d2:	88 2f       	mov	r24, r24
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	81 70       	andi	r24, 0x01	; 1
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	88 23       	and	r24, r24
    14dc:	31 f0       	breq	.+12     	; 0x14ea <EXTI_u8INT0Status+0x38>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    14de:	ea 81       	ldd	r30, Y+2	; 0x02
    14e0:	fb 81       	ldd	r31, Y+3	; 0x03
    14e2:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	13 c0       	rjmp	.+38     	; 0x1510 <EXTI_u8INT0Status+0x5e>
	}
	else if(GET_BIT(GIFR,GIFR_INTF0) == 0){
    14ea:	ea e5       	ldi	r30, 0x5A	; 90
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	82 95       	swap	r24
    14f2:	86 95       	lsr	r24
    14f4:	86 95       	lsr	r24
    14f6:	83 70       	andi	r24, 0x03	; 3
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	81 70       	andi	r24, 0x01	; 1
    14fe:	90 70       	andi	r25, 0x00	; 0
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	31 f4       	brne	.+12     	; 0x1510 <EXTI_u8INT0Status+0x5e>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <EXTI_SetCallBackINT0>:

ES_t EXTI_SetCallBackINT0( void(*LocalPtr)(void) ){
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <EXTI_SetCallBackINT0+0x6>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	9b 83       	std	Y+3, r25	; 0x03
    152c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    152e:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	9b 81       	ldd	r25, Y+3	; 0x03
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	49 f0       	breq	.+18     	; 0x154a <EXTI_SetCallBackINT0+0x2c>
	INT0_FunctionPointer = LocalPtr;
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	9b 81       	ldd	r25, Y+3	; 0x03
    153c:	90 93 3d 01 	sts	0x013D, r25
    1540:	80 93 3c 01 	sts	0x013C, r24
	Local_enuErrorstate = ES_OK;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	02 c0       	rjmp	.+4      	; 0x154e <EXTI_SetCallBackINT0+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <__vector_1>:

ISR(__vector_1){
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
	INT0_FunctionPointer();
    1586:	e0 91 3c 01 	lds	r30, 0x013C
    158a:	f0 91 3d 01 	lds	r31, 0x013D
    158e:	09 95       	icall
}
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	bf 91       	pop	r27
    159a:	af 91       	pop	r26
    159c:	9f 91       	pop	r25
    159e:	8f 91       	pop	r24
    15a0:	7f 91       	pop	r23
    15a2:	6f 91       	pop	r22
    15a4:	5f 91       	pop	r21
    15a6:	4f 91       	pop	r20
    15a8:	3f 91       	pop	r19
    15aa:	2f 91       	pop	r18
    15ac:	0f 90       	pop	r0
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	0f 90       	pop	r0
    15b2:	1f 90       	pop	r1
    15b4:	18 95       	reti

000015b6 <EXTI_INT1Init>:


/*		External Interrupt 1 APIs   	*/
ES_t EXTI_INT1Init(u8 Local_u8Sense){
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <EXTI_INT1Init+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <EXTI_INT1Init+0x8>
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    15c4:	19 82       	std	Y+1, r1	; 0x01
	/*Select Sense Control*/
	if(Local_u8Sense <= 3){
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <EXTI_INT1Init+0x18>
    15cc:	5d c0       	rjmp	.+186    	; 0x1688 <EXTI_INT1Init+0xd2>
	switch(Local_u8Sense){
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3c 83       	std	Y+4, r19	; 0x04
    15d6:	2b 83       	std	Y+3, r18	; 0x03
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	9c 81       	ldd	r25, Y+4	; 0x04
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	21 f1       	breq	.+72     	; 0x162a <EXTI_INT1Init+0x74>
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <EXTI_INT1Init+0x40>
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	61 f0       	breq	.+24     	; 0x160c <EXTI_INT1Init+0x56>
    15f4:	46 c0       	rjmp	.+140    	; 0x1682 <EXTI_INT1Init+0xcc>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	21 f1       	breq	.+72     	; 0x1648 <EXTI_INT1Init+0x92>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	71 f1       	breq	.+92     	; 0x1666 <EXTI_INT1Init+0xb0>
    160a:	3b c0       	rjmp	.+118    	; 0x1682 <EXTI_INT1Init+0xcc>
		case LOW_LEVEL:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    160c:	a5 e5       	ldi	r26, 0x55	; 85
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e5 e5       	ldi	r30, 0x55	; 85
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8b 7f       	andi	r24, 0xFB	; 251
    1618:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    161a:	a5 e5       	ldi	r26, 0x55	; 85
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	e5 e5       	ldi	r30, 0x55	; 85
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	87 7f       	andi	r24, 0xF7	; 247
    1626:	8c 93       	st	X, r24
    1628:	2c c0       	rjmp	.+88     	; 0x1682 <EXTI_INT1Init+0xcc>
			break;
		case ON_CHANGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    162a:	a5 e5       	ldi	r26, 0x55	; 85
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e5       	ldi	r30, 0x55	; 85
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	84 60       	ori	r24, 0x04	; 4
    1636:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    1638:	a5 e5       	ldi	r26, 0x55	; 85
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e5 e5       	ldi	r30, 0x55	; 85
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	87 7f       	andi	r24, 0xF7	; 247
    1644:	8c 93       	st	X, r24
    1646:	1d c0       	rjmp	.+58     	; 0x1682 <EXTI_INT1Init+0xcc>
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,MCUCR_ISC10);
    1648:	a5 e5       	ldi	r26, 0x55	; 85
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e5       	ldi	r30, 0x55	; 85
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8b 7f       	andi	r24, 0xFB	; 251
    1654:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1656:	a5 e5       	ldi	r26, 0x55	; 85
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e5 e5       	ldi	r30, 0x55	; 85
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 60       	ori	r24, 0x08	; 8
    1662:	8c 93       	st	X, r24
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <EXTI_INT1Init+0xcc>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,MCUCR_ISC10);
    1666:	a5 e5       	ldi	r26, 0x55	; 85
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e5       	ldi	r30, 0x55	; 85
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	84 60       	ori	r24, 0x04	; 4
    1672:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    1674:	a5 e5       	ldi	r26, 0x55	; 85
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e5       	ldi	r30, 0x55	; 85
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	88 60       	ori	r24, 0x08	; 8
    1680:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	02 c0       	rjmp	.+4      	; 0x168c <EXTI_INT1Init+0xd6>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT1);
    168c:	ab e5       	ldi	r26, 0x5B	; 91
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e5       	ldi	r30, 0x5B	; 91
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    169a:	89 81       	ldd	r24, Y+1	; 0x01
}
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <EXTI_u8INT1Status>:

ES_t EXTI_u8INT1Status(u8 *Copy_u8Status){
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	00 d0       	rcall	.+0      	; 0x16b0 <EXTI_u8INT1Status+0x6>
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	9b 83       	std	Y+3, r25	; 0x03
    16b8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    16ba:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF1) == 1){
    16bc:	ea e5       	ldi	r30, 0x5A	; 90
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	88 1f       	adc	r24, r24
    16c4:	88 27       	eor	r24, r24
    16c6:	88 1f       	adc	r24, r24
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	31 f4       	brne	.+12     	; 0x16d8 <EXTI_u8INT1Status+0x2e>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    16cc:	ea 81       	ldd	r30, Y+2	; 0x02
    16ce:	fb 81       	ldd	r31, Y+3	; 0x03
    16d0:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	0b c0       	rjmp	.+22     	; 0x16ee <EXTI_u8INT1Status+0x44>
	}
	else if(GET_BIT(GIFR,GIFR_INTF1) == 0){
    16d8:	ea e5       	ldi	r30, 0x5A	; 90
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 23       	and	r24, r24
    16e0:	34 f0       	brlt	.+12     	; 0x16ee <EXTI_u8INT1Status+0x44>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    16e2:	ea 81       	ldd	r30, Y+2	; 0x02
    16e4:	fb 81       	ldd	r31, Y+3	; 0x03
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret

000016fc <EXTI_SetCallBackINT1>:

ES_t EXTI_SetCallBackINT1( void(*LocalPtr)(void) ){
    16fc:	df 93       	push	r29
    16fe:	cf 93       	push	r28
    1700:	00 d0       	rcall	.+0      	; 0x1702 <EXTI_SetCallBackINT1+0x6>
    1702:	0f 92       	push	r0
    1704:	cd b7       	in	r28, 0x3d	; 61
    1706:	de b7       	in	r29, 0x3e	; 62
    1708:	9b 83       	std	Y+3, r25	; 0x03
    170a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    170c:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	49 f0       	breq	.+18     	; 0x1728 <EXTI_SetCallBackINT1+0x2c>
	INT1_FunctionPointer = LocalPtr;
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	90 93 3f 01 	sts	0x013F, r25
    171e:	80 93 3e 01 	sts	0x013E, r24
	Local_enuErrorstate = ES_OK;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	02 c0       	rjmp	.+4      	; 0x172c <EXTI_SetCallBackINT1+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    1728:	82 e0       	ldi	r24, 0x02	; 2
    172a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    172c:	89 81       	ldd	r24, Y+1	; 0x01
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <__vector_2>:

ISR(__vector_2){
    173a:	1f 92       	push	r1
    173c:	0f 92       	push	r0
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	0f 92       	push	r0
    1742:	11 24       	eor	r1, r1
    1744:	2f 93       	push	r18
    1746:	3f 93       	push	r19
    1748:	4f 93       	push	r20
    174a:	5f 93       	push	r21
    174c:	6f 93       	push	r22
    174e:	7f 93       	push	r23
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	af 93       	push	r26
    1756:	bf 93       	push	r27
    1758:	ef 93       	push	r30
    175a:	ff 93       	push	r31
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	INT1_FunctionPointer();
    1764:	e0 91 3e 01 	lds	r30, 0x013E
    1768:	f0 91 3f 01 	lds	r31, 0x013F
    176c:	09 95       	icall
}
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	ff 91       	pop	r31
    1774:	ef 91       	pop	r30
    1776:	bf 91       	pop	r27
    1778:	af 91       	pop	r26
    177a:	9f 91       	pop	r25
    177c:	8f 91       	pop	r24
    177e:	7f 91       	pop	r23
    1780:	6f 91       	pop	r22
    1782:	5f 91       	pop	r21
    1784:	4f 91       	pop	r20
    1786:	3f 91       	pop	r19
    1788:	2f 91       	pop	r18
    178a:	0f 90       	pop	r0
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	0f 90       	pop	r0
    1790:	1f 90       	pop	r1
    1792:	18 95       	reti

00001794 <EXTI_INT2Init>:


/*		External Interrupt 2 APIs   	*/
ES_t EXTI_INT2Init(u8 Local_u8Sense){
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <EXTI_INT2Init+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <EXTI_INT2Init+0x8>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    17a2:	19 82       	std	Y+1, r1	; 0x01
		if(Local_u8Sense <= 3){
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	84 30       	cpi	r24, 0x04	; 4
    17a8:	10 f5       	brcc	.+68     	; 0x17ee <EXTI_INT2Init+0x5a>
	/*Select Sense Control*/
	switch(Local_u8Sense){
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	3c 83       	std	Y+4, r19	; 0x04
    17b2:	2b 83       	std	Y+3, r18	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	91 05       	cpc	r25, r1
    17bc:	31 f0       	breq	.+12     	; 0x17ca <EXTI_INT2Init+0x36>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	49 f0       	breq	.+18     	; 0x17da <EXTI_INT2Init+0x46>
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <EXTI_INT2Init+0x54>
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    17ca:	a4 e5       	ldi	r26, 0x54	; 84
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e4 e5       	ldi	r30, 0x54	; 84
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7b       	andi	r24, 0xBF	; 191
    17d6:	8c 93       	st	X, r24
    17d8:	07 c0       	rjmp	.+14     	; 0x17e8 <EXTI_INT2Init+0x54>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    17da:	a4 e5       	ldi	r26, 0x54	; 84
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e4 e5       	ldi	r30, 0x54	; 84
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <EXTI_INT2Init+0x5e>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Peripheral Interrupt Enable*/
	SET_BIT(GICR,GICR_INT2);
    17f2:	ab e5       	ldi	r26, 0x5B	; 91
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e5       	ldi	r30, 0x5B	; 91
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 62       	ori	r24, 0x20	; 32
    17fe:	8c 93       	st	X, r24
	return Local_enuErrorstate;
    1800:	89 81       	ldd	r24, Y+1	; 0x01
}
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <EXTI_u8INT2Status>:


ES_t EXTI_u8INT2Status(u8 *Copy_u8Status){
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <EXTI_u8INT2Status+0x6>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9b 83       	std	Y+3, r25	; 0x03
    181e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1820:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(GIFR,GIFR_INTF2) == 1){
    1822:	ea e5       	ldi	r30, 0x5A	; 90
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	82 95       	swap	r24
    182a:	86 95       	lsr	r24
    182c:	87 70       	andi	r24, 0x07	; 7
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	90 70       	andi	r25, 0x00	; 0
    1836:	88 23       	and	r24, r24
    1838:	31 f0       	breq	.+12     	; 0x1846 <EXTI_u8INT2Status+0x36>
		*Copy_u8Status = INTERRUPT_TRIGGERED;
    183a:	ea 81       	ldd	r30, Y+2	; 0x02
    183c:	fb 81       	ldd	r31, Y+3	; 0x03
    183e:	10 82       	st	Z, r1
		Local_enuErrorstate = ES_OK;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	12 c0       	rjmp	.+36     	; 0x186a <EXTI_u8INT2Status+0x5a>
	}
	else if(GET_BIT(GIFR,GIFR_INTF2) == 0){
    1846:	ea e5       	ldi	r30, 0x5A	; 90
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	82 95       	swap	r24
    184e:	86 95       	lsr	r24
    1850:	87 70       	andi	r24, 0x07	; 7
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	90 70       	andi	r25, 0x00	; 0
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	31 f4       	brne	.+12     	; 0x186a <EXTI_u8INT2Status+0x5a>
		*Copy_u8Status = INTERRUPT_NOT_TRIGGERED;
    185e:	ea 81       	ldd	r30, Y+2	; 0x02
    1860:	fb 81       	ldd	r31, Y+3	; 0x03
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 83       	st	Z, r24
		Local_enuErrorstate = ES_OK;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <EXTI_SetCallBackINT2>:

ES_t EXTI_SetCallBackINT2( void(*LocalPtr)(void) ){
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <EXTI_SetCallBackINT2+0x6>
    187e:	0f 92       	push	r0
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	9b 83       	std	Y+3, r25	; 0x03
    1886:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1888:	19 82       	std	Y+1, r1	; 0x01
	if(LocalPtr != NULLPTR){
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	49 f0       	breq	.+18     	; 0x18a4 <EXTI_SetCallBackINT2+0x2c>
	INT2_FunctionPointer = LocalPtr;
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	90 93 41 01 	sts	0x0141, r25
    189a:	80 93 40 01 	sts	0x0140, r24
	Local_enuErrorstate = ES_OK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <EXTI_SetCallBackINT2+0x30>
	}
	else{
		Local_enuErrorstate = ES_NULL_POINTER;
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <__vector_3>:

ISR(__vector_3){
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	INT2_FunctionPointer();
    18e0:	e0 91 40 01 	lds	r30, 0x0140
    18e4:	f0 91 41 01 	lds	r31, 0x0141
    18e8:	09 95       	icall
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <EXTI_DisableINT>:


ES_t EXTI_DisableINT(u8 Local_u8INT){
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <EXTI_DisableINT+0x6>
    1916:	00 d0       	rcall	.+0      	; 0x1918 <EXTI_DisableINT+0x8>
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    191e:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8INT <= 2){
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	83 30       	cpi	r24, 0x03	; 3
    1924:	68 f5       	brcc	.+90     	; 0x1980 <EXTI_DisableINT+0x70>
		switch(Local_u8INT){
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	3c 83       	std	Y+4, r19	; 0x04
    192e:	2b 83       	std	Y+3, r18	; 0x03
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	9c 81       	ldd	r25, Y+4	; 0x04
    1934:	81 30       	cpi	r24, 0x01	; 1
    1936:	91 05       	cpc	r25, r1
    1938:	89 f0       	breq	.+34     	; 0x195c <EXTI_DisableINT+0x4c>
    193a:	2b 81       	ldd	r18, Y+3	; 0x03
    193c:	3c 81       	ldd	r19, Y+4	; 0x04
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	a1 f0       	breq	.+40     	; 0x196c <EXTI_DisableINT+0x5c>
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	b9 f4       	brne	.+46     	; 0x197a <EXTI_DisableINT+0x6a>
			case INT0:	CLR_BIT(GICR,GICR_INT0);	break;
    194c:	ab e5       	ldi	r26, 0x5B	; 91
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	eb e5       	ldi	r30, 0x5B	; 91
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8f 7b       	andi	r24, 0xBF	; 191
    1958:	8c 93       	st	X, r24
    195a:	0f c0       	rjmp	.+30     	; 0x197a <EXTI_DisableINT+0x6a>
			case INT1:	CLR_BIT(GICR,GICR_INT1);	break;
    195c:	ab e5       	ldi	r26, 0x5B	; 91
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e5       	ldi	r30, 0x5B	; 91
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 77       	andi	r24, 0x7F	; 127
    1968:	8c 93       	st	X, r24
    196a:	07 c0       	rjmp	.+14     	; 0x197a <EXTI_DisableINT+0x6a>
			case INT2:	CLR_BIT(GICR,GICR_INT2);	break;
    196c:	ab e5       	ldi	r26, 0x5B	; 91
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	eb e5       	ldi	r30, 0x5B	; 91
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7d       	andi	r24, 0xDF	; 223
    1978:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	89 83       	std	Y+1, r24	; 0x01
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <EXTI_DisableINT+0x74>
	}
	else{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1984:	89 81       	ldd	r24, Y+1	; 0x01
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <DIO_SetPinDirection>:
#include "DIO_interface.h"




ES_t DIO_SetPinDirection(u8 Port,u8 Pin, u8 Direction){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	00 d0       	rcall	.+0      	; 0x199a <DIO_SetPinDirection+0x6>
    199a:	00 d0       	rcall	.+0      	; 0x199c <DIO_SetPinDirection+0x8>
    199c:	00 d0       	rcall	.+0      	; 0x199e <DIO_SetPinDirection+0xa>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	8a 83       	std	Y+2, r24	; 0x02
    19a4:	6b 83       	std	Y+3, r22	; 0x03
    19a6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    19a8:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3e 83       	std	Y+6, r19	; 0x06
    19b2:	2d 83       	std	Y+5, r18	; 0x05
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	09 f4       	brne	.+2      	; 0x19c0 <DIO_SetPinDirection+0x2c>
    19be:	48 c0       	rjmp	.+144    	; 0x1a50 <DIO_SetPinDirection+0xbc>
    19c0:	2d 81       	ldd	r18, Y+5	; 0x05
    19c2:	3e 81       	ldd	r19, Y+6	; 0x06
    19c4:	22 30       	cpi	r18, 0x02	; 2
    19c6:	31 05       	cpc	r19, r1
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <DIO_SetPinDirection+0x40>
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	71 f0       	breq	.+28     	; 0x19ee <DIO_SetPinDirection+0x5a>
    19d2:	d1 c0       	rjmp	.+418    	; 0x1b76 <DIO_SetPinDirection+0x1e2>
    19d4:	2d 81       	ldd	r18, Y+5	; 0x05
    19d6:	3e 81       	ldd	r19, Y+6	; 0x06
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	09 f4       	brne	.+2      	; 0x19e0 <DIO_SetPinDirection+0x4c>
    19de:	69 c0       	rjmp	.+210    	; 0x1ab2 <DIO_SetPinDirection+0x11e>
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	83 30       	cpi	r24, 0x03	; 3
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <DIO_SetPinDirection+0x58>
    19ea:	94 c0       	rjmp	.+296    	; 0x1b14 <DIO_SetPinDirection+0x180>
    19ec:	c4 c0       	rjmp	.+392    	; 0x1b76 <DIO_SetPinDirection+0x1e2>
		case PORTA:
		if(Direction == INPUT){
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	88 23       	and	r24, r24
    19f2:	a9 f4       	brne	.+42     	; 0x1a1e <DIO_SetPinDirection+0x8a>
			CLR_BIT(DDRA_REG,Pin);
    19f4:	aa e3       	ldi	r26, 0x3A	; 58
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	ea e3       	ldi	r30, 0x3A	; 58
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <DIO_SetPinDirection+0x7e>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <DIO_SetPinDirection+0x7a>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	16 c0       	rjmp	.+44     	; 0x1a4a <DIO_SetPinDirection+0xb6>
		}
		else if(Direction == OUTPUT){
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	99 f4       	brne	.+38     	; 0x1a4a <DIO_SetPinDirection+0xb6>
			SET_BIT(DDRA_REG,Pin);
    1a24:	aa e3       	ldi	r26, 0x3A	; 58
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ea e3       	ldi	r30, 0x3A	; 58
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	48 2f       	mov	r20, r24
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	02 2e       	mov	r0, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_SetPinDirection+0xae>
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	0a 94       	dec	r0
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_SetPinDirection+0xaa>
    1a46:	84 2b       	or	r24, r20
    1a48:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	95 c0       	rjmp	.+298    	; 0x1b7a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTB:
		if(Direction == INPUT){
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	88 23       	and	r24, r24
    1a54:	a9 f4       	brne	.+42     	; 0x1a80 <DIO_SetPinDirection+0xec>
			CLR_BIT(DDRB_REG,Pin);
    1a56:	a7 e3       	ldi	r26, 0x37	; 55
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	48 2f       	mov	r20, r24
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	02 2e       	mov	r0, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <DIO_SetPinDirection+0xe0>
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	0a 94       	dec	r0
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <DIO_SetPinDirection+0xdc>
    1a78:	80 95       	com	r24
    1a7a:	84 23       	and	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	16 c0       	rjmp	.+44     	; 0x1aac <DIO_SetPinDirection+0x118>
		}
		else if(Direction == OUTPUT){
    1a80:	8c 81       	ldd	r24, Y+4	; 0x04
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	99 f4       	brne	.+38     	; 0x1aac <DIO_SetPinDirection+0x118>
			SET_BIT(DDRB_REG,Pin);
    1a86:	a7 e3       	ldi	r26, 0x37	; 55
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	e7 e3       	ldi	r30, 0x37	; 55
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	02 2e       	mov	r0, r18
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_SetPinDirection+0x110>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	0a 94       	dec	r0
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_SetPinDirection+0x10c>
    1aa8:	84 2b       	or	r24, r20
    1aaa:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	64 c0       	rjmp	.+200    	; 0x1b7a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTC:
		if(Direction == INPUT){
    1ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab4:	88 23       	and	r24, r24
    1ab6:	a9 f4       	brne	.+42     	; 0x1ae2 <DIO_SetPinDirection+0x14e>
			CLR_BIT(DDRC_REG,Pin);
    1ab8:	a4 e3       	ldi	r26, 0x34	; 52
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e4 e3       	ldi	r30, 0x34	; 52
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_SetPinDirection+0x142>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_SetPinDirection+0x13e>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24
    1ae0:	16 c0       	rjmp	.+44     	; 0x1b0e <DIO_SetPinDirection+0x17a>
		}
		else if(Direction == OUTPUT){
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	99 f4       	brne	.+38     	; 0x1b0e <DIO_SetPinDirection+0x17a>
			SET_BIT(DDRC_REG,Pin);
    1ae8:	a4 e3       	ldi	r26, 0x34	; 52
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e4 e3       	ldi	r30, 0x34	; 52
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_SetPinDirection+0x172>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_SetPinDirection+0x16e>
    1b0a:	84 2b       	or	r24, r20
    1b0c:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	33 c0       	rjmp	.+102    	; 0x1b7a <DIO_SetPinDirection+0x1e6>
		break;
		case PORTD:
		if(Direction == INPUT){
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	88 23       	and	r24, r24
    1b18:	a9 f4       	brne	.+42     	; 0x1b44 <DIO_SetPinDirection+0x1b0>
			CLR_BIT(DDRD_REG,Pin);
    1b1a:	a1 e3       	ldi	r26, 0x31	; 49
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e1 e3       	ldi	r30, 0x31	; 49
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_SetPinDirection+0x1a4>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_SetPinDirection+0x1a0>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <DIO_SetPinDirection+0x1dc>
		}
		else if(Direction == OUTPUT){
    1b44:	8c 81       	ldd	r24, Y+4	; 0x04
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	99 f4       	brne	.+38     	; 0x1b70 <DIO_SetPinDirection+0x1dc>
			SET_BIT(DDRD_REG,Pin);
    1b4a:	a1 e3       	ldi	r26, 0x31	; 49
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e1 e3       	ldi	r30, 0x31	; 49
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <DIO_SetPinDirection+0x1d4>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <DIO_SetPinDirection+0x1d0>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <DIO_SetPinDirection+0x1e6>
		break;
		default:
			Local_enuErrorstate = ES_OUT_OF_RANGE;	
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Local_enuErrorstate;
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b7c:	26 96       	adiw	r28, 0x06	; 6
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <DIO_SetPortDirection>:



ES_t DIO_SetPortDirection(u8 Port,u8 Direction){
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <DIO_SetPortDirection+0x6>
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_SetPortDirection+0x8>
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1ba0:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	3d 83       	std	Y+5, r19	; 0x05
    1baa:	2c 83       	std	Y+4, r18	; 0x04
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	e1 f0       	breq	.+56     	; 0x1bee <DIO_SetPortDirection+0x60>
    1bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <DIO_SetPortDirection+0x3c>
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	61 f0       	breq	.+24     	; 0x1be0 <DIO_SetPortDirection+0x52>
    1bc8:	27 c0       	rjmp	.+78     	; 0x1c18 <DIO_SetPortDirection+0x8a>
    1bca:	2c 81       	ldd	r18, Y+4	; 0x04
    1bcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	a1 f0       	breq	.+40     	; 0x1bfc <DIO_SetPortDirection+0x6e>
    1bd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	91 05       	cpc	r25, r1
    1bdc:	b1 f0       	breq	.+44     	; 0x1c0a <DIO_SetPortDirection+0x7c>
    1bde:	1c c0       	rjmp	.+56     	; 0x1c18 <DIO_SetPortDirection+0x8a>
		case PORTA: DDRA_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1be0:	ea e3       	ldi	r30, 0x3A	; 58
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	80 83       	st	Z, r24
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	17 c0       	rjmp	.+46     	; 0x1c1c <DIO_SetPortDirection+0x8e>
		case PORTB: DDRB_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1bee:	e7 e3       	ldi	r30, 0x37	; 55
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	80 83       	st	Z, r24
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	10 c0       	rjmp	.+32     	; 0x1c1c <DIO_SetPortDirection+0x8e>
		case PORTC: DDRC_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1bfc:	e4 e3       	ldi	r30, 0x34	; 52
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	80 83       	st	Z, r24
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	09 c0       	rjmp	.+18     	; 0x1c1c <DIO_SetPortDirection+0x8e>
		case PORTD: DDRD_REG = Direction; Local_enuErrorstate = ES_OK; break;
    1c0a:	e1 e3       	ldi	r30, 0x31	; 49
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	80 83       	st	Z, r24
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_SetPortDirection+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				   break;
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorstate;
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <DIO_SetPinValue>:


ES_t DIO_SetPinValue(u8 Port,u8 Pin, u8 Value){
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <DIO_SetPinValue+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <DIO_SetPinValue+0x8>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <DIO_SetPinValue+0xa>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	8a 83       	std	Y+2, r24	; 0x02
    1c3e:	6b 83       	std	Y+3, r22	; 0x03
    1c40:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1c42:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3e 83       	std	Y+6, r19	; 0x06
    1c4c:	2d 83       	std	Y+5, r18	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <DIO_SetPinValue+0x2c>
    1c58:	48 c0       	rjmp	.+144    	; 0x1cea <DIO_SetPinValue+0xbc>
    1c5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5e:	22 30       	cpi	r18, 0x02	; 2
    1c60:	31 05       	cpc	r19, r1
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <DIO_SetPinValue+0x40>
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	71 f0       	breq	.+28     	; 0x1c88 <DIO_SetPinValue+0x5a>
    1c6c:	d1 c0       	rjmp	.+418    	; 0x1e10 <DIO_SetPinValue+0x1e2>
    1c6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c70:	3e 81       	ldd	r19, Y+6	; 0x06
    1c72:	22 30       	cpi	r18, 0x02	; 2
    1c74:	31 05       	cpc	r19, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <DIO_SetPinValue+0x4c>
    1c78:	69 c0       	rjmp	.+210    	; 0x1d4c <DIO_SetPinValue+0x11e>
    1c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7e:	83 30       	cpi	r24, 0x03	; 3
    1c80:	91 05       	cpc	r25, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <DIO_SetPinValue+0x58>
    1c84:	94 c0       	rjmp	.+296    	; 0x1dae <DIO_SetPinValue+0x180>
    1c86:	c4 c0       	rjmp	.+392    	; 0x1e10 <DIO_SetPinValue+0x1e2>
		case PORTA:
		if(Value == LOW){
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	88 23       	and	r24, r24
    1c8c:	a9 f4       	brne	.+42     	; 0x1cb8 <DIO_SetPinValue+0x8a>
			CLR_BIT(PORTA_REG,Pin);
    1c8e:	ab e3       	ldi	r26, 0x3B	; 59
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	eb e3       	ldi	r30, 0x3B	; 59
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	48 2f       	mov	r20, r24
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 2e       	mov	r0, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <DIO_SetPinValue+0x7e>
    1ca8:	88 0f       	add	r24, r24
    1caa:	99 1f       	adc	r25, r25
    1cac:	0a 94       	dec	r0
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <DIO_SetPinValue+0x7a>
    1cb0:	80 95       	com	r24
    1cb2:	84 23       	and	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	16 c0       	rjmp	.+44     	; 0x1ce4 <DIO_SetPinValue+0xb6>
		}
		else if(Value == HIGH){
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	99 f4       	brne	.+38     	; 0x1ce4 <DIO_SetPinValue+0xb6>
			SET_BIT(PORTA_REG,Pin);
    1cbe:	ab e3       	ldi	r26, 0x3B	; 59
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	eb e3       	ldi	r30, 0x3B	; 59
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_SetPinValue+0xae>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_SetPinValue+0xaa>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	95 c0       	rjmp	.+298    	; 0x1e14 <DIO_SetPinValue+0x1e6>
		break;
		case PORTB:
		if(Value == LOW){
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	88 23       	and	r24, r24
    1cee:	a9 f4       	brne	.+42     	; 0x1d1a <DIO_SetPinValue+0xec>
			CLR_BIT(PORTB_REG,Pin);
    1cf0:	a8 e3       	ldi	r26, 0x38	; 56
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e8 e3       	ldi	r30, 0x38	; 56
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_SetPinValue+0xe0>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_SetPinValue+0xdc>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
    1d18:	16 c0       	rjmp	.+44     	; 0x1d46 <DIO_SetPinValue+0x118>
		}
		else if(Value == HIGH){
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	99 f4       	brne	.+38     	; 0x1d46 <DIO_SetPinValue+0x118>
			SET_BIT(PORTB_REG,Pin);
    1d20:	a8 e3       	ldi	r26, 0x38	; 56
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e8 e3       	ldi	r30, 0x38	; 56
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	48 2f       	mov	r20, r24
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	28 2f       	mov	r18, r24
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	02 2e       	mov	r0, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <DIO_SetPinValue+0x110>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <DIO_SetPinValue+0x10c>
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	64 c0       	rjmp	.+200    	; 0x1e14 <DIO_SetPinValue+0x1e6>
		break;
		case PORTC:
		if(Value == LOW){
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	88 23       	and	r24, r24
    1d50:	a9 f4       	brne	.+42     	; 0x1d7c <DIO_SetPinValue+0x14e>
			CLR_BIT(PORTC_REG,Pin);
    1d52:	a5 e3       	ldi	r26, 0x35	; 53
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e5 e3       	ldi	r30, 0x35	; 53
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_SetPinValue+0x142>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_SetPinValue+0x13e>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	16 c0       	rjmp	.+44     	; 0x1da8 <DIO_SetPinValue+0x17a>
		}
		else if(Value == HIGH){
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	99 f4       	brne	.+38     	; 0x1da8 <DIO_SetPinValue+0x17a>
			SET_BIT(PORTC_REG,Pin);
    1d82:	a5 e3       	ldi	r26, 0x35	; 53
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e5 e3       	ldi	r30, 0x35	; 53
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <DIO_SetPinValue+0x172>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <DIO_SetPinValue+0x16e>
    1da4:	84 2b       	or	r24, r20
    1da6:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	33 c0       	rjmp	.+102    	; 0x1e14 <DIO_SetPinValue+0x1e6>
		break;
		case PORTD:
		if(Value == LOW){
    1dae:	8c 81       	ldd	r24, Y+4	; 0x04
    1db0:	88 23       	and	r24, r24
    1db2:	a9 f4       	brne	.+42     	; 0x1dde <DIO_SetPinValue+0x1b0>
			CLR_BIT(PORTD_REG,Pin);
    1db4:	a2 e3       	ldi	r26, 0x32	; 50
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e2 e3       	ldi	r30, 0x32	; 50
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <DIO_SetPinValue+0x1a4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <DIO_SetPinValue+0x1a0>
    1dd6:	80 95       	com	r24
    1dd8:	84 23       	and	r24, r20
    1dda:	8c 93       	st	X, r24
    1ddc:	16 c0       	rjmp	.+44     	; 0x1e0a <DIO_SetPinValue+0x1dc>
		}
		else if(Value == HIGH){
    1dde:	8c 81       	ldd	r24, Y+4	; 0x04
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	99 f4       	brne	.+38     	; 0x1e0a <DIO_SetPinValue+0x1dc>
			SET_BIT(PORTD_REG,Pin);
    1de4:	a2 e3       	ldi	r26, 0x32	; 50
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e2 e3       	ldi	r30, 0x32	; 50
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	28 2f       	mov	r18, r24
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	02 2e       	mov	r0, r18
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_SetPinValue+0x1d4>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <DIO_SetPinValue+0x1d0>
    1e06:	84 2b       	or	r24, r20
    1e08:	8c 93       	st	X, r24
		}
		Local_enuErrorstate = ES_OK;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_SetPinValue+0x1e6>
		break;
		default:
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorstate;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e16:	26 96       	adiw	r28, 0x06	; 6
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <DIO_TogPinValue>:

ES_t DIO_TogPinValue(u8 Port,u8 Pin){
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <DIO_TogPinValue+0x6>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <DIO_TogPinValue+0x8>
    1e30:	0f 92       	push	r0
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1e3a:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	3d 83       	std	Y+5, r19	; 0x05
    1e44:	2c 83       	std	Y+4, r18	; 0x04
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	61 f1       	breq	.+88     	; 0x1ea8 <DIO_TogPinValue+0x80>
    1e50:	2c 81       	ldd	r18, Y+4	; 0x04
    1e52:	3d 81       	ldd	r19, Y+5	; 0x05
    1e54:	22 30       	cpi	r18, 0x02	; 2
    1e56:	31 05       	cpc	r19, r1
    1e58:	2c f4       	brge	.+10     	; 0x1e64 <DIO_TogPinValue+0x3c>
    1e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f0       	breq	.+26     	; 0x1e7c <DIO_TogPinValue+0x54>
    1e62:	64 c0       	rjmp	.+200    	; 0x1f2c <DIO_TogPinValue+0x104>
    1e64:	2c 81       	ldd	r18, Y+4	; 0x04
    1e66:	3d 81       	ldd	r19, Y+5	; 0x05
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	99 f1       	breq	.+102    	; 0x1ed4 <DIO_TogPinValue+0xac>
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	91 05       	cpc	r25, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <DIO_TogPinValue+0x52>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <DIO_TogPinValue+0xd8>
    1e7a:	58 c0       	rjmp	.+176    	; 0x1f2c <DIO_TogPinValue+0x104>
			case PORTA:
				TOG_BIT(PORTA_REG,Pin);
    1e7c:	ab e3       	ldi	r26, 0x3B	; 59
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	eb e3       	ldi	r30, 0x3B	; 59
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_TogPinValue+0x72>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <DIO_TogPinValue+0x6e>
    1e9e:	84 27       	eor	r24, r20
    1ea0:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	44 c0       	rjmp	.+136    	; 0x1f30 <DIO_TogPinValue+0x108>
			break;
			case PORTB:
				TOG_BIT(PORTB_REG,Pin);
    1ea8:	a8 e3       	ldi	r26, 0x38	; 56
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e8 e3       	ldi	r30, 0x38	; 56
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	48 2f       	mov	r20, r24
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	02 2e       	mov	r0, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <DIO_TogPinValue+0x9e>
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	0a 94       	dec	r0
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <DIO_TogPinValue+0x9a>
    1eca:	84 27       	eor	r24, r20
    1ecc:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	2e c0       	rjmp	.+92     	; 0x1f30 <DIO_TogPinValue+0x108>
			break;
			case PORTC:
				TOG_BIT(PORTC_REG,Pin);
    1ed4:	a5 e3       	ldi	r26, 0x35	; 53
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e5 e3       	ldi	r30, 0x35	; 53
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_TogPinValue+0xca>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_TogPinValue+0xc6>
    1ef6:	84 27       	eor	r24, r20
    1ef8:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	18 c0       	rjmp	.+48     	; 0x1f30 <DIO_TogPinValue+0x108>
			break;
			case PORTD:
				TOG_BIT(PORTD_REG,Pin);
    1f00:	a2 e3       	ldi	r26, 0x32	; 50
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e2 e3       	ldi	r30, 0x32	; 50
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_TogPinValue+0xf6>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_TogPinValue+0xf2>
    1f22:	84 27       	eor	r24, r20
    1f24:	8c 93       	st	X, r24
				Local_enuErrorstate = ES_OK;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_TogPinValue+0x108>
			break;
			default:
				Local_enuErrorstate = ES_OUT_OF_RANGE;
    1f2c:	83 e0       	ldi	r24, 0x03	; 3
    1f2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	return Local_enuErrorstate;
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <DIO_SetPortValue>:



ES_t DIO_SetPortValue(u8 Port,u8 Value){
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <DIO_SetPortValue+0x6>
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <DIO_SetPortValue+0x8>
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	8a 83       	std	Y+2, r24	; 0x02
    1f52:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1f54:	19 82       	std	Y+1, r1	; 0x01
	switch(Port){
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	3d 83       	std	Y+5, r19	; 0x05
    1f5e:	2c 83       	std	Y+4, r18	; 0x04
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	9d 81       	ldd	r25, Y+5	; 0x05
    1f64:	81 30       	cpi	r24, 0x01	; 1
    1f66:	91 05       	cpc	r25, r1
    1f68:	e1 f0       	breq	.+56     	; 0x1fa2 <DIO_SetPortValue+0x60>
    1f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	2c f4       	brge	.+10     	; 0x1f7e <DIO_SetPortValue+0x3c>
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	9d 81       	ldd	r25, Y+5	; 0x05
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <DIO_SetPortValue+0x52>
    1f7c:	27 c0       	rjmp	.+78     	; 0x1fcc <DIO_SetPortValue+0x8a>
    1f7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f80:	3d 81       	ldd	r19, Y+5	; 0x05
    1f82:	22 30       	cpi	r18, 0x02	; 2
    1f84:	31 05       	cpc	r19, r1
    1f86:	a1 f0       	breq	.+40     	; 0x1fb0 <DIO_SetPortValue+0x6e>
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	91 05       	cpc	r25, r1
    1f90:	b1 f0       	breq	.+44     	; 0x1fbe <DIO_SetPortValue+0x7c>
    1f92:	1c c0       	rjmp	.+56     	; 0x1fcc <DIO_SetPortValue+0x8a>
		case PORTA: PORTA_REG = Value; Local_enuErrorstate = ES_OK; break;
    1f94:	eb e3       	ldi	r30, 0x3B	; 59
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	80 83       	st	Z, r24
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	17 c0       	rjmp	.+46     	; 0x1fd0 <DIO_SetPortValue+0x8e>
		case PORTB: PORTB_REG = Value; Local_enuErrorstate = ES_OK; break;
    1fa2:	e8 e3       	ldi	r30, 0x38	; 56
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	80 83       	st	Z, r24
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	10 c0       	rjmp	.+32     	; 0x1fd0 <DIO_SetPortValue+0x8e>
		case PORTC: PORTC_REG = Value; Local_enuErrorstate = ES_OK; break;
    1fb0:	e5 e3       	ldi	r30, 0x35	; 53
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	80 83       	st	Z, r24
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	09 c0       	rjmp	.+18     	; 0x1fd0 <DIO_SetPortValue+0x8e>
		case PORTD: PORTD_REG = Value; Local_enuErrorstate = ES_OK; break;
    1fbe:	e2 e3       	ldi	r30, 0x32	; 50
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	80 83       	st	Z, r24
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <DIO_SetPortValue+0x8e>
		default: Local_enuErrorstate = ES_OUT_OF_RANGE;				break;
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_enuErrorstate;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Port,u8 Pin){
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	00 d0       	rcall	.+0      	; 0x1fe8 <DIO_u8GetPinValue+0x6>
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_u8GetPinValue+0x8>
    1fea:	0f 92       	push	r0
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3d 83       	std	Y+5, r19	; 0x05
    1ffc:	2c 83       	std	Y+4, r18	; 0x04
    1ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    2000:	5d 81       	ldd	r21, Y+5	; 0x05
    2002:	41 30       	cpi	r20, 0x01	; 1
    2004:	51 05       	cpc	r21, r1
    2006:	49 f1       	breq	.+82     	; 0x205a <DIO_u8GetPinValue+0x78>
    2008:	8c 81       	ldd	r24, Y+4	; 0x04
    200a:	9d 81       	ldd	r25, Y+5	; 0x05
    200c:	82 30       	cpi	r24, 0x02	; 2
    200e:	91 05       	cpc	r25, r1
    2010:	34 f4       	brge	.+12     	; 0x201e <DIO_u8GetPinValue+0x3c>
    2012:	2c 81       	ldd	r18, Y+4	; 0x04
    2014:	3d 81       	ldd	r19, Y+5	; 0x05
    2016:	21 15       	cp	r18, r1
    2018:	31 05       	cpc	r19, r1
    201a:	61 f0       	breq	.+24     	; 0x2034 <DIO_u8GetPinValue+0x52>
    201c:	57 c0       	rjmp	.+174    	; 0x20cc <DIO_u8GetPinValue+0xea>
    201e:	4c 81       	ldd	r20, Y+4	; 0x04
    2020:	5d 81       	ldd	r21, Y+5	; 0x05
    2022:	42 30       	cpi	r20, 0x02	; 2
    2024:	51 05       	cpc	r21, r1
    2026:	61 f1       	breq	.+88     	; 0x2080 <DIO_u8GetPinValue+0x9e>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	83 30       	cpi	r24, 0x03	; 3
    202e:	91 05       	cpc	r25, r1
    2030:	d1 f1       	breq	.+116    	; 0x20a6 <DIO_u8GetPinValue+0xc4>
    2032:	4c c0       	rjmp	.+152    	; 0x20cc <DIO_u8GetPinValue+0xea>
		case PORTA: return GET_BIT(PINA_REG,Pin); break;
    2034:	e9 e3       	ldi	r30, 0x39	; 57
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a9 01       	movw	r20, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <DIO_u8GetPinValue+0x6a>
    2048:	55 95       	asr	r21
    204a:	47 95       	ror	r20
    204c:	8a 95       	dec	r24
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <DIO_u8GetPinValue+0x66>
    2050:	ca 01       	movw	r24, r20
    2052:	58 2f       	mov	r21, r24
    2054:	51 70       	andi	r21, 0x01	; 1
    2056:	5b 83       	std	Y+3, r21	; 0x03
    2058:	3a c0       	rjmp	.+116    	; 0x20ce <DIO_u8GetPinValue+0xec>
		case PORTB: return GET_BIT(PINB_REG,Pin); break;
    205a:	e6 e3       	ldi	r30, 0x36	; 54
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a9 01       	movw	r20, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_u8GetPinValue+0x90>
    206e:	55 95       	asr	r21
    2070:	47 95       	ror	r20
    2072:	8a 95       	dec	r24
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_u8GetPinValue+0x8c>
    2076:	ca 01       	movw	r24, r20
    2078:	58 2f       	mov	r21, r24
    207a:	51 70       	andi	r21, 0x01	; 1
    207c:	5b 83       	std	Y+3, r21	; 0x03
    207e:	27 c0       	rjmp	.+78     	; 0x20ce <DIO_u8GetPinValue+0xec>
		case PORTC: return GET_BIT(PINC_REG,Pin); break;
    2080:	e3 e3       	ldi	r30, 0x33	; 51
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	a9 01       	movw	r20, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <DIO_u8GetPinValue+0xb6>
    2094:	55 95       	asr	r21
    2096:	47 95       	ror	r20
    2098:	8a 95       	dec	r24
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <DIO_u8GetPinValue+0xb2>
    209c:	ca 01       	movw	r24, r20
    209e:	58 2f       	mov	r21, r24
    20a0:	51 70       	andi	r21, 0x01	; 1
    20a2:	5b 83       	std	Y+3, r21	; 0x03
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <DIO_u8GetPinValue+0xec>
		case PORTD: return GET_BIT(PIND_REG,Pin); break;
    20a6:	e0 e3       	ldi	r30, 0x30	; 48
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	88 2f       	mov	r24, r24
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a9 01       	movw	r20, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <DIO_u8GetPinValue+0xdc>
    20ba:	55 95       	asr	r21
    20bc:	47 95       	ror	r20
    20be:	8a 95       	dec	r24
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <DIO_u8GetPinValue+0xd8>
    20c2:	ca 01       	movw	r24, r20
    20c4:	58 2f       	mov	r21, r24
    20c6:	51 70       	andi	r21, 0x01	; 1
    20c8:	5b 83       	std	Y+3, r21	; 0x03
    20ca:	01 c0       	rjmp	.+2      	; 0x20ce <DIO_u8GetPinValue+0xec>
	}
	return 0;
    20cc:	1b 82       	std	Y+3, r1	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <SPI_EEPROM_Init>:
static void EEPROM_WriteDisable(void);
static u8 EEPROM_ReadStatusRegister(void);
static ES_t EEPROM_WaitForWriteComplete(void);
static void EEPROM_SendAddress(u32 Copy_u32Address);

ES_t SPI_EEPROM_Init(void){
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	0f 92       	push	r0
    20e6:	cd b7       	in	r28, 0x3d	; 61
    20e8:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    20ea:	19 82       	std	Y+1, r1	; 0x01
    Local_enuErrorState = SPI_InitMaster();
    20ec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <SPI_InitMaster>
    20f0:	89 83       	std	Y+1, r24	; 0x01
    Local_enuErrorState = DIO_SetPinDirection(PORTB,EEPROM_CS_PIN,OUTPUT);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	64 e0       	ldi	r22, 0x04	; 4
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
    20fc:	89 83       	std	Y+1, r24	; 0x01
    Local_enuErrorState = DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	64 e0       	ldi	r22, 0x04	; 4
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    2108:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    210a:	89 81       	ldd	r24, Y+1	; 0x01
}
    210c:	0f 90       	pop	r0
    210e:	cf 91       	pop	r28
    2110:	df 91       	pop	r29
    2112:	08 95       	ret

00002114 <SPI_EEPROM_WriteByte>:

ES_t SPI_EEPROM_WriteByte(u32 Copy_u32Address,u8 Copy_u8Data){
    2114:	df 93       	push	r29
    2116:	cf 93       	push	r28
    2118:	00 d0       	rcall	.+0      	; 0x211a <SPI_EEPROM_WriteByte+0x6>
    211a:	00 d0       	rcall	.+0      	; 0x211c <SPI_EEPROM_WriteByte+0x8>
    211c:	0f 92       	push	r0
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	69 83       	std	Y+1, r22	; 0x01
    2124:	7a 83       	std	Y+2, r23	; 0x02
    2126:	8b 83       	std	Y+3, r24	; 0x03
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	4d 83       	std	Y+5, r20	; 0x05
    // Wait for any previous write operation to complete
    EEPROM_WaitForWriteComplete();
    212c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <EEPROM_WaitForWriteComplete>

    // Enable write
    EEPROM_WriteEnable();
    2130:	0e 94 1f 11 	call	0x223e	; 0x223e <EEPROM_WriteEnable>

    // Send write command and address
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	64 e0       	ldi	r22, 0x04	; 4
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WRITE,NULLPTR);
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	70 e0       	ldi	r23, 0x00	; 0
    2144:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    EEPROM_SendAddress(Copy_u32Address);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	ab 81       	ldd	r26, Y+3	; 0x03
    214e:	bc 81       	ldd	r27, Y+4	; 0x04
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 81 11 	call	0x2302	; 0x2302 <EEPROM_SendAddress>
    SPI_Transceive(Copy_u8Data,NULLPTR);
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	60 e0       	ldi	r22, 0x00	; 0
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	64 e0       	ldi	r22, 0x04	; 4
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>

    // Wait for write operation to complete
    EEPROM_WaitForWriteComplete();
    216c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <EEPROM_WaitForWriteComplete>
    return ES_OK;
    2170:	81 e0       	ldi	r24, 0x01	; 1
}
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <EEPROM_ReadByte>:

ES_t EEPROM_ReadByte(u32 Copy_u32Address, u8 *Copy_pu8Data)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <EEPROM_ReadByte+0x6>
    2188:	00 d0       	rcall	.+0      	; 0x218a <EEPROM_ReadByte+0x8>
    218a:	00 d0       	rcall	.+0      	; 0x218c <EEPROM_ReadByte+0xa>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	69 83       	std	Y+1, r22	; 0x01
    2192:	7a 83       	std	Y+2, r23	; 0x02
    2194:	8b 83       	std	Y+3, r24	; 0x03
    2196:	9c 83       	std	Y+4, r25	; 0x04
    2198:	5e 83       	std	Y+6, r21	; 0x06
    219a:	4d 83       	std	Y+5, r20	; 0x05
	Copy_u32Address--;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	ab 81       	ldd	r26, Y+3	; 0x03
    21a2:	bc 81       	ldd	r27, Y+4	; 0x04
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	a1 09       	sbc	r26, r1
    21a8:	b1 09       	sbc	r27, r1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	ab 83       	std	Y+3, r26	; 0x03
    21b0:	bc 83       	std	Y+4, r27	; 0x04
    // Send read command and address
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	64 e0       	ldi	r22, 0x04	; 4
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_READ,NULLPTR);
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    EEPROM_SendAddress(Copy_u32Address);
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ca:	ab 81       	ldd	r26, Y+3	; 0x03
    21cc:	bc 81       	ldd	r27, Y+4	; 0x04
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 81 11 	call	0x2302	; 0x2302 <EEPROM_SendAddress>
    SPI_Transceive(NULL,Copy_pu8Data);
    21d6:	2d 81       	ldd	r18, Y+5	; 0x05
    21d8:	3e 81       	ldd	r19, Y+6	; 0x06
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	b9 01       	movw	r22, r18
    21de:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	64 e0       	ldi	r22, 0x04	; 4
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    return ES_OK;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
}
    21ee:	26 96       	adiw	r28, 0x06	; 6
    21f0:	0f b6       	in	r0, 0x3f	; 63
    21f2:	f8 94       	cli
    21f4:	de bf       	out	0x3e, r29	; 62
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	cd bf       	out	0x3d, r28	; 61
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <EEPROM_EraseAll>:


ES_t EEPROM_EraseAll(void)
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    // Wait for any previous write operation to complete
    EEPROM_WaitForWriteComplete();
    2208:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <EEPROM_WaitForWriteComplete>

    // Enable write
    EEPROM_WriteEnable();
    220c:	0e 94 1f 11 	call	0x223e	; 0x223e <EEPROM_WriteEnable>

    // Send erase command
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	64 e0       	ldi	r22, 0x04	; 4
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_CE,NULLPTR);
    221a:	87 ec       	ldi	r24, 0xC7	; 199
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	64 e0       	ldi	r22, 0x04	; 4
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>

    EEPROM_WaitForWriteComplete();
    222e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <EEPROM_WaitForWriteComplete>
    // Send write disable command
    EEPROM_WriteDisable();
    2232:	0e 94 35 11 	call	0x226a	; 0x226a <EEPROM_WriteDisable>
    return ES_OK;
    2236:	81 e0       	ldi	r24, 0x01	; 1
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <EEPROM_WriteEnable>:

/*  Private functions   */
static void EEPROM_WriteEnable(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	64 e0       	ldi	r22, 0x04	; 4
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WREN,NULLPTR);
    2250:	86 e0       	ldi	r24, 0x06	; 6
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	70 e0       	ldi	r23, 0x00	; 0
    2256:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	64 e0       	ldi	r22, 0x04	; 4
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
}
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <EEPROM_WriteDisable>:

static void EEPROM_WriteDisable(void)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	64 e0       	ldi	r22, 0x04	; 4
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_WRDI,NULLPTR);
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	64 e0       	ldi	r22, 0x04	; 4
    228a:	41 e0       	ldi	r20, 0x01	; 1
    228c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <EEPROM_ReadStatusRegister>:

static u8 EEPROM_ReadStatusRegister(void)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	0f 92       	push	r0
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    u8 status = 0;
    22a0:	19 82       	std	Y+1, r1	; 0x01
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,LOW);
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	64 e0       	ldi	r22, 0x04	; 4
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    SPI_Transceive(EEPROM_RDSR,NULLPTR);
    22ac:	85 e0       	ldi	r24, 0x05	; 5
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    SPI_Transceive(NULL,&status);
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	9e 01       	movw	r18, r28
    22ba:	2f 5f       	subi	r18, 0xFF	; 255
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	b9 01       	movw	r22, r18
    22c0:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    DIO_SetPinValue(PORTB,EEPROM_CS_PIN,HIGH);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    return status;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <EEPROM_WaitForWriteComplete>:

static ES_t EEPROM_WaitForWriteComplete(void)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	0f 92       	push	r0
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    ES_t Local_enuErrorState = ES_NOK;
    22e2:	19 82       	std	Y+1, r1	; 0x01
    while (EEPROM_ReadStatusRegister()& (1 << EEPROM_WIP)) {
    22e4:	0e 94 4b 11 	call	0x2296	; 0x2296 <EEPROM_ReadStatusRegister>
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	81 70       	andi	r24, 0x01	; 1
    22ee:	90 70       	andi	r25, 0x00	; 0
    22f0:	88 23       	and	r24, r24
    22f2:	c1 f7       	brne	.-16     	; 0x22e4 <EEPROM_WaitForWriteComplete+0xc>
        // Wait for write to complete
    }
    Local_enuErrorState = ES_OK;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <EEPROM_SendAddress>:


static void EEPROM_SendAddress(u32 Copy_u32Address)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	27 97       	sbiw	r28, 0x07	; 7
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	6c 83       	std	Y+4, r22	; 0x04
    2318:	7d 83       	std	Y+5, r23	; 0x05
    231a:	8e 83       	std	Y+6, r24	; 0x06
    231c:	9f 83       	std	Y+7, r25	; 0x07
    u8 addressBytes[3];
    addressBytes[0] = (u8)((Copy_u32Address >> 16) & 0xFF);
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	9d 81       	ldd	r25, Y+5	; 0x05
    2322:	ae 81       	ldd	r26, Y+6	; 0x06
    2324:	bf 81       	ldd	r27, Y+7	; 0x07
    2326:	cd 01       	movw	r24, r26
    2328:	aa 27       	eor	r26, r26
    232a:	bb 27       	eor	r27, r27
    232c:	89 83       	std	Y+1, r24	; 0x01
    addressBytes[1] = (u8)((Copy_u32Address >> 8) & 0xFF);
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	9d 81       	ldd	r25, Y+5	; 0x05
    2332:	ae 81       	ldd	r26, Y+6	; 0x06
    2334:	bf 81       	ldd	r27, Y+7	; 0x07
    2336:	89 2f       	mov	r24, r25
    2338:	9a 2f       	mov	r25, r26
    233a:	ab 2f       	mov	r26, r27
    233c:	bb 27       	eor	r27, r27
    233e:	8a 83       	std	Y+2, r24	; 0x02
    addressBytes[2] = (u8)(Copy_u32Address & 0xFF);
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
    SPI_Transceive(addressBytes[0],NULLPTR);
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    SPI_Transceive(addressBytes[1],NULLPTR);
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	60 e0       	ldi	r22, 0x00	; 0
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
    SPI_Transceive(addressBytes[2],NULLPTR);
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	60 e0       	ldi	r22, 0x00	; 0
    235c:	70 e0       	ldi	r23, 0x00	; 0
    235e:	0e 94 32 08 	call	0x1064	; 0x1064 <SPI_Transceive>
}
    2362:	27 96       	adiw	r28, 0x07	; 7
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <LED_init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_init(u8 DIO_PORT,u8 DIO_PIN){
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <LED_init+0x6>
    237a:	0f 92       	push	r0
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	8a 83       	std	Y+2, r24	; 0x02
    2382:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2384:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinDirection(DIO_PORT,DIO_PIN,OUTPUT);
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	6b 81       	ldd	r22, Y+3	; 0x03
    238a:	41 e0       	ldi	r20, 0x01	; 1
    238c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
	Local_enuErrorstate = ES_OK;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2394:	89 81       	ldd	r24, Y+1	; 0x01
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <LED_ON>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_ON(u8 DIO_PORT,u8 DIO_PIN){
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LED_ON+0x6>
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	8a 83       	std	Y+2, r24	; 0x02
    23b0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    23b2:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,HIGH);
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	6b 81       	ldd	r22, Y+3	; 0x03
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret

000023d0 <LED_OFF>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_OFF(u8 DIO_PORT,u8 DIO_PIN){
    23d0:	df 93       	push	r29
    23d2:	cf 93       	push	r28
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <LED_OFF+0x6>
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    23e0:	19 82       	std	Y+1, r1	; 0x01
	DIO_SetPinValue(DIO_PORT,DIO_PIN,LOW);
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	6b 81       	ldd	r22, Y+3	; 0x03
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	Local_enuErrorstate = ES_OK;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LED_Toggle>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t LED_Toggle(u8 DIO_PORT,u8 DIO_PIN){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LED_Toggle+0x6>
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	8a 83       	std	Y+2, r24	; 0x02
    240c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_OK;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	89 83       	std	Y+1, r24	; 0x01
	DIO_TogPinValue(DIO_PORT,DIO_PIN);
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	6b 81       	ldd	r22, Y+3	; 0x03
    2416:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_TogPinValue>
	Local_enuErrorstate = ES_OK;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    241e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <LCD_WriteCommand8Bit>:

@brief Writes a command to the 8-bit data port of the LCD
@param Command The command to be written to the LCD
@return ES_OK if the command was written successfully, ES_NOK otherwise
*/
ES_t LCD_WriteCommand8Bit(u8 Command){
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LCD_WriteCommand8Bit+0x6>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    2438:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	40 e0       	ldi	r20, 0x00	; 0
    2440:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	//Send the command throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Command);
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	6a 81       	ldd	r22, Y+2	; 0x02
    2448:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    244c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	cf 91       	pop	r28
    245c:	df 91       	pop	r29
    245e:	08 95       	ret

00002460 <LCD_WriteData8Bit>:
 * 
 * @return An error state indicating the success or failure of the operation.
 * @retval ES_OK The data was successfully written to the LCD.
 * @retval ES_NOK The data was not successfully written to the LCD.
 */
ES_t LCD_WriteData8Bit(u8 Data){
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	00 d0       	rcall	.+0      	; 0x2466 <LCD_WriteData8Bit+0x6>
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    246c:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	66 e0       	ldi	r22, 0x06	; 6
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	//Send the DATA throw data port
	DIO_SetPortValue(DATA_PORT_8_BIT,Data);
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	6a 81       	ldd	r22, Y+2	; 0x02
    247c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    2480:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2488:	89 81       	ldd	r24, Y+1	; 0x01
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <LCD_8BitInitialize>:

ES_t LCD_8BitInitialize(void){
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    249e:	19 82       	std	Y+1, r1	; 0x01
	/*	Set Directions	*/
	SetDirections8Bit();
    24a0:	0e 94 00 15 	call	0x2a00	; 0x2a00 <SetDirections8Bit>
	/*					*/
	FunctionSet8Bit();
    24a4:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <FunctionSet8Bit>
	DisplayOnOffControl8Bit();
    24a8:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <DisplayOnOffControl8Bit>
	DisplayClear8Bit();
    24ac:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <DisplayClear8Bit>
	EntryModeSet8Bit();
    24b0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <EntryModeSet8Bit>
	Local_enuErrorstate = ES_OK;
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <LCD_WriteCommand4Bit>:
/***********************************************************************/
ES_t LCD_WriteCommand4Bit(u8 Command){
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <LCD_WriteCommand4Bit+0x6>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    24ce:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to LOW		(INSTRUCTION)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,LOW);
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	66 e0       	ldi	r22, 0x06	; 6
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Command>>4);
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	98 2f       	mov	r25, r24
    24de:	92 95       	swap	r25
    24e0:	9f 70       	andi	r25, 0x0F	; 15
    24e2:	82 e0       	ldi	r24, 0x02	; 2
    24e4:	69 2f       	mov	r22, r25
    24e6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    24ea:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Command&0x0f);
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	98 2f       	mov	r25, r24
    24f2:	9f 70       	andi	r25, 0x0F	; 15
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	69 2f       	mov	r22, r25
    24f8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    24fc:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2504:	89 81       	ldd	r24, Y+1	; 0x01
}
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <LCD_WriteData4Bit>:

ES_t LCD_WriteData4Bit(u8 Data){
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <LCD_WriteData4Bit+0x6>
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    251c:	19 82       	std	Y+1, r1	; 0x01
	//Set RS PIN to HIGH		(DATA)
	DIO_SetPinValue(CONTROL_PORT,RS_PIN,HIGH);
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	66 e0       	ldi	r22, 0x06	; 6
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	//Send the D7:D4 data first
	DIO_SetPortValue(DATA_PORT_8_BIT,Data>>4);
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	98 2f       	mov	r25, r24
    252c:	92 95       	swap	r25
    252e:	9f 70       	andi	r25, 0x0F	; 15
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	69 2f       	mov	r22, r25
    2534:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    2538:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	//Send the D3:D0 data second
	DIO_SetPortValue(DATA_PORT_8_BIT,Data&0x0f);
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	98 2f       	mov	r25, r24
    2540:	9f 70       	andi	r25, 0x0F	; 15
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	69 2f       	mov	r22, r25
    2546:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <DIO_SetPortValue>
	//Send Enable Pulse
	SendEnablePulse();
    254a:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <SendEnablePulse>
	Local_enuErrorstate = ES_OK;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2552:	89 81       	ldd	r24, Y+1	; 0x01
}
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <LCD_4BitInitialize>:

ES_t LCD_4BitInitialize(void){
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    2568:	19 82       	std	Y+1, r1	; 0x01
	SetDirections4Bit();
    256a:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <SetDirections4Bit>
	FunctionSet4Bit();
    256e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <FunctionSet4Bit>
	DisplayOnOffControl4Bit();
    2572:	0e 94 2c 1a 	call	0x3458	; 0x3458 <DisplayOnOffControl4Bit>
	DisplayClear4Bit();
    2576:	0e 94 c1 1b 	call	0x3782	; 0x3782 <DisplayClear4Bit>
	EntryModeSet4Bit();
    257a:	0e 94 56 1d 	call	0x3aac	; 0x3aac <EntryModeSet4Bit>
	Local_enuErrorstate = ES_OK;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
}
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LCD_WriteString8Bit>:





ES_t LCD_WriteString8Bit(char *string){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	00 d0       	rcall	.+0      	; 0x2592 <LCD_WriteString8Bit+0x6>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <LCD_WriteString8Bit+0x8>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    259c:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    259e:	19 82       	std	Y+1, r1	; 0x01
    25a0:	0e c0       	rjmp	.+28     	; 0x25be <LCD_WriteString8Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData8Bit(string[i]);
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	9c 81       	ldd	r25, Y+4	; 0x04
    25ac:	fc 01       	movw	r30, r24
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	80 81       	ld	r24, Z
    25b4:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_WriteData8Bit>
		i++;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01


ES_t LCD_WriteString8Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f3 1f       	adc	r31, r19
    25ce:	80 81       	ld	r24, Z
    25d0:	88 23       	and	r24, r24
    25d2:	39 f7       	brne	.-50     	; 0x25a2 <LCD_WriteString8Bit+0x16>
		LCD_WriteData8Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_GoToXY8Bit>:

ES_t LCD_GoToXY8Bit(u8 X_Pos,u8 Y_Pos){
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LCD_GoToXY8Bit+0x6>
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <LCD_GoToXY8Bit+0x8>
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	8b 83       	std	Y+3, r24	; 0x03
    25f6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    25f8:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	88 23       	and	r24, r24
    25fe:	19 f4       	brne	.+6      	; 0x2606 <LCD_GoToXY8Bit+0x1e>
		Address = X_Pos;
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <LCD_GoToXY8Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	19 f4       	brne	.+6      	; 0x2612 <LCD_GoToXY8Bit+0x2a>
		Address = X_Pos + 0x40;
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	80 5c       	subi	r24, 0xC0	; 192
    2610:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand8Bit(128+Address);
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	80 58       	subi	r24, 0x80	; 128
    2616:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_WriteNumber8Bit>:

ES_t LCD_WriteNumber8Bit(s32 Number){
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	df 93       	push	r29
    2638:	cf 93       	push	r28
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	29 97       	sbiw	r28, 0x09	; 9
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	6e 83       	std	Y+6, r22	; 0x06
    264c:	7f 83       	std	Y+7, r23	; 0x07
    264e:	88 87       	std	Y+8, r24	; 0x08
    2650:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    2652:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e0       	ldi	r26, 0x00	; 0
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	ab 83       	std	Y+3, r26	; 0x03
    2662:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    2664:	8e 81       	ldd	r24, Y+6	; 0x06
    2666:	9f 81       	ldd	r25, Y+7	; 0x07
    2668:	a8 85       	ldd	r26, Y+8	; 0x08
    266a:	b9 85       	ldd	r27, Y+9	; 0x09
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	a1 05       	cpc	r26, r1
    2670:	b1 05       	cpc	r27, r1
    2672:	21 f4       	brne	.+8      	; 0x267c <LCD_WriteNumber8Bit+0x4e>
		LCD_WriteData8Bit('0');
    2674:	80 e3       	ldi	r24, 0x30	; 48
    2676:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_WriteData8Bit>
    267a:	50 c0       	rjmp	.+160    	; 0x271c <LCD_WriteNumber8Bit+0xee>
	}
	else if(Number < 0){
    267c:	8e 81       	ldd	r24, Y+6	; 0x06
    267e:	9f 81       	ldd	r25, Y+7	; 0x07
    2680:	a8 85       	ldd	r26, Y+8	; 0x08
    2682:	b9 85       	ldd	r27, Y+9	; 0x09
    2684:	bb 23       	and	r27, r27
    2686:	0c f0       	brlt	.+2      	; 0x268a <LCD_WriteNumber8Bit+0x5c>
    2688:	49 c0       	rjmp	.+146    	; 0x271c <LCD_WriteNumber8Bit+0xee>
		LCD_WriteData8Bit('-');
    268a:	8d e2       	ldi	r24, 0x2D	; 45
    268c:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_WriteData8Bit>
		Number = Number * (-1);
    2690:	8e 81       	ldd	r24, Y+6	; 0x06
    2692:	9f 81       	ldd	r25, Y+7	; 0x07
    2694:	a8 85       	ldd	r26, Y+8	; 0x08
    2696:	b9 85       	ldd	r27, Y+9	; 0x09
    2698:	b0 95       	com	r27
    269a:	a0 95       	com	r26
    269c:	90 95       	com	r25
    269e:	81 95       	neg	r24
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	af 4f       	sbci	r26, 0xFF	; 255
    26a4:	bf 4f       	sbci	r27, 0xFF	; 255
    26a6:	8e 83       	std	Y+6, r24	; 0x06
    26a8:	9f 83       	std	Y+7, r25	; 0x07
    26aa:	a8 87       	std	Y+8, r26	; 0x08
    26ac:	b9 87       	std	Y+9, r27	; 0x09
    26ae:	36 c0       	rjmp	.+108    	; 0x271c <LCD_WriteNumber8Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	9a 81       	ldd	r25, Y+2	; 0x02
    26b4:	ab 81       	ldd	r26, Y+3	; 0x03
    26b6:	bc 81       	ldd	r27, Y+4	; 0x04
    26b8:	2a e0       	ldi	r18, 0x0A	; 10
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	50 e0       	ldi	r21, 0x00	; 0
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__mulsi3>
    26c8:	7b 01       	movw	r14, r22
    26ca:	8c 01       	movw	r16, r24
    26cc:	8e 81       	ldd	r24, Y+6	; 0x06
    26ce:	9f 81       	ldd	r25, Y+7	; 0x07
    26d0:	a8 85       	ldd	r26, Y+8	; 0x08
    26d2:	b9 85       	ldd	r27, Y+9	; 0x09
    26d4:	2a e0       	ldi	r18, 0x0A	; 10
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	8e 0d       	add	r24, r14
    26ea:	9f 1d       	adc	r25, r15
    26ec:	a0 1f       	adc	r26, r16
    26ee:	b1 1f       	adc	r27, r17
    26f0:	89 83       	std	Y+1, r24	; 0x01
    26f2:	9a 83       	std	Y+2, r25	; 0x02
    26f4:	ab 83       	std	Y+3, r26	; 0x03
    26f6:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	9f 81       	ldd	r25, Y+7	; 0x07
    26fc:	a8 85       	ldd	r26, Y+8	; 0x08
    26fe:	b9 85       	ldd	r27, Y+9	; 0x09
    2700:	2a e0       	ldi	r18, 0x0A	; 10
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e0       	ldi	r20, 0x00	; 0
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	bc 01       	movw	r22, r24
    270a:	cd 01       	movw	r24, r26
    270c:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    2710:	da 01       	movw	r26, r20
    2712:	c9 01       	movw	r24, r18
    2714:	8e 83       	std	Y+6, r24	; 0x06
    2716:	9f 83       	std	Y+7, r25	; 0x07
    2718:	a8 87       	std	Y+8, r26	; 0x08
    271a:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData8Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    271c:	8e 81       	ldd	r24, Y+6	; 0x06
    271e:	9f 81       	ldd	r25, Y+7	; 0x07
    2720:	a8 85       	ldd	r26, Y+8	; 0x08
    2722:	b9 85       	ldd	r27, Y+9	; 0x09
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	a1 05       	cpc	r26, r1
    2728:	b1 05       	cpc	r27, r1
    272a:	11 f6       	brne	.-124    	; 0x26b0 <LCD_WriteNumber8Bit+0x82>
    272c:	23 c0       	rjmp	.+70     	; 0x2774 <LCD_WriteNumber8Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData8Bit((NUM % 10) + 48);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	9a 81       	ldd	r25, Y+2	; 0x02
    2732:	ab 81       	ldd	r26, Y+3	; 0x03
    2734:	bc 81       	ldd	r27, Y+4	; 0x04
    2736:	2a e0       	ldi	r18, 0x0A	; 10
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	80 5d       	subi	r24, 0xD0	; 208
    274c:	0e 94 30 12 	call	0x2460	; 0x2460 <LCD_WriteData8Bit>
		NUM = (NUM / 10);
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	ab 81       	ldd	r26, Y+3	; 0x03
    2756:	bc 81       	ldd	r27, Y+4	; 0x04
    2758:	2a e0       	ldi	r18, 0x0A	; 10
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    2768:	da 01       	movw	r26, r20
    276a:	c9 01       	movw	r24, r18
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	ab 83       	std	Y+3, r26	; 0x03
    2772:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	ab 81       	ldd	r26, Y+3	; 0x03
    277a:	bc 81       	ldd	r27, Y+4	; 0x04
    277c:	81 30       	cpi	r24, 0x01	; 1
    277e:	91 05       	cpc	r25, r1
    2780:	a1 05       	cpc	r26, r1
    2782:	b1 05       	cpc	r27, r1
    2784:	a1 f6       	brne	.-88     	; 0x272e <LCD_WriteNumber8Bit+0x100>
		LCD_WriteData8Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    278c:	29 96       	adiw	r28, 0x09	; 9
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	08 95       	ret

000027a6 <LCD_WriteString4Bit>:
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <LCD_WriteString4Bit+0x6>
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_WriteString4Bit+0x8>
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    27b6:	1a 82       	std	Y+2, r1	; 0x02
	u8 i=0;
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	0e c0       	rjmp	.+28     	; 0x27d8 <LCD_WriteString4Bit+0x32>
	while(string[i] != '\0'){
		LCD_WriteData4Bit(string[i]);
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	fc 01       	movw	r30, r24
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	80 81       	ld	r24, Z
    27ce:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
		i++;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	8f 5f       	subi	r24, 0xFF	; 255
    27d6:	89 83       	std	Y+1, r24	; 0x01
}
/******************************************************************/
ES_t LCD_WriteString4Bit(char *string){
	ES_t Local_enuErrorstate = ES_NOK;
	u8 i=0;
	while(string[i] != '\0'){
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	28 2f       	mov	r18, r24
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	9c 81       	ldd	r25, Y+4	; 0x04
    27e2:	fc 01       	movw	r30, r24
    27e4:	e2 0f       	add	r30, r18
    27e6:	f3 1f       	adc	r31, r19
    27e8:	80 81       	ld	r24, Z
    27ea:	88 23       	and	r24, r24
    27ec:	39 f7       	brne	.-50     	; 0x27bc <LCD_WriteString4Bit+0x16>
		LCD_WriteData4Bit(string[i]);
		i++;
	}
	Local_enuErrorstate = ES_OK;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    27f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <LCD_GoToXY4Bit>:

ES_t LCD_GoToXY4Bit(u8 X_Pos,u8 Y_Pos){
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LCD_GoToXY4Bit+0x6>
    2808:	00 d0       	rcall	.+0      	; 0x280a <LCD_GoToXY4Bit+0x8>
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	8b 83       	std	Y+3, r24	; 0x03
    2810:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2812:	1a 82       	std	Y+2, r1	; 0x02
	u8 Address;
	/*	Location at First row	*/
	if(Y_Pos == 0){
    2814:	8c 81       	ldd	r24, Y+4	; 0x04
    2816:	88 23       	and	r24, r24
    2818:	19 f4       	brne	.+6      	; 0x2820 <LCD_GoToXY4Bit+0x1e>
		Address = X_Pos;
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	06 c0       	rjmp	.+12     	; 0x282c <LCD_GoToXY4Bit+0x2a>
	}
	/*	Location at second Row	*/
	else if(Y_Pos == 1){
    2820:	8c 81       	ldd	r24, Y+4	; 0x04
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	19 f4       	brne	.+6      	; 0x282c <LCD_GoToXY4Bit+0x2a>
		Address = X_Pos + 0x40;
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	80 5c       	subi	r24, 0xC0	; 192
    282a:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand4Bit(128+Address);
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	80 58       	subi	r24, 0x80	; 128
    2830:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
	Local_enuErrorstate = ES_OK;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	8a 83       	std	Y+2, r24	; 0x02
	return Local_enuErrorstate;
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
}
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	08 95       	ret

00002848 <LCD_WriteNumber4Bit>:

ES_t LCD_WriteNumber4Bit(s32 Number){
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	29 97       	sbiw	r28, 0x09	; 9
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	6e 83       	std	Y+6, r22	; 0x06
    2866:	7f 83       	std	Y+7, r23	; 0x07
    2868:	88 87       	std	Y+8, r24	; 0x08
    286a:	99 87       	std	Y+9, r25	; 0x09
	ES_t Local_enuErrorstate = ES_NOK;
    286c:	1d 82       	std	Y+5, r1	; 0x05
	s32 NUM = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	a0 e0       	ldi	r26, 0x00	; 0
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	89 83       	std	Y+1, r24	; 0x01
    2878:	9a 83       	std	Y+2, r25	; 0x02
    287a:	ab 83       	std	Y+3, r26	; 0x03
    287c:	bc 83       	std	Y+4, r27	; 0x04
	if(Number == 0){
    287e:	8e 81       	ldd	r24, Y+6	; 0x06
    2880:	9f 81       	ldd	r25, Y+7	; 0x07
    2882:	a8 85       	ldd	r26, Y+8	; 0x08
    2884:	b9 85       	ldd	r27, Y+9	; 0x09
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	a1 05       	cpc	r26, r1
    288a:	b1 05       	cpc	r27, r1
    288c:	21 f4       	brne	.+8      	; 0x2896 <LCD_WriteNumber4Bit+0x4e>
		LCD_WriteData4Bit('0');
    288e:	80 e3       	ldi	r24, 0x30	; 48
    2890:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
    2894:	50 c0       	rjmp	.+160    	; 0x2936 <LCD_WriteNumber4Bit+0xee>
	}
	else if(Number < 0){
    2896:	8e 81       	ldd	r24, Y+6	; 0x06
    2898:	9f 81       	ldd	r25, Y+7	; 0x07
    289a:	a8 85       	ldd	r26, Y+8	; 0x08
    289c:	b9 85       	ldd	r27, Y+9	; 0x09
    289e:	bb 23       	and	r27, r27
    28a0:	0c f0       	brlt	.+2      	; 0x28a4 <LCD_WriteNumber4Bit+0x5c>
    28a2:	49 c0       	rjmp	.+146    	; 0x2936 <LCD_WriteNumber4Bit+0xee>
		LCD_WriteData4Bit('-');
    28a4:	8d e2       	ldi	r24, 0x2D	; 45
    28a6:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
		Number = Number * (-1);
    28aa:	8e 81       	ldd	r24, Y+6	; 0x06
    28ac:	9f 81       	ldd	r25, Y+7	; 0x07
    28ae:	a8 85       	ldd	r26, Y+8	; 0x08
    28b0:	b9 85       	ldd	r27, Y+9	; 0x09
    28b2:	b0 95       	com	r27
    28b4:	a0 95       	com	r26
    28b6:	90 95       	com	r25
    28b8:	81 95       	neg	r24
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	af 4f       	sbci	r26, 0xFF	; 255
    28be:	bf 4f       	sbci	r27, 0xFF	; 255
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	9f 83       	std	Y+7, r25	; 0x07
    28c4:	a8 87       	std	Y+8, r26	; 0x08
    28c6:	b9 87       	std	Y+9, r27	; 0x09
    28c8:	36 c0       	rjmp	.+108    	; 0x2936 <LCD_WriteNumber4Bit+0xee>
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	9a 81       	ldd	r25, Y+2	; 0x02
    28ce:	ab 81       	ldd	r26, Y+3	; 0x03
    28d0:	bc 81       	ldd	r27, Y+4	; 0x04
    28d2:	2a e0       	ldi	r18, 0x0A	; 10
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 28 27 	call	0x4e50	; 0x4e50 <__mulsi3>
    28e2:	7b 01       	movw	r14, r22
    28e4:	8c 01       	movw	r16, r24
    28e6:	8e 81       	ldd	r24, Y+6	; 0x06
    28e8:	9f 81       	ldd	r25, Y+7	; 0x07
    28ea:	a8 85       	ldd	r26, Y+8	; 0x08
    28ec:	b9 85       	ldd	r27, Y+9	; 0x09
    28ee:	2a e0       	ldi	r18, 0x0A	; 10
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	40 e0       	ldi	r20, 0x00	; 0
    28f4:	50 e0       	ldi	r21, 0x00	; 0
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8e 0d       	add	r24, r14
    2904:	9f 1d       	adc	r25, r15
    2906:	a0 1f       	adc	r26, r16
    2908:	b1 1f       	adc	r27, r17
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	9a 83       	std	Y+2, r25	; 0x02
    290e:	ab 83       	std	Y+3, r26	; 0x03
    2910:	bc 83       	std	Y+4, r27	; 0x04
		Number = Number / 10;
    2912:	8e 81       	ldd	r24, Y+6	; 0x06
    2914:	9f 81       	ldd	r25, Y+7	; 0x07
    2916:	a8 85       	ldd	r26, Y+8	; 0x08
    2918:	b9 85       	ldd	r27, Y+9	; 0x09
    291a:	2a e0       	ldi	r18, 0x0A	; 10
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e0       	ldi	r20, 0x00	; 0
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	bc 01       	movw	r22, r24
    2924:	cd 01       	movw	r24, r26
    2926:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    292a:	da 01       	movw	r26, r20
    292c:	c9 01       	movw	r24, r18
    292e:	8e 83       	std	Y+6, r24	; 0x06
    2930:	9f 83       	std	Y+7, r25	; 0x07
    2932:	a8 87       	std	Y+8, r26	; 0x08
    2934:	b9 87       	std	Y+9, r27	; 0x09
	}
	else if(Number < 0){
		LCD_WriteData4Bit('-');
		Number = Number * (-1);
	}
	while(Number){
    2936:	8e 81       	ldd	r24, Y+6	; 0x06
    2938:	9f 81       	ldd	r25, Y+7	; 0x07
    293a:	a8 85       	ldd	r26, Y+8	; 0x08
    293c:	b9 85       	ldd	r27, Y+9	; 0x09
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	a1 05       	cpc	r26, r1
    2942:	b1 05       	cpc	r27, r1
    2944:	11 f6       	brne	.-124    	; 0x28ca <LCD_WriteNumber4Bit+0x82>
    2946:	23 c0       	rjmp	.+70     	; 0x298e <LCD_WriteNumber4Bit+0x146>
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
		LCD_WriteData4Bit((NUM % 10) + 48);
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	ab 81       	ldd	r26, Y+3	; 0x03
    294e:	bc 81       	ldd	r27, Y+4	; 0x04
    2950:	2a e0       	ldi	r18, 0x0A	; 10
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	80 5d       	subi	r24, 0xD0	; 208
    2966:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
		NUM = (NUM / 10);
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	ab 81       	ldd	r26, Y+3	; 0x03
    2970:	bc 81       	ldd	r27, Y+4	; 0x04
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <__divmodsi4>
    2982:	da 01       	movw	r26, r20
    2984:	c9 01       	movw	r24, r18
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	9a 83       	std	Y+2, r25	; 0x02
    298a:	ab 83       	std	Y+3, r26	; 0x03
    298c:	bc 83       	std	Y+4, r27	; 0x04
	}
	while(Number){
		NUM = ((NUM * 10) + (Number % 10));
		Number = Number / 10;
	}
	while(NUM != 1){
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	9a 81       	ldd	r25, Y+2	; 0x02
    2992:	ab 81       	ldd	r26, Y+3	; 0x03
    2994:	bc 81       	ldd	r27, Y+4	; 0x04
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	91 05       	cpc	r25, r1
    299a:	a1 05       	cpc	r26, r1
    299c:	b1 05       	cpc	r27, r1
    299e:	a1 f6       	brne	.-88     	; 0x2948 <LCD_WriteNumber4Bit+0x100>
		LCD_WriteData4Bit((NUM % 10) + 48);
		NUM = (NUM / 10);
	}
	Local_enuErrorstate = ES_OK;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	8d 83       	std	Y+5, r24	; 0x05
	return Local_enuErrorstate;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    29a6:	29 96       	adiw	r28, 0x09	; 9
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	ff 90       	pop	r15
    29bc:	ef 90       	pop	r14
    29be:	08 95       	ret

000029c0 <LCD_ClearDisplay8Bit>:

ES_t LCD_ClearDisplay8Bit(void){
    29c0:	df 93       	push	r29
    29c2:	cf 93       	push	r28
    29c4:	0f 92       	push	r0
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    29ca:	19 82       	std	Y+1, r1	; 0x01
	LCD_WriteCommand8Bit(1);
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
	Local_enuErrorstate = ES_OK;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorstate;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_ClearDisplay4Bit>:
ES_t LCD_ClearDisplay4Bit(void){
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	0f 92       	push	r0
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    29ea:	19 82       	std	Y+1, r1	; 0x01
		LCD_WriteCommand4Bit(1);
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
		Local_enuErrorstate = ES_OK;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	89 83       	std	Y+1, r24	; 0x01
			return Local_enuErrorstate;
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29f8:	0f 90       	pop	r0
    29fa:	cf 91       	pop	r28
    29fc:	df 91       	pop	r29
    29fe:	08 95       	ret

00002a00 <SetDirections8Bit>:



/*		LOCAL FUNCTIONS Implementation		*/

static void SetDirections8Bit(void){
    2a00:	df 93       	push	r29
    2a02:	cf 93       	push	r28
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xff);
    2a08:	82 e0       	ldi	r24, 0x02	; 2
    2a0a:	6f ef       	ldi	r22, 0xFF	; 255
    2a0c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    2a10:	83 e0       	ldi	r24, 0x03	; 3
    2a12:	66 e0       	ldi	r22, 0x06	; 6
    2a14:	41 e0       	ldi	r20, 0x01	; 1
    2a16:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    2a1a:	83 e0       	ldi	r24, 0x03	; 3
    2a1c:	67 e0       	ldi	r22, 0x07	; 7
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
}
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <SetDirections4Bit>:
static void SetDirections4Bit(void){
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(DATA_PORT_8_BIT,0xf);
    2a32:	82 e0       	ldi	r24, 0x02	; 2
    2a34:	6f e0       	ldi	r22, 0x0F	; 15
    2a36:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <DIO_SetPortDirection>
	DIO_SetPinDirection(CONTROL_PORT,RS_PIN,OUTPUT);
    2a3a:	83 e0       	ldi	r24, 0x03	; 3
    2a3c:	66 e0       	ldi	r22, 0x06	; 6
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
	DIO_SetPinDirection(CONTROL_PORT,E_PIN,OUTPUT);
    2a44:	83 e0       	ldi	r24, 0x03	; 3
    2a46:	67 e0       	ldi	r22, 0x07	; 7
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <SendEnablePulse>:


static void SendEnablePulse(void){
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	6c 97       	sbiw	r28, 0x1c	; 28
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(CONTROL_PORT,E_PIN,HIGH);
    2a68:	83 e0       	ldi	r24, 0x03	; 3
    2a6a:	67 e0       	ldi	r22, 0x07	; 7
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a0 e0       	ldi	r26, 0x00	; 0
    2a78:	b0 e4       	ldi	r27, 0x40	; 64
    2a7a:	89 8f       	std	Y+25, r24	; 0x19
    2a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    2a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    2a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a82:	69 8d       	ldd	r22, Y+25	; 0x19
    2a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4a ef       	ldi	r20, 0xFA	; 250
    2a90:	54 e4       	ldi	r21, 0x44	; 68
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	8d 8b       	std	Y+21, r24	; 0x15
    2a9c:	9e 8b       	std	Y+22, r25	; 0x16
    2a9e:	af 8b       	std	Y+23, r26	; 0x17
    2aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e8       	ldi	r20, 0x80	; 128
    2ab0:	5f e3       	ldi	r21, 0x3F	; 63
    2ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ab6:	88 23       	and	r24, r24
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <SendEnablePulse+0x70>
		__ticks = 1;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	9c 8b       	std	Y+20, r25	; 0x14
    2ac0:	8b 8b       	std	Y+19, r24	; 0x13
    2ac2:	3f c0       	rjmp	.+126    	; 0x2b42 <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	3f ef       	ldi	r19, 0xFF	; 255
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	57 e4       	ldi	r21, 0x47	; 71
    2ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	4c f5       	brge	.+82     	; 0x2b2e <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2adc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e2       	ldi	r20, 0x20	; 32
    2aea:	51 e4       	ldi	r21, 0x41	; 65
    2aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	0f c0       	rjmp	.+30     	; 0x2b24 <SendEnablePulse+0xd0>
    2b06:	88 ec       	ldi	r24, 0xC8	; 200
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	9a 8b       	std	Y+18, r25	; 0x12
    2b0c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b0e:	89 89       	ldd	r24, Y+17	; 0x11
    2b10:	9a 89       	ldd	r25, Y+18	; 0x12
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <SendEnablePulse+0xbe>
    2b16:	9a 8b       	std	Y+18, r25	; 0x12
    2b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	69 f7       	brne	.-38     	; 0x2b06 <SendEnablePulse+0xb2>
    2b2c:	14 c0       	rjmp	.+40     	; 0x2b56 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b30:	7e 89       	ldd	r23, Y+22	; 0x16
    2b32:	8f 89       	ldd	r24, Y+23	; 0x17
    2b34:	98 8d       	ldd	r25, Y+24	; 0x18
    2b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	9c 8b       	std	Y+20, r25	; 0x14
    2b40:	8b 8b       	std	Y+19, r24	; 0x13
    2b42:	8b 89       	ldd	r24, Y+19	; 0x13
    2b44:	9c 89       	ldd	r25, Y+20	; 0x14
    2b46:	98 8b       	std	Y+16, r25	; 0x10
    2b48:	8f 87       	std	Y+15, r24	; 0x0f
    2b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4c:	98 89       	ldd	r25, Y+16	; 0x10
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	f1 f7       	brne	.-4      	; 0x2b4e <SendEnablePulse+0xfa>
    2b52:	98 8b       	std	Y+16, r25	; 0x10
    2b54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(CONTROL_PORT,E_PIN,LOW);
    2b56:	83 e0       	ldi	r24, 0x03	; 3
    2b58:	67 e0       	ldi	r22, 0x07	; 7
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 ea       	ldi	r26, 0xA0	; 160
    2b66:	b0 e4       	ldi	r27, 0x40	; 64
    2b68:	8b 87       	std	Y+11, r24	; 0x0b
    2b6a:	9c 87       	std	Y+12, r25	; 0x0c
    2b6c:	ad 87       	std	Y+13, r26	; 0x0d
    2b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	4a ef       	ldi	r20, 0xFA	; 250
    2b7e:	54 e4       	ldi	r21, 0x44	; 68
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	8f 83       	std	Y+7, r24	; 0x07
    2b8a:	98 87       	std	Y+8, r25	; 0x08
    2b8c:	a9 87       	std	Y+9, r26	; 0x09
    2b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b90:	6f 81       	ldd	r22, Y+7	; 0x07
    2b92:	78 85       	ldd	r23, Y+8	; 0x08
    2b94:	89 85       	ldd	r24, Y+9	; 0x09
    2b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e8       	ldi	r20, 0x80	; 128
    2b9e:	5f e3       	ldi	r21, 0x3F	; 63
    2ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba4:	88 23       	and	r24, r24
    2ba6:	2c f4       	brge	.+10     	; 0x2bb2 <SendEnablePulse+0x15e>
		__ticks = 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	9e 83       	std	Y+6, r25	; 0x06
    2bae:	8d 83       	std	Y+5, r24	; 0x05
    2bb0:	3f c0       	rjmp	.+126    	; 0x2c30 <SendEnablePulse+0x1dc>
	else if (__tmp > 65535)
    2bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb4:	78 85       	ldd	r23, Y+8	; 0x08
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	3f ef       	ldi	r19, 0xFF	; 255
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	57 e4       	ldi	r21, 0x47	; 71
    2bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	4c f5       	brge	.+82     	; 0x2c1c <SendEnablePulse+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e2       	ldi	r20, 0x20	; 32
    2bd8:	51 e4       	ldi	r21, 0x41	; 65
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	bc 01       	movw	r22, r24
    2be4:	cd 01       	movw	r24, r26
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
    2bf2:	0f c0       	rjmp	.+30     	; 0x2c12 <SendEnablePulse+0x1be>
    2bf4:	88 ec       	ldi	r24, 0xC8	; 200
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <SendEnablePulse+0x1ac>
    2c04:	9c 83       	std	Y+4, r25	; 0x04
    2c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c08:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	69 f7       	brne	.-38     	; 0x2bf4 <SendEnablePulse+0x1a0>
    2c1a:	14 c0       	rjmp	.+40     	; 0x2c44 <SendEnablePulse+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1e:	78 85       	ldd	r23, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	9e 83       	std	Y+6, r25	; 0x06
    2c2e:	8d 83       	std	Y+5, r24	; 0x05
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	9a 83       	std	Y+2, r25	; 0x02
    2c36:	89 83       	std	Y+1, r24	; 0x01
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	f1 f7       	brne	.-4      	; 0x2c3c <SendEnablePulse+0x1e8>
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2c44:	6c 96       	adiw	r28, 0x1c	; 28
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <FunctionSet8Bit>:
/****************************************************/
static void FunctionSet8Bit(void){
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
    2c5e:	2e 97       	sbiw	r28, 0x0e	; 14
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a8 e4       	ldi	r26, 0x48	; 72
    2c70:	b2 e4       	ldi	r27, 0x42	; 66
    2c72:	8b 87       	std	Y+11, r24	; 0x0b
    2c74:	9c 87       	std	Y+12, r25	; 0x0c
    2c76:	ad 87       	std	Y+13, r26	; 0x0d
    2c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a ef       	ldi	r20, 0xFA	; 250
    2c88:	54 e4       	ldi	r21, 0x44	; 68
    2c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8f 83       	std	Y+7, r24	; 0x07
    2c94:	98 87       	std	Y+8, r25	; 0x08
    2c96:	a9 87       	std	Y+9, r26	; 0x09
    2c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9c:	78 85       	ldd	r23, Y+8	; 0x08
    2c9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <FunctionSet8Bit+0x66>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <FunctionSet8Bit+0xe4>
	else if (__tmp > 65535)
    2cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cbe:	78 85       	ldd	r23, Y+8	; 0x08
    2cc0:	89 85       	ldd	r24, Y+9	; 0x09
    2cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	4c f5       	brge	.+82     	; 0x2d26 <FunctionSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	51 e4       	ldi	r21, 0x41	; 65
    2ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <FunctionSet8Bit+0xc6>
    2cfe:	88 ec       	ldi	r24, 0xC8	; 200
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9c 83       	std	Y+4, r25	; 0x04
    2d04:	8b 83       	std	Y+3, r24	; 0x03
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <FunctionSet8Bit+0xb4>
    2d0e:	9c 83       	std	Y+4, r25	; 0x04
    2d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	8d 81       	ldd	r24, Y+5	; 0x05
    2d14:	9e 81       	ldd	r25, Y+6	; 0x06
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	69 f7       	brne	.-38     	; 0x2cfe <FunctionSet8Bit+0xa8>
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <FunctionSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	9a 83       	std	Y+2, r25	; 0x02
    2d40:	89 83       	std	Y+1, r24	; 0x01
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	9a 81       	ldd	r25, Y+2	; 0x02
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <FunctionSet8Bit+0xf0>
    2d4a:	9a 83       	std	Y+2, r25	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_WriteCommand8Bit(0x3C);
    2d4e:	8c e3       	ldi	r24, 0x3C	; 60
    2d50:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
}
    2d54:	2e 96       	adiw	r28, 0x0e	; 14
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	cf 91       	pop	r28
    2d62:	df 91       	pop	r29
    2d64:	08 95       	ret

00002d66 <DisplayOnOffControl8Bit>:
static void DisplayOnOffControl8Bit(void){
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62
    2d6e:	68 97       	sbiw	r28, 0x18	; 24
    2d70:	0f b6       	in	r0, 0x3f	; 63
    2d72:	f8 94       	cli
    2d74:	de bf       	out	0x3e, r29	; 62
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	cd bf       	out	0x3d, r28	; 61
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a8 e4       	ldi	r26, 0x48	; 72
    2d80:	b2 e4       	ldi	r27, 0x42	; 66
    2d82:	8d 8b       	std	Y+21, r24	; 0x15
    2d84:	9e 8b       	std	Y+22, r25	; 0x16
    2d86:	af 8b       	std	Y+23, r26	; 0x17
    2d88:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	2b ea       	ldi	r18, 0xAB	; 171
    2d94:	3a ea       	ldi	r19, 0xAA	; 170
    2d96:	4a e2       	ldi	r20, 0x2A	; 42
    2d98:	50 e4       	ldi	r21, 0x40	; 64
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	89 8b       	std	Y+17, r24	; 0x11
    2da4:	9a 8b       	std	Y+18, r25	; 0x12
    2da6:	ab 8b       	std	Y+19, r26	; 0x13
    2da8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2daa:	69 89       	ldd	r22, Y+17	; 0x11
    2dac:	7a 89       	ldd	r23, Y+18	; 0x12
    2dae:	8b 89       	ldd	r24, Y+19	; 0x13
    2db0:	9c 89       	ldd	r25, Y+20	; 0x14
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	1c f4       	brge	.+6      	; 0x2dc8 <DisplayOnOffControl8Bit+0x62>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	88 8b       	std	Y+16, r24	; 0x10
    2dc6:	91 c0       	rjmp	.+290    	; 0x2eea <DisplayOnOffControl8Bit+0x184>
	else if (__tmp > 255)
    2dc8:	69 89       	ldd	r22, Y+17	; 0x11
    2dca:	7a 89       	ldd	r23, Y+18	; 0x12
    2dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dce:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	53 e4       	ldi	r21, 0x43	; 67
    2dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	0c f0       	brlt	.+2      	; 0x2de2 <DisplayOnOffControl8Bit+0x7c>
    2de0:	7b c0       	rjmp	.+246    	; 0x2ed8 <DisplayOnOffControl8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2de2:	6d 89       	ldd	r22, Y+21	; 0x15
    2de4:	7e 89       	ldd	r23, Y+22	; 0x16
    2de6:	8f 89       	ldd	r24, Y+23	; 0x17
    2de8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	4a e7       	ldi	r20, 0x7A	; 122
    2df0:	54 e4       	ldi	r21, 0x44	; 68
    2df2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	8c 87       	std	Y+12, r24	; 0x0c
    2dfc:	9d 87       	std	Y+13, r25	; 0x0d
    2dfe:	ae 87       	std	Y+14, r26	; 0x0e
    2e00:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e04:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e06:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e08:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e0a:	20 e0       	ldi	r18, 0x00	; 0
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	4a ef       	ldi	r20, 0xFA	; 250
    2e10:	54 e4       	ldi	r21, 0x44	; 68
    2e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e16:	dc 01       	movw	r26, r24
    2e18:	cb 01       	movw	r24, r22
    2e1a:	88 87       	std	Y+8, r24	; 0x08
    2e1c:	99 87       	std	Y+9, r25	; 0x09
    2e1e:	aa 87       	std	Y+10, r26	; 0x0a
    2e20:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2e22:	68 85       	ldd	r22, Y+8	; 0x08
    2e24:	79 85       	ldd	r23, Y+9	; 0x09
    2e26:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e28:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e8       	ldi	r20, 0x80	; 128
    2e30:	5f e3       	ldi	r21, 0x3F	; 63
    2e32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e36:	88 23       	and	r24, r24
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <DisplayOnOffControl8Bit+0xde>
		__ticks = 1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9f 83       	std	Y+7, r25	; 0x07
    2e40:	8e 83       	std	Y+6, r24	; 0x06
    2e42:	3f c0       	rjmp	.+126    	; 0x2ec2 <DisplayOnOffControl8Bit+0x15c>
	else if (__tmp > 65535)
    2e44:	68 85       	ldd	r22, Y+8	; 0x08
    2e46:	79 85       	ldd	r23, Y+9	; 0x09
    2e48:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	3f ef       	ldi	r19, 0xFF	; 255
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	57 e4       	ldi	r21, 0x47	; 71
    2e54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e58:	18 16       	cp	r1, r24
    2e5a:	4c f5       	brge	.+82     	; 0x2eae <DisplayOnOffControl8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e5c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2e5e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2e60:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e62:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e2       	ldi	r20, 0x20	; 32
    2e6a:	51 e4       	ldi	r21, 0x41	; 65
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	bc 01       	movw	r22, r24
    2e76:	cd 01       	movw	r24, r26
    2e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	9f 83       	std	Y+7, r25	; 0x07
    2e82:	8e 83       	std	Y+6, r24	; 0x06
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <DisplayOnOffControl8Bit+0x13e>
    2e86:	88 ec       	ldi	r24, 0xC8	; 200
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9d 83       	std	Y+5, r25	; 0x05
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
    2e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e90:	9d 81       	ldd	r25, Y+5	; 0x05
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <DisplayOnOffControl8Bit+0x12c>
    2e96:	9d 83       	std	Y+5, r25	; 0x05
    2e98:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	9f 83       	std	Y+7, r25	; 0x07
    2ea2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ea6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea8:	00 97       	sbiw	r24, 0x00	; 0
    2eaa:	69 f7       	brne	.-38     	; 0x2e86 <DisplayOnOffControl8Bit+0x120>
    2eac:	24 c0       	rjmp	.+72     	; 0x2ef6 <DisplayOnOffControl8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eae:	68 85       	ldd	r22, Y+8	; 0x08
    2eb0:	79 85       	ldd	r23, Y+9	; 0x09
    2eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eba:	dc 01       	movw	r26, r24
    2ebc:	cb 01       	movw	r24, r22
    2ebe:	9f 83       	std	Y+7, r25	; 0x07
    2ec0:	8e 83       	std	Y+6, r24	; 0x06
    2ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec6:	9b 83       	std	Y+3, r25	; 0x03
    2ec8:	8a 83       	std	Y+2, r24	; 0x02
    2eca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <DisplayOnOffControl8Bit+0x168>
    2ed2:	9b 83       	std	Y+3, r25	; 0x03
    2ed4:	8a 83       	std	Y+2, r24	; 0x02
    2ed6:	0f c0       	rjmp	.+30     	; 0x2ef6 <DisplayOnOffControl8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ed8:	69 89       	ldd	r22, Y+17	; 0x11
    2eda:	7a 89       	ldd	r23, Y+18	; 0x12
    2edc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ede:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	88 8b       	std	Y+16, r24	; 0x10
    2eea:	88 89       	ldd	r24, Y+16	; 0x10
    2eec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	8a 95       	dec	r24
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <DisplayOnOffControl8Bit+0x18a>
    2ef4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x0E);
    2ef6:	8e e0       	ldi	r24, 0x0E	; 14
    2ef8:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
}
    2efc:	68 96       	adiw	r28, 0x18	; 24
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <DisplayClear8Bit>:
static void DisplayClear8Bit(void){
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	68 97       	sbiw	r28, 0x18	; 24
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	a8 e4       	ldi	r26, 0x48	; 72
    2f28:	b2 e4       	ldi	r27, 0x42	; 66
    2f2a:	8d 8b       	std	Y+21, r24	; 0x15
    2f2c:	9e 8b       	std	Y+22, r25	; 0x16
    2f2e:	af 8b       	std	Y+23, r26	; 0x17
    2f30:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f32:	6d 89       	ldd	r22, Y+21	; 0x15
    2f34:	7e 89       	ldd	r23, Y+22	; 0x16
    2f36:	8f 89       	ldd	r24, Y+23	; 0x17
    2f38:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3a:	2b ea       	ldi	r18, 0xAB	; 171
    2f3c:	3a ea       	ldi	r19, 0xAA	; 170
    2f3e:	4a e2       	ldi	r20, 0x2A	; 42
    2f40:	50 e4       	ldi	r21, 0x40	; 64
    2f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	89 8b       	std	Y+17, r24	; 0x11
    2f4c:	9a 8b       	std	Y+18, r25	; 0x12
    2f4e:	ab 8b       	std	Y+19, r26	; 0x13
    2f50:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f52:	69 89       	ldd	r22, Y+17	; 0x11
    2f54:	7a 89       	ldd	r23, Y+18	; 0x12
    2f56:	8b 89       	ldd	r24, Y+19	; 0x13
    2f58:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e8       	ldi	r20, 0x80	; 128
    2f60:	5f e3       	ldi	r21, 0x3F	; 63
    2f62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f66:	88 23       	and	r24, r24
    2f68:	1c f4       	brge	.+6      	; 0x2f70 <DisplayClear8Bit+0x62>
		__ticks = 1;
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	88 8b       	std	Y+16, r24	; 0x10
    2f6e:	91 c0       	rjmp	.+290    	; 0x3092 <DisplayClear8Bit+0x184>
	else if (__tmp > 255)
    2f70:	69 89       	ldd	r22, Y+17	; 0x11
    2f72:	7a 89       	ldd	r23, Y+18	; 0x12
    2f74:	8b 89       	ldd	r24, Y+19	; 0x13
    2f76:	9c 89       	ldd	r25, Y+20	; 0x14
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	53 e4       	ldi	r21, 0x43	; 67
    2f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	0c f0       	brlt	.+2      	; 0x2f8a <DisplayClear8Bit+0x7c>
    2f88:	7b c0       	rjmp	.+246    	; 0x3080 <DisplayClear8Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    2f8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f90:	98 8d       	ldd	r25, Y+24	; 0x18
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	4a e7       	ldi	r20, 0x7A	; 122
    2f98:	54 e4       	ldi	r21, 0x44	; 68
    2f9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8c 87       	std	Y+12, r24	; 0x0c
    2fa4:	9d 87       	std	Y+13, r25	; 0x0d
    2fa6:	ae 87       	std	Y+14, r26	; 0x0e
    2fa8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2faa:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fac:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fae:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb0:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	4a ef       	ldi	r20, 0xFA	; 250
    2fb8:	54 e4       	ldi	r21, 0x44	; 68
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	88 87       	std	Y+8, r24	; 0x08
    2fc4:	99 87       	std	Y+9, r25	; 0x09
    2fc6:	aa 87       	std	Y+10, r26	; 0x0a
    2fc8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fca:	68 85       	ldd	r22, Y+8	; 0x08
    2fcc:	79 85       	ldd	r23, Y+9	; 0x09
    2fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e8       	ldi	r20, 0x80	; 128
    2fd8:	5f e3       	ldi	r21, 0x3F	; 63
    2fda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fde:	88 23       	and	r24, r24
    2fe0:	2c f4       	brge	.+10     	; 0x2fec <DisplayClear8Bit+0xde>
		__ticks = 1;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	9f 83       	std	Y+7, r25	; 0x07
    2fe8:	8e 83       	std	Y+6, r24	; 0x06
    2fea:	3f c0       	rjmp	.+126    	; 0x306a <DisplayClear8Bit+0x15c>
	else if (__tmp > 65535)
    2fec:	68 85       	ldd	r22, Y+8	; 0x08
    2fee:	79 85       	ldd	r23, Y+9	; 0x09
    2ff0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	3f ef       	ldi	r19, 0xFF	; 255
    2ff8:	4f e7       	ldi	r20, 0x7F	; 127
    2ffa:	57 e4       	ldi	r21, 0x47	; 71
    2ffc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3000:	18 16       	cp	r1, r24
    3002:	4c f5       	brge	.+82     	; 0x3056 <DisplayClear8Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3004:	6c 85       	ldd	r22, Y+12	; 0x0c
    3006:	7d 85       	ldd	r23, Y+13	; 0x0d
    3008:	8e 85       	ldd	r24, Y+14	; 0x0e
    300a:	9f 85       	ldd	r25, Y+15	; 0x0f
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	40 e2       	ldi	r20, 0x20	; 32
    3012:	51 e4       	ldi	r21, 0x41	; 65
    3014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	bc 01       	movw	r22, r24
    301e:	cd 01       	movw	r24, r26
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9f 83       	std	Y+7, r25	; 0x07
    302a:	8e 83       	std	Y+6, r24	; 0x06
    302c:	0f c0       	rjmp	.+30     	; 0x304c <DisplayClear8Bit+0x13e>
    302e:	88 ec       	ldi	r24, 0xC8	; 200
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9d 83       	std	Y+5, r25	; 0x05
    3034:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3036:	8c 81       	ldd	r24, Y+4	; 0x04
    3038:	9d 81       	ldd	r25, Y+5	; 0x05
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <DisplayClear8Bit+0x12c>
    303e:	9d 83       	std	Y+5, r25	; 0x05
    3040:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	8e 81       	ldd	r24, Y+6	; 0x06
    3044:	9f 81       	ldd	r25, Y+7	; 0x07
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9f 83       	std	Y+7, r25	; 0x07
    304a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	8e 81       	ldd	r24, Y+6	; 0x06
    304e:	9f 81       	ldd	r25, Y+7	; 0x07
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	69 f7       	brne	.-38     	; 0x302e <DisplayClear8Bit+0x120>
    3054:	24 c0       	rjmp	.+72     	; 0x309e <DisplayClear8Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	68 85       	ldd	r22, Y+8	; 0x08
    3058:	79 85       	ldd	r23, Y+9	; 0x09
    305a:	8a 85       	ldd	r24, Y+10	; 0x0a
    305c:	9b 85       	ldd	r25, Y+11	; 0x0b
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9f 83       	std	Y+7, r25	; 0x07
    3068:	8e 83       	std	Y+6, r24	; 0x06
    306a:	8e 81       	ldd	r24, Y+6	; 0x06
    306c:	9f 81       	ldd	r25, Y+7	; 0x07
    306e:	9b 83       	std	Y+3, r25	; 0x03
    3070:	8a 83       	std	Y+2, r24	; 0x02
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	f1 f7       	brne	.-4      	; 0x3076 <DisplayClear8Bit+0x168>
    307a:	9b 83       	std	Y+3, r25	; 0x03
    307c:	8a 83       	std	Y+2, r24	; 0x02
    307e:	0f c0       	rjmp	.+30     	; 0x309e <DisplayClear8Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3080:	69 89       	ldd	r22, Y+17	; 0x11
    3082:	7a 89       	ldd	r23, Y+18	; 0x12
    3084:	8b 89       	ldd	r24, Y+19	; 0x13
    3086:	9c 89       	ldd	r25, Y+20	; 0x14
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	88 8b       	std	Y+16, r24	; 0x10
    3092:	88 89       	ldd	r24, Y+16	; 0x10
    3094:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	8a 95       	dec	r24
    309a:	f1 f7       	brne	.-4      	; 0x3098 <DisplayClear8Bit+0x18a>
    309c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	LCD_WriteCommand8Bit(0x01);
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
}
    30a4:	68 96       	adiw	r28, 0x18	; 24
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <EntryModeSet8Bit>:
static void EntryModeSet8Bit(void){
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
    30be:	2e 97       	sbiw	r28, 0x0e	; 14
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	de bf       	out	0x3e, r29	; 62
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	cd bf       	out	0x3d, r28	; 61
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	a0 e0       	ldi	r26, 0x00	; 0
    30d0:	b0 e4       	ldi	r27, 0x40	; 64
    30d2:	8b 87       	std	Y+11, r24	; 0x0b
    30d4:	9c 87       	std	Y+12, r25	; 0x0c
    30d6:	ad 87       	std	Y+13, r26	; 0x0d
    30d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30da:	6b 85       	ldd	r22, Y+11	; 0x0b
    30dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    30de:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4a ef       	ldi	r20, 0xFA	; 250
    30e8:	54 e4       	ldi	r21, 0x44	; 68
    30ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	8f 83       	std	Y+7, r24	; 0x07
    30f4:	98 87       	std	Y+8, r25	; 0x08
    30f6:	a9 87       	std	Y+9, r26	; 0x09
    30f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30fa:	6f 81       	ldd	r22, Y+7	; 0x07
    30fc:	78 85       	ldd	r23, Y+8	; 0x08
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	9a 85       	ldd	r25, Y+10	; 0x0a
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e8       	ldi	r20, 0x80	; 128
    3108:	5f e3       	ldi	r21, 0x3F	; 63
    310a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    310e:	88 23       	and	r24, r24
    3110:	2c f4       	brge	.+10     	; 0x311c <EntryModeSet8Bit+0x66>
		__ticks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	3f c0       	rjmp	.+126    	; 0x319a <EntryModeSet8Bit+0xe4>
	else if (__tmp > 65535)
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3130:	18 16       	cp	r1, r24
    3132:	4c f5       	brge	.+82     	; 0x3186 <EntryModeSet8Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	6b 85       	ldd	r22, Y+11	; 0x0b
    3136:	7c 85       	ldd	r23, Y+12	; 0x0c
    3138:	8d 85       	ldd	r24, Y+13	; 0x0d
    313a:	9e 85       	ldd	r25, Y+14	; 0x0e
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	51 e4       	ldi	r21, 0x41	; 65
    3144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9e 83       	std	Y+6, r25	; 0x06
    315a:	8d 83       	std	Y+5, r24	; 0x05
    315c:	0f c0       	rjmp	.+30     	; 0x317c <EntryModeSet8Bit+0xc6>
    315e:	88 ec       	ldi	r24, 0xC8	; 200
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	9c 83       	std	Y+4, r25	; 0x04
    3164:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	9c 81       	ldd	r25, Y+4	; 0x04
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <EntryModeSet8Bit+0xb4>
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3172:	8d 81       	ldd	r24, Y+5	; 0x05
    3174:	9e 81       	ldd	r25, Y+6	; 0x06
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	69 f7       	brne	.-38     	; 0x315e <EntryModeSet8Bit+0xa8>
    3184:	14 c0       	rjmp	.+40     	; 0x31ae <EntryModeSet8Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3186:	6f 81       	ldd	r22, Y+7	; 0x07
    3188:	78 85       	ldd	r23, Y+8	; 0x08
    318a:	89 85       	ldd	r24, Y+9	; 0x09
    318c:	9a 85       	ldd	r25, Y+10	; 0x0a
    318e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9e 83       	std	Y+6, r25	; 0x06
    3198:	8d 83       	std	Y+5, r24	; 0x05
    319a:	8d 81       	ldd	r24, Y+5	; 0x05
    319c:	9e 81       	ldd	r25, Y+6	; 0x06
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <EntryModeSet8Bit+0xf0>
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand8Bit(0x06);
    31ae:	86 e0       	ldi	r24, 0x06	; 6
    31b0:	0e 94 16 12 	call	0x242c	; 0x242c <LCD_WriteCommand8Bit>
}
    31b4:	2e 96       	adiw	r28, 0x0e	; 14
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <FunctionSet4Bit>:
/*****************************************************/
static void FunctionSet4Bit(void){
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	a6 97       	sbiw	r28, 0x26	; 38
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	a8 e4       	ldi	r26, 0x48	; 72
    31e0:	b2 e4       	ldi	r27, 0x42	; 66
    31e2:	8b a3       	std	Y+35, r24	; 0x23
    31e4:	9c a3       	std	Y+36, r25	; 0x24
    31e6:	ad a3       	std	Y+37, r26	; 0x25
    31e8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ea:	6b a1       	ldd	r22, Y+35	; 0x23
    31ec:	7c a1       	ldd	r23, Y+36	; 0x24
    31ee:	8d a1       	ldd	r24, Y+37	; 0x25
    31f0:	9e a1       	ldd	r25, Y+38	; 0x26
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a ef       	ldi	r20, 0xFA	; 250
    31f8:	54 e4       	ldi	r21, 0x44	; 68
    31fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	8f 8f       	std	Y+31, r24	; 0x1f
    3204:	98 a3       	std	Y+32, r25	; 0x20
    3206:	a9 a3       	std	Y+33, r26	; 0x21
    3208:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    320a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    320c:	78 a1       	ldd	r23, Y+32	; 0x20
    320e:	89 a1       	ldd	r24, Y+33	; 0x21
    3210:	9a a1       	ldd	r25, Y+34	; 0x22
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e8       	ldi	r20, 0x80	; 128
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    321e:	88 23       	and	r24, r24
    3220:	2c f4       	brge	.+10     	; 0x322c <FunctionSet4Bit+0x66>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9e 8f       	std	Y+30, r25	; 0x1e
    3228:	8d 8f       	std	Y+29, r24	; 0x1d
    322a:	3f c0       	rjmp	.+126    	; 0x32aa <FunctionSet4Bit+0xe4>
	else if (__tmp > 65535)
    322c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    322e:	78 a1       	ldd	r23, Y+32	; 0x20
    3230:	89 a1       	ldd	r24, Y+33	; 0x21
    3232:	9a a1       	ldd	r25, Y+34	; 0x22
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	3f ef       	ldi	r19, 0xFF	; 255
    3238:	4f e7       	ldi	r20, 0x7F	; 127
    323a:	57 e4       	ldi	r21, 0x47	; 71
    323c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3240:	18 16       	cp	r1, r24
    3242:	4c f5       	brge	.+82     	; 0x3296 <FunctionSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3244:	6b a1       	ldd	r22, Y+35	; 0x23
    3246:	7c a1       	ldd	r23, Y+36	; 0x24
    3248:	8d a1       	ldd	r24, Y+37	; 0x25
    324a:	9e a1       	ldd	r25, Y+38	; 0x26
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 e2       	ldi	r20, 0x20	; 32
    3252:	51 e4       	ldi	r21, 0x41	; 65
    3254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9e 8f       	std	Y+30, r25	; 0x1e
    326a:	8d 8f       	std	Y+29, r24	; 0x1d
    326c:	0f c0       	rjmp	.+30     	; 0x328c <FunctionSet4Bit+0xc6>
    326e:	88 ec       	ldi	r24, 0xC8	; 200
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9c 8f       	std	Y+28, r25	; 0x1c
    3274:	8b 8f       	std	Y+27, r24	; 0x1b
    3276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	f1 f7       	brne	.-4      	; 0x327a <FunctionSet4Bit+0xb4>
    327e:	9c 8f       	std	Y+28, r25	; 0x1c
    3280:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3282:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3284:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	9e 8f       	std	Y+30, r25	; 0x1e
    328a:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    328e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	69 f7       	brne	.-38     	; 0x326e <FunctionSet4Bit+0xa8>
    3294:	14 c0       	rjmp	.+40     	; 0x32be <FunctionSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3296:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3298:	78 a1       	ldd	r23, Y+32	; 0x20
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a2:	dc 01       	movw	r26, r24
    32a4:	cb 01       	movw	r24, r22
    32a6:	9e 8f       	std	Y+30, r25	; 0x1e
    32a8:	8d 8f       	std	Y+29, r24	; 0x1d
    32aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32ae:	9a 8f       	std	Y+26, r25	; 0x1a
    32b0:	89 8f       	std	Y+25, r24	; 0x19
    32b2:	89 8d       	ldd	r24, Y+25	; 0x19
    32b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    32b6:	01 97       	sbiw	r24, 0x01	; 1
    32b8:	f1 f7       	brne	.-4      	; 0x32b6 <FunctionSet4Bit+0xf0>
    32ba:	9a 8f       	std	Y+26, r25	; 0x1a
    32bc:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(50);
	LCD_WriteCommand4Bit(0x2);
    32be:	82 e0       	ldi	r24, 0x02	; 2
    32c0:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	a0 e2       	ldi	r26, 0x20	; 32
    32ca:	b1 e4       	ldi	r27, 0x41	; 65
    32cc:	8d 8b       	std	Y+21, r24	; 0x15
    32ce:	9e 8b       	std	Y+22, r25	; 0x16
    32d0:	af 8b       	std	Y+23, r26	; 0x17
    32d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32d4:	6d 89       	ldd	r22, Y+21	; 0x15
    32d6:	7e 89       	ldd	r23, Y+22	; 0x16
    32d8:	8f 89       	ldd	r24, Y+23	; 0x17
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	2b ea       	ldi	r18, 0xAB	; 171
    32de:	3a ea       	ldi	r19, 0xAA	; 170
    32e0:	4a e2       	ldi	r20, 0x2A	; 42
    32e2:	50 e4       	ldi	r21, 0x40	; 64
    32e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	89 8b       	std	Y+17, r24	; 0x11
    32ee:	9a 8b       	std	Y+18, r25	; 0x12
    32f0:	ab 8b       	std	Y+19, r26	; 0x13
    32f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32f4:	69 89       	ldd	r22, Y+17	; 0x11
    32f6:	7a 89       	ldd	r23, Y+18	; 0x12
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3308:	88 23       	and	r24, r24
    330a:	1c f4       	brge	.+6      	; 0x3312 <FunctionSet4Bit+0x14c>
		__ticks = 1;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	88 8b       	std	Y+16, r24	; 0x10
    3310:	91 c0       	rjmp	.+290    	; 0x3434 <FunctionSet4Bit+0x26e>
	else if (__tmp > 255)
    3312:	69 89       	ldd	r22, Y+17	; 0x11
    3314:	7a 89       	ldd	r23, Y+18	; 0x12
    3316:	8b 89       	ldd	r24, Y+19	; 0x13
    3318:	9c 89       	ldd	r25, Y+20	; 0x14
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	53 e4       	ldi	r21, 0x43	; 67
    3322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	0c f0       	brlt	.+2      	; 0x332c <FunctionSet4Bit+0x166>
    332a:	7b c0       	rjmp	.+246    	; 0x3422 <FunctionSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    332c:	6d 89       	ldd	r22, Y+21	; 0x15
    332e:	7e 89       	ldd	r23, Y+22	; 0x16
    3330:	8f 89       	ldd	r24, Y+23	; 0x17
    3332:	98 8d       	ldd	r25, Y+24	; 0x18
    3334:	20 e0       	ldi	r18, 0x00	; 0
    3336:	30 e0       	ldi	r19, 0x00	; 0
    3338:	4a e7       	ldi	r20, 0x7A	; 122
    333a:	54 e4       	ldi	r21, 0x44	; 68
    333c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	8c 87       	std	Y+12, r24	; 0x0c
    3346:	9d 87       	std	Y+13, r25	; 0x0d
    3348:	ae 87       	std	Y+14, r26	; 0x0e
    334a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    334c:	6c 85       	ldd	r22, Y+12	; 0x0c
    334e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3350:	8e 85       	ldd	r24, Y+14	; 0x0e
    3352:	9f 85       	ldd	r25, Y+15	; 0x0f
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	4a ef       	ldi	r20, 0xFA	; 250
    335a:	54 e4       	ldi	r21, 0x44	; 68
    335c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	88 87       	std	Y+8, r24	; 0x08
    3366:	99 87       	std	Y+9, r25	; 0x09
    3368:	aa 87       	std	Y+10, r26	; 0x0a
    336a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    336c:	68 85       	ldd	r22, Y+8	; 0x08
    336e:	79 85       	ldd	r23, Y+9	; 0x09
    3370:	8a 85       	ldd	r24, Y+10	; 0x0a
    3372:	9b 85       	ldd	r25, Y+11	; 0x0b
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e8       	ldi	r20, 0x80	; 128
    337a:	5f e3       	ldi	r21, 0x3F	; 63
    337c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3380:	88 23       	and	r24, r24
    3382:	2c f4       	brge	.+10     	; 0x338e <FunctionSet4Bit+0x1c8>
		__ticks = 1;
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	9f 83       	std	Y+7, r25	; 0x07
    338a:	8e 83       	std	Y+6, r24	; 0x06
    338c:	3f c0       	rjmp	.+126    	; 0x340c <FunctionSet4Bit+0x246>
	else if (__tmp > 65535)
    338e:	68 85       	ldd	r22, Y+8	; 0x08
    3390:	79 85       	ldd	r23, Y+9	; 0x09
    3392:	8a 85       	ldd	r24, Y+10	; 0x0a
    3394:	9b 85       	ldd	r25, Y+11	; 0x0b
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	3f ef       	ldi	r19, 0xFF	; 255
    339a:	4f e7       	ldi	r20, 0x7F	; 127
    339c:	57 e4       	ldi	r21, 0x47	; 71
    339e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33a2:	18 16       	cp	r1, r24
    33a4:	4c f5       	brge	.+82     	; 0x33f8 <FunctionSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    33a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    33aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    33ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	40 e2       	ldi	r20, 0x20	; 32
    33b4:	51 e4       	ldi	r21, 0x41	; 65
    33b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	bc 01       	movw	r22, r24
    33c0:	cd 01       	movw	r24, r26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9f 83       	std	Y+7, r25	; 0x07
    33cc:	8e 83       	std	Y+6, r24	; 0x06
    33ce:	0f c0       	rjmp	.+30     	; 0x33ee <FunctionSet4Bit+0x228>
    33d0:	88 ec       	ldi	r24, 0xC8	; 200
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	9d 83       	std	Y+5, r25	; 0x05
    33d6:	8c 83       	std	Y+4, r24	; 0x04
    33d8:	8c 81       	ldd	r24, Y+4	; 0x04
    33da:	9d 81       	ldd	r25, Y+5	; 0x05
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <FunctionSet4Bit+0x216>
    33e0:	9d 83       	std	Y+5, r25	; 0x05
    33e2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e4:	8e 81       	ldd	r24, Y+6	; 0x06
    33e6:	9f 81       	ldd	r25, Y+7	; 0x07
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	9f 83       	std	Y+7, r25	; 0x07
    33ec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ee:	8e 81       	ldd	r24, Y+6	; 0x06
    33f0:	9f 81       	ldd	r25, Y+7	; 0x07
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <FunctionSet4Bit+0x20a>
    33f6:	24 c0       	rjmp	.+72     	; 0x3440 <FunctionSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f8:	68 85       	ldd	r22, Y+8	; 0x08
    33fa:	79 85       	ldd	r23, Y+9	; 0x09
    33fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    33fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9f 83       	std	Y+7, r25	; 0x07
    340a:	8e 83       	std	Y+6, r24	; 0x06
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	9f 81       	ldd	r25, Y+7	; 0x07
    3410:	9b 83       	std	Y+3, r25	; 0x03
    3412:	8a 83       	std	Y+2, r24	; 0x02
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <FunctionSet4Bit+0x252>
    341c:	9b 83       	std	Y+3, r25	; 0x03
    341e:	8a 83       	std	Y+2, r24	; 0x02
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <FunctionSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3422:	69 89       	ldd	r22, Y+17	; 0x11
    3424:	7a 89       	ldd	r23, Y+18	; 0x12
    3426:	8b 89       	ldd	r24, Y+19	; 0x13
    3428:	9c 89       	ldd	r25, Y+20	; 0x14
    342a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	88 8b       	std	Y+16, r24	; 0x10
    3434:	88 89       	ldd	r24, Y+16	; 0x10
    3436:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	8a 95       	dec	r24
    343c:	f1 f7       	brne	.-4      	; 0x343a <FunctionSet4Bit+0x274>
    343e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x28);
    3440:	88 e2       	ldi	r24, 0x28	; 40
    3442:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
}
    3446:	a6 96       	adiw	r28, 0x26	; 38
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <DisplayOnOffControl4Bit>:
static void DisplayOnOffControl4Bit(void){
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	e0 97       	sbiw	r28, 0x30	; 48
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	a8 e4       	ldi	r26, 0x48	; 72
    3472:	b2 e4       	ldi	r27, 0x42	; 66
    3474:	8d a7       	std	Y+45, r24	; 0x2d
    3476:	9e a7       	std	Y+46, r25	; 0x2e
    3478:	af a7       	std	Y+47, r26	; 0x2f
    347a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    347c:	6d a5       	ldd	r22, Y+45	; 0x2d
    347e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3480:	8f a5       	ldd	r24, Y+47	; 0x2f
    3482:	98 a9       	ldd	r25, Y+48	; 0x30
    3484:	2b ea       	ldi	r18, 0xAB	; 171
    3486:	3a ea       	ldi	r19, 0xAA	; 170
    3488:	4a e2       	ldi	r20, 0x2A	; 42
    348a:	50 e4       	ldi	r21, 0x40	; 64
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	89 a7       	std	Y+41, r24	; 0x29
    3496:	9a a7       	std	Y+42, r25	; 0x2a
    3498:	ab a7       	std	Y+43, r26	; 0x2b
    349a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    349c:	69 a5       	ldd	r22, Y+41	; 0x29
    349e:	7a a5       	ldd	r23, Y+42	; 0x2a
    34a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    34a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	40 e8       	ldi	r20, 0x80	; 128
    34aa:	5f e3       	ldi	r21, 0x3F	; 63
    34ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b0:	88 23       	and	r24, r24
    34b2:	1c f4       	brge	.+6      	; 0x34ba <DisplayOnOffControl4Bit+0x62>
		__ticks = 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	88 a7       	std	Y+40, r24	; 0x28
    34b8:	91 c0       	rjmp	.+290    	; 0x35dc <DisplayOnOffControl4Bit+0x184>
	else if (__tmp > 255)
    34ba:	69 a5       	ldd	r22, Y+41	; 0x29
    34bc:	7a a5       	ldd	r23, Y+42	; 0x2a
    34be:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4f e7       	ldi	r20, 0x7F	; 127
    34c8:	53 e4       	ldi	r21, 0x43	; 67
    34ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34ce:	18 16       	cp	r1, r24
    34d0:	0c f0       	brlt	.+2      	; 0x34d4 <DisplayOnOffControl4Bit+0x7c>
    34d2:	7b c0       	rjmp	.+246    	; 0x35ca <DisplayOnOffControl4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    34d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    34d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    34d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    34da:	98 a9       	ldd	r25, Y+48	; 0x30
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a e7       	ldi	r20, 0x7A	; 122
    34e2:	54 e4       	ldi	r21, 0x44	; 68
    34e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	8c a3       	std	Y+36, r24	; 0x24
    34ee:	9d a3       	std	Y+37, r25	; 0x25
    34f0:	ae a3       	std	Y+38, r26	; 0x26
    34f2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f4:	6c a1       	ldd	r22, Y+36	; 0x24
    34f6:	7d a1       	ldd	r23, Y+37	; 0x25
    34f8:	8e a1       	ldd	r24, Y+38	; 0x26
    34fa:	9f a1       	ldd	r25, Y+39	; 0x27
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	4a ef       	ldi	r20, 0xFA	; 250
    3502:	54 e4       	ldi	r21, 0x44	; 68
    3504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	88 a3       	std	Y+32, r24	; 0x20
    350e:	99 a3       	std	Y+33, r25	; 0x21
    3510:	aa a3       	std	Y+34, r26	; 0x22
    3512:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3514:	68 a1       	ldd	r22, Y+32	; 0x20
    3516:	79 a1       	ldd	r23, Y+33	; 0x21
    3518:	8a a1       	ldd	r24, Y+34	; 0x22
    351a:	9b a1       	ldd	r25, Y+35	; 0x23
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	40 e8       	ldi	r20, 0x80	; 128
    3522:	5f e3       	ldi	r21, 0x3F	; 63
    3524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3528:	88 23       	and	r24, r24
    352a:	2c f4       	brge	.+10     	; 0x3536 <DisplayOnOffControl4Bit+0xde>
		__ticks = 1;
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	9f 8f       	std	Y+31, r25	; 0x1f
    3532:	8e 8f       	std	Y+30, r24	; 0x1e
    3534:	3f c0       	rjmp	.+126    	; 0x35b4 <DisplayOnOffControl4Bit+0x15c>
	else if (__tmp > 65535)
    3536:	68 a1       	ldd	r22, Y+32	; 0x20
    3538:	79 a1       	ldd	r23, Y+33	; 0x21
    353a:	8a a1       	ldd	r24, Y+34	; 0x22
    353c:	9b a1       	ldd	r25, Y+35	; 0x23
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	3f ef       	ldi	r19, 0xFF	; 255
    3542:	4f e7       	ldi	r20, 0x7F	; 127
    3544:	57 e4       	ldi	r21, 0x47	; 71
    3546:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    354a:	18 16       	cp	r1, r24
    354c:	4c f5       	brge	.+82     	; 0x35a0 <DisplayOnOffControl4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354e:	6c a1       	ldd	r22, Y+36	; 0x24
    3550:	7d a1       	ldd	r23, Y+37	; 0x25
    3552:	8e a1       	ldd	r24, Y+38	; 0x26
    3554:	9f a1       	ldd	r25, Y+39	; 0x27
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	40 e2       	ldi	r20, 0x20	; 32
    355c:	51 e4       	ldi	r21, 0x41	; 65
    355e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356e:	dc 01       	movw	r26, r24
    3570:	cb 01       	movw	r24, r22
    3572:	9f 8f       	std	Y+31, r25	; 0x1f
    3574:	8e 8f       	std	Y+30, r24	; 0x1e
    3576:	0f c0       	rjmp	.+30     	; 0x3596 <DisplayOnOffControl4Bit+0x13e>
    3578:	88 ec       	ldi	r24, 0xC8	; 200
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	9d 8f       	std	Y+29, r25	; 0x1d
    357e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3580:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3582:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <DisplayOnOffControl4Bit+0x12c>
    3588:	9d 8f       	std	Y+29, r25	; 0x1d
    358a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    358c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    358e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	9f 8f       	std	Y+31, r25	; 0x1f
    3594:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3596:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3598:	9f 8d       	ldd	r25, Y+31	; 0x1f
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	69 f7       	brne	.-38     	; 0x3578 <DisplayOnOffControl4Bit+0x120>
    359e:	24 c0       	rjmp	.+72     	; 0x35e8 <DisplayOnOffControl4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a0:	68 a1       	ldd	r22, Y+32	; 0x20
    35a2:	79 a1       	ldd	r23, Y+33	; 0x21
    35a4:	8a a1       	ldd	r24, Y+34	; 0x22
    35a6:	9b a1       	ldd	r25, Y+35	; 0x23
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	9f 8f       	std	Y+31, r25	; 0x1f
    35b2:	8e 8f       	std	Y+30, r24	; 0x1e
    35b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    35b6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    35b8:	9b 8f       	std	Y+27, r25	; 0x1b
    35ba:	8a 8f       	std	Y+26, r24	; 0x1a
    35bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <DisplayOnOffControl4Bit+0x168>
    35c4:	9b 8f       	std	Y+27, r25	; 0x1b
    35c6:	8a 8f       	std	Y+26, r24	; 0x1a
    35c8:	0f c0       	rjmp	.+30     	; 0x35e8 <DisplayOnOffControl4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    35ca:	69 a5       	ldd	r22, Y+41	; 0x29
    35cc:	7a a5       	ldd	r23, Y+42	; 0x2a
    35ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    35d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    35d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	88 a7       	std	Y+40, r24	; 0x28
    35dc:	88 a5       	ldd	r24, Y+40	; 0x28
    35de:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    35e0:	89 8d       	ldd	r24, Y+25	; 0x19
    35e2:	8a 95       	dec	r24
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <DisplayOnOffControl4Bit+0x18a>
    35e6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
    35ee:	80 e0       	ldi	r24, 0x00	; 0
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a0 e2       	ldi	r26, 0x20	; 32
    35f4:	b1 e4       	ldi	r27, 0x41	; 65
    35f6:	8d 8b       	std	Y+21, r24	; 0x15
    35f8:	9e 8b       	std	Y+22, r25	; 0x16
    35fa:	af 8b       	std	Y+23, r26	; 0x17
    35fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3600:	7e 89       	ldd	r23, Y+22	; 0x16
    3602:	8f 89       	ldd	r24, Y+23	; 0x17
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	2b ea       	ldi	r18, 0xAB	; 171
    3608:	3a ea       	ldi	r19, 0xAA	; 170
    360a:	4a e2       	ldi	r20, 0x2A	; 42
    360c:	50 e4       	ldi	r21, 0x40	; 64
    360e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3612:	dc 01       	movw	r26, r24
    3614:	cb 01       	movw	r24, r22
    3616:	89 8b       	std	Y+17, r24	; 0x11
    3618:	9a 8b       	std	Y+18, r25	; 0x12
    361a:	ab 8b       	std	Y+19, r26	; 0x13
    361c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    361e:	69 89       	ldd	r22, Y+17	; 0x11
    3620:	7a 89       	ldd	r23, Y+18	; 0x12
    3622:	8b 89       	ldd	r24, Y+19	; 0x13
    3624:	9c 89       	ldd	r25, Y+20	; 0x14
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	40 e8       	ldi	r20, 0x80	; 128
    362c:	5f e3       	ldi	r21, 0x3F	; 63
    362e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3632:	88 23       	and	r24, r24
    3634:	1c f4       	brge	.+6      	; 0x363c <DisplayOnOffControl4Bit+0x1e4>
		__ticks = 1;
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	88 8b       	std	Y+16, r24	; 0x10
    363a:	91 c0       	rjmp	.+290    	; 0x375e <DisplayOnOffControl4Bit+0x306>
	else if (__tmp > 255)
    363c:	69 89       	ldd	r22, Y+17	; 0x11
    363e:	7a 89       	ldd	r23, Y+18	; 0x12
    3640:	8b 89       	ldd	r24, Y+19	; 0x13
    3642:	9c 89       	ldd	r25, Y+20	; 0x14
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	4f e7       	ldi	r20, 0x7F	; 127
    364a:	53 e4       	ldi	r21, 0x43	; 67
    364c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3650:	18 16       	cp	r1, r24
    3652:	0c f0       	brlt	.+2      	; 0x3656 <DisplayOnOffControl4Bit+0x1fe>
    3654:	7b c0       	rjmp	.+246    	; 0x374c <DisplayOnOffControl4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    3656:	6d 89       	ldd	r22, Y+21	; 0x15
    3658:	7e 89       	ldd	r23, Y+22	; 0x16
    365a:	8f 89       	ldd	r24, Y+23	; 0x17
    365c:	98 8d       	ldd	r25, Y+24	; 0x18
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	4a e7       	ldi	r20, 0x7A	; 122
    3664:	54 e4       	ldi	r21, 0x44	; 68
    3666:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	8c 87       	std	Y+12, r24	; 0x0c
    3670:	9d 87       	std	Y+13, r25	; 0x0d
    3672:	ae 87       	std	Y+14, r26	; 0x0e
    3674:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3676:	6c 85       	ldd	r22, Y+12	; 0x0c
    3678:	7d 85       	ldd	r23, Y+13	; 0x0d
    367a:	8e 85       	ldd	r24, Y+14	; 0x0e
    367c:	9f 85       	ldd	r25, Y+15	; 0x0f
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4a ef       	ldi	r20, 0xFA	; 250
    3684:	54 e4       	ldi	r21, 0x44	; 68
    3686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	88 87       	std	Y+8, r24	; 0x08
    3690:	99 87       	std	Y+9, r25	; 0x09
    3692:	aa 87       	std	Y+10, r26	; 0x0a
    3694:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3696:	68 85       	ldd	r22, Y+8	; 0x08
    3698:	79 85       	ldd	r23, Y+9	; 0x09
    369a:	8a 85       	ldd	r24, Y+10	; 0x0a
    369c:	9b 85       	ldd	r25, Y+11	; 0x0b
    369e:	20 e0       	ldi	r18, 0x00	; 0
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	40 e8       	ldi	r20, 0x80	; 128
    36a4:	5f e3       	ldi	r21, 0x3F	; 63
    36a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36aa:	88 23       	and	r24, r24
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <DisplayOnOffControl4Bit+0x260>
		__ticks = 1;
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	9f 83       	std	Y+7, r25	; 0x07
    36b4:	8e 83       	std	Y+6, r24	; 0x06
    36b6:	3f c0       	rjmp	.+126    	; 0x3736 <DisplayOnOffControl4Bit+0x2de>
	else if (__tmp > 65535)
    36b8:	68 85       	ldd	r22, Y+8	; 0x08
    36ba:	79 85       	ldd	r23, Y+9	; 0x09
    36bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    36be:	9b 85       	ldd	r25, Y+11	; 0x0b
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	3f ef       	ldi	r19, 0xFF	; 255
    36c4:	4f e7       	ldi	r20, 0x7F	; 127
    36c6:	57 e4       	ldi	r21, 0x47	; 71
    36c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36cc:	18 16       	cp	r1, r24
    36ce:	4c f5       	brge	.+82     	; 0x3722 <DisplayOnOffControl4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    36d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    36d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    36d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9f 83       	std	Y+7, r25	; 0x07
    36f6:	8e 83       	std	Y+6, r24	; 0x06
    36f8:	0f c0       	rjmp	.+30     	; 0x3718 <DisplayOnOffControl4Bit+0x2c0>
    36fa:	88 ec       	ldi	r24, 0xC8	; 200
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	9d 83       	std	Y+5, r25	; 0x05
    3700:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3702:	8c 81       	ldd	r24, Y+4	; 0x04
    3704:	9d 81       	ldd	r25, Y+5	; 0x05
    3706:	01 97       	sbiw	r24, 0x01	; 1
    3708:	f1 f7       	brne	.-4      	; 0x3706 <DisplayOnOffControl4Bit+0x2ae>
    370a:	9d 83       	std	Y+5, r25	; 0x05
    370c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    370e:	8e 81       	ldd	r24, Y+6	; 0x06
    3710:	9f 81       	ldd	r25, Y+7	; 0x07
    3712:	01 97       	sbiw	r24, 0x01	; 1
    3714:	9f 83       	std	Y+7, r25	; 0x07
    3716:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3718:	8e 81       	ldd	r24, Y+6	; 0x06
    371a:	9f 81       	ldd	r25, Y+7	; 0x07
    371c:	00 97       	sbiw	r24, 0x00	; 0
    371e:	69 f7       	brne	.-38     	; 0x36fa <DisplayOnOffControl4Bit+0x2a2>
    3720:	24 c0       	rjmp	.+72     	; 0x376a <DisplayOnOffControl4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3722:	68 85       	ldd	r22, Y+8	; 0x08
    3724:	79 85       	ldd	r23, Y+9	; 0x09
    3726:	8a 85       	ldd	r24, Y+10	; 0x0a
    3728:	9b 85       	ldd	r25, Y+11	; 0x0b
    372a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	9f 83       	std	Y+7, r25	; 0x07
    3734:	8e 83       	std	Y+6, r24	; 0x06
    3736:	8e 81       	ldd	r24, Y+6	; 0x06
    3738:	9f 81       	ldd	r25, Y+7	; 0x07
    373a:	9b 83       	std	Y+3, r25	; 0x03
    373c:	8a 83       	std	Y+2, r24	; 0x02
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <DisplayOnOffControl4Bit+0x2ea>
    3746:	9b 83       	std	Y+3, r25	; 0x03
    3748:	8a 83       	std	Y+2, r24	; 0x02
    374a:	0f c0       	rjmp	.+30     	; 0x376a <DisplayOnOffControl4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    374c:	69 89       	ldd	r22, Y+17	; 0x11
    374e:	7a 89       	ldd	r23, Y+18	; 0x12
    3750:	8b 89       	ldd	r24, Y+19	; 0x13
    3752:	9c 89       	ldd	r25, Y+20	; 0x14
    3754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	88 8b       	std	Y+16, r24	; 0x10
    375e:	88 89       	ldd	r24, Y+16	; 0x10
    3760:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	8a 95       	dec	r24
    3766:	f1 f7       	brne	.-4      	; 0x3764 <DisplayOnOffControl4Bit+0x30c>
    3768:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0xC);
    376a:	8c e0       	ldi	r24, 0x0C	; 12
    376c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
}
    3770:	e0 96       	adiw	r28, 0x30	; 48
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
    377c:	cf 91       	pop	r28
    377e:	df 91       	pop	r29
    3780:	08 95       	ret

00003782 <DisplayClear4Bit>:
static void DisplayClear4Bit(void){
    3782:	df 93       	push	r29
    3784:	cf 93       	push	r28
    3786:	cd b7       	in	r28, 0x3d	; 61
    3788:	de b7       	in	r29, 0x3e	; 62
    378a:	e0 97       	sbiw	r28, 0x30	; 48
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	f8 94       	cli
    3790:	de bf       	out	0x3e, r29	; 62
    3792:	0f be       	out	0x3f, r0	; 63
    3794:	cd bf       	out	0x3d, r28	; 61
    3796:	80 e0       	ldi	r24, 0x00	; 0
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	a8 e4       	ldi	r26, 0x48	; 72
    379c:	b2 e4       	ldi	r27, 0x42	; 66
    379e:	8d a7       	std	Y+45, r24	; 0x2d
    37a0:	9e a7       	std	Y+46, r25	; 0x2e
    37a2:	af a7       	std	Y+47, r26	; 0x2f
    37a4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    37a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    37aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ac:	98 a9       	ldd	r25, Y+48	; 0x30
    37ae:	2b ea       	ldi	r18, 0xAB	; 171
    37b0:	3a ea       	ldi	r19, 0xAA	; 170
    37b2:	4a e2       	ldi	r20, 0x2A	; 42
    37b4:	50 e4       	ldi	r21, 0x40	; 64
    37b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	89 a7       	std	Y+41, r24	; 0x29
    37c0:	9a a7       	std	Y+42, r25	; 0x2a
    37c2:	ab a7       	std	Y+43, r26	; 0x2b
    37c4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    37c6:	69 a5       	ldd	r22, Y+41	; 0x29
    37c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    37ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    37cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 e8       	ldi	r20, 0x80	; 128
    37d4:	5f e3       	ldi	r21, 0x3F	; 63
    37d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37da:	88 23       	and	r24, r24
    37dc:	1c f4       	brge	.+6      	; 0x37e4 <DisplayClear4Bit+0x62>
		__ticks = 1;
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	88 a7       	std	Y+40, r24	; 0x28
    37e2:	91 c0       	rjmp	.+290    	; 0x3906 <DisplayClear4Bit+0x184>
	else if (__tmp > 255)
    37e4:	69 a5       	ldd	r22, Y+41	; 0x29
    37e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    37e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    37ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    37ec:	20 e0       	ldi	r18, 0x00	; 0
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	4f e7       	ldi	r20, 0x7F	; 127
    37f2:	53 e4       	ldi	r21, 0x43	; 67
    37f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f8:	18 16       	cp	r1, r24
    37fa:	0c f0       	brlt	.+2      	; 0x37fe <DisplayClear4Bit+0x7c>
    37fc:	7b c0       	rjmp	.+246    	; 0x38f4 <DisplayClear4Bit+0x172>
	{
		_delay_ms(__us / 1000.0);
    37fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    3800:	7e a5       	ldd	r23, Y+46	; 0x2e
    3802:	8f a5       	ldd	r24, Y+47	; 0x2f
    3804:	98 a9       	ldd	r25, Y+48	; 0x30
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	4a e7       	ldi	r20, 0x7A	; 122
    380c:	54 e4       	ldi	r21, 0x44	; 68
    380e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	8c a3       	std	Y+36, r24	; 0x24
    3818:	9d a3       	std	Y+37, r25	; 0x25
    381a:	ae a3       	std	Y+38, r26	; 0x26
    381c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381e:	6c a1       	ldd	r22, Y+36	; 0x24
    3820:	7d a1       	ldd	r23, Y+37	; 0x25
    3822:	8e a1       	ldd	r24, Y+38	; 0x26
    3824:	9f a1       	ldd	r25, Y+39	; 0x27
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	4a ef       	ldi	r20, 0xFA	; 250
    382c:	54 e4       	ldi	r21, 0x44	; 68
    382e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	88 a3       	std	Y+32, r24	; 0x20
    3838:	99 a3       	std	Y+33, r25	; 0x21
    383a:	aa a3       	std	Y+34, r26	; 0x22
    383c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    383e:	68 a1       	ldd	r22, Y+32	; 0x20
    3840:	79 a1       	ldd	r23, Y+33	; 0x21
    3842:	8a a1       	ldd	r24, Y+34	; 0x22
    3844:	9b a1       	ldd	r25, Y+35	; 0x23
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	40 e8       	ldi	r20, 0x80	; 128
    384c:	5f e3       	ldi	r21, 0x3F	; 63
    384e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3852:	88 23       	and	r24, r24
    3854:	2c f4       	brge	.+10     	; 0x3860 <DisplayClear4Bit+0xde>
		__ticks = 1;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	9f 8f       	std	Y+31, r25	; 0x1f
    385c:	8e 8f       	std	Y+30, r24	; 0x1e
    385e:	3f c0       	rjmp	.+126    	; 0x38de <DisplayClear4Bit+0x15c>
	else if (__tmp > 65535)
    3860:	68 a1       	ldd	r22, Y+32	; 0x20
    3862:	79 a1       	ldd	r23, Y+33	; 0x21
    3864:	8a a1       	ldd	r24, Y+34	; 0x22
    3866:	9b a1       	ldd	r25, Y+35	; 0x23
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	3f ef       	ldi	r19, 0xFF	; 255
    386c:	4f e7       	ldi	r20, 0x7F	; 127
    386e:	57 e4       	ldi	r21, 0x47	; 71
    3870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3874:	18 16       	cp	r1, r24
    3876:	4c f5       	brge	.+82     	; 0x38ca <DisplayClear4Bit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3878:	6c a1       	ldd	r22, Y+36	; 0x24
    387a:	7d a1       	ldd	r23, Y+37	; 0x25
    387c:	8e a1       	ldd	r24, Y+38	; 0x26
    387e:	9f a1       	ldd	r25, Y+39	; 0x27
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e2       	ldi	r20, 0x20	; 32
    3886:	51 e4       	ldi	r21, 0x41	; 65
    3888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	9f 8f       	std	Y+31, r25	; 0x1f
    389e:	8e 8f       	std	Y+30, r24	; 0x1e
    38a0:	0f c0       	rjmp	.+30     	; 0x38c0 <DisplayClear4Bit+0x13e>
    38a2:	88 ec       	ldi	r24, 0xC8	; 200
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9d 8f       	std	Y+29, r25	; 0x1d
    38a8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38ae:	01 97       	sbiw	r24, 0x01	; 1
    38b0:	f1 f7       	brne	.-4      	; 0x38ae <DisplayClear4Bit+0x12c>
    38b2:	9d 8f       	std	Y+29, r25	; 0x1d
    38b4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38ba:	01 97       	sbiw	r24, 0x01	; 1
    38bc:	9f 8f       	std	Y+31, r25	; 0x1f
    38be:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38c4:	00 97       	sbiw	r24, 0x00	; 0
    38c6:	69 f7       	brne	.-38     	; 0x38a2 <DisplayClear4Bit+0x120>
    38c8:	24 c0       	rjmp	.+72     	; 0x3912 <DisplayClear4Bit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ca:	68 a1       	ldd	r22, Y+32	; 0x20
    38cc:	79 a1       	ldd	r23, Y+33	; 0x21
    38ce:	8a a1       	ldd	r24, Y+34	; 0x22
    38d0:	9b a1       	ldd	r25, Y+35	; 0x23
    38d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	9f 8f       	std	Y+31, r25	; 0x1f
    38dc:	8e 8f       	std	Y+30, r24	; 0x1e
    38de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38e2:	9b 8f       	std	Y+27, r25	; 0x1b
    38e4:	8a 8f       	std	Y+26, r24	; 0x1a
    38e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <DisplayClear4Bit+0x168>
    38ee:	9b 8f       	std	Y+27, r25	; 0x1b
    38f0:	8a 8f       	std	Y+26, r24	; 0x1a
    38f2:	0f c0       	rjmp	.+30     	; 0x3912 <DisplayClear4Bit+0x190>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    38f4:	69 a5       	ldd	r22, Y+41	; 0x29
    38f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    38f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    38fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	88 a7       	std	Y+40, r24	; 0x28
    3906:	88 a5       	ldd	r24, Y+40	; 0x28
    3908:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    390a:	89 8d       	ldd	r24, Y+25	; 0x19
    390c:	8a 95       	dec	r24
    390e:	f1 f7       	brne	.-4      	; 0x390c <DisplayClear4Bit+0x18a>
    3910:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	LCD_WriteCommand4Bit(0x0);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e2       	ldi	r26, 0x20	; 32
    391e:	b1 e4       	ldi	r27, 0x41	; 65
    3920:	8d 8b       	std	Y+21, r24	; 0x15
    3922:	9e 8b       	std	Y+22, r25	; 0x16
    3924:	af 8b       	std	Y+23, r26	; 0x17
    3926:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3928:	6d 89       	ldd	r22, Y+21	; 0x15
    392a:	7e 89       	ldd	r23, Y+22	; 0x16
    392c:	8f 89       	ldd	r24, Y+23	; 0x17
    392e:	98 8d       	ldd	r25, Y+24	; 0x18
    3930:	2b ea       	ldi	r18, 0xAB	; 171
    3932:	3a ea       	ldi	r19, 0xAA	; 170
    3934:	4a e2       	ldi	r20, 0x2A	; 42
    3936:	50 e4       	ldi	r21, 0x40	; 64
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	89 8b       	std	Y+17, r24	; 0x11
    3942:	9a 8b       	std	Y+18, r25	; 0x12
    3944:	ab 8b       	std	Y+19, r26	; 0x13
    3946:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3948:	69 89       	ldd	r22, Y+17	; 0x11
    394a:	7a 89       	ldd	r23, Y+18	; 0x12
    394c:	8b 89       	ldd	r24, Y+19	; 0x13
    394e:	9c 89       	ldd	r25, Y+20	; 0x14
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	1c f4       	brge	.+6      	; 0x3966 <DisplayClear4Bit+0x1e4>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	88 8b       	std	Y+16, r24	; 0x10
    3964:	91 c0       	rjmp	.+290    	; 0x3a88 <DisplayClear4Bit+0x306>
	else if (__tmp > 255)
    3966:	69 89       	ldd	r22, Y+17	; 0x11
    3968:	7a 89       	ldd	r23, Y+18	; 0x12
    396a:	8b 89       	ldd	r24, Y+19	; 0x13
    396c:	9c 89       	ldd	r25, Y+20	; 0x14
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	4f e7       	ldi	r20, 0x7F	; 127
    3974:	53 e4       	ldi	r21, 0x43	; 67
    3976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397a:	18 16       	cp	r1, r24
    397c:	0c f0       	brlt	.+2      	; 0x3980 <DisplayClear4Bit+0x1fe>
    397e:	7b c0       	rjmp	.+246    	; 0x3a76 <DisplayClear4Bit+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    3980:	6d 89       	ldd	r22, Y+21	; 0x15
    3982:	7e 89       	ldd	r23, Y+22	; 0x16
    3984:	8f 89       	ldd	r24, Y+23	; 0x17
    3986:	98 8d       	ldd	r25, Y+24	; 0x18
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a e7       	ldi	r20, 0x7A	; 122
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	8c 87       	std	Y+12, r24	; 0x0c
    399a:	9d 87       	std	Y+13, r25	; 0x0d
    399c:	ae 87       	std	Y+14, r26	; 0x0e
    399e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    39a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    39a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    39a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	4a ef       	ldi	r20, 0xFA	; 250
    39ae:	54 e4       	ldi	r21, 0x44	; 68
    39b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b4:	dc 01       	movw	r26, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	88 87       	std	Y+8, r24	; 0x08
    39ba:	99 87       	std	Y+9, r25	; 0x09
    39bc:	aa 87       	std	Y+10, r26	; 0x0a
    39be:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39c0:	68 85       	ldd	r22, Y+8	; 0x08
    39c2:	79 85       	ldd	r23, Y+9	; 0x09
    39c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    39c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    39c8:	20 e0       	ldi	r18, 0x00	; 0
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	40 e8       	ldi	r20, 0x80	; 128
    39ce:	5f e3       	ldi	r21, 0x3F	; 63
    39d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d4:	88 23       	and	r24, r24
    39d6:	2c f4       	brge	.+10     	; 0x39e2 <DisplayClear4Bit+0x260>
		__ticks = 1;
    39d8:	81 e0       	ldi	r24, 0x01	; 1
    39da:	90 e0       	ldi	r25, 0x00	; 0
    39dc:	9f 83       	std	Y+7, r25	; 0x07
    39de:	8e 83       	std	Y+6, r24	; 0x06
    39e0:	3f c0       	rjmp	.+126    	; 0x3a60 <DisplayClear4Bit+0x2de>
	else if (__tmp > 65535)
    39e2:	68 85       	ldd	r22, Y+8	; 0x08
    39e4:	79 85       	ldd	r23, Y+9	; 0x09
    39e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	3f ef       	ldi	r19, 0xFF	; 255
    39ee:	4f e7       	ldi	r20, 0x7F	; 127
    39f0:	57 e4       	ldi	r21, 0x47	; 71
    39f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f6:	18 16       	cp	r1, r24
    39f8:	4c f5       	brge	.+82     	; 0x3a4c <DisplayClear4Bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39fa:	6c 85       	ldd	r22, Y+12	; 0x0c
    39fc:	7d 85       	ldd	r23, Y+13	; 0x0d
    39fe:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a00:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	40 e2       	ldi	r20, 0x20	; 32
    3a08:	51 e4       	ldi	r21, 0x41	; 65
    3a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0e:	dc 01       	movw	r26, r24
    3a10:	cb 01       	movw	r24, r22
    3a12:	bc 01       	movw	r22, r24
    3a14:	cd 01       	movw	r24, r26
    3a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1a:	dc 01       	movw	r26, r24
    3a1c:	cb 01       	movw	r24, r22
    3a1e:	9f 83       	std	Y+7, r25	; 0x07
    3a20:	8e 83       	std	Y+6, r24	; 0x06
    3a22:	0f c0       	rjmp	.+30     	; 0x3a42 <DisplayClear4Bit+0x2c0>
    3a24:	88 ec       	ldi	r24, 0xC8	; 200
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9d 83       	std	Y+5, r25	; 0x05
    3a2a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <DisplayClear4Bit+0x2ae>
    3a34:	9d 83       	std	Y+5, r25	; 0x05
    3a36:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a38:	8e 81       	ldd	r24, Y+6	; 0x06
    3a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a3c:	01 97       	sbiw	r24, 0x01	; 1
    3a3e:	9f 83       	std	Y+7, r25	; 0x07
    3a40:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a42:	8e 81       	ldd	r24, Y+6	; 0x06
    3a44:	9f 81       	ldd	r25, Y+7	; 0x07
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	69 f7       	brne	.-38     	; 0x3a24 <DisplayClear4Bit+0x2a2>
    3a4a:	24 c0       	rjmp	.+72     	; 0x3a94 <DisplayClear4Bit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4c:	68 85       	ldd	r22, Y+8	; 0x08
    3a4e:	79 85       	ldd	r23, Y+9	; 0x09
    3a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	9f 83       	std	Y+7, r25	; 0x07
    3a5e:	8e 83       	std	Y+6, r24	; 0x06
    3a60:	8e 81       	ldd	r24, Y+6	; 0x06
    3a62:	9f 81       	ldd	r25, Y+7	; 0x07
    3a64:	9b 83       	std	Y+3, r25	; 0x03
    3a66:	8a 83       	std	Y+2, r24	; 0x02
    3a68:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a6c:	01 97       	sbiw	r24, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <DisplayClear4Bit+0x2ea>
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
    3a74:	0f c0       	rjmp	.+30     	; 0x3a94 <DisplayClear4Bit+0x312>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a76:	69 89       	ldd	r22, Y+17	; 0x11
    3a78:	7a 89       	ldd	r23, Y+18	; 0x12
    3a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a82:	dc 01       	movw	r26, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	88 8b       	std	Y+16, r24	; 0x10
    3a88:	88 89       	ldd	r24, Y+16	; 0x10
    3a8a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	8a 95       	dec	r24
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <DisplayClear4Bit+0x30c>
    3a92:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x1);
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
}
    3a9a:	e0 96       	adiw	r28, 0x30	; 48
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <EntryModeSet4Bit>:
static void EntryModeSet4Bit(void){
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	a6 97       	sbiw	r28, 0x26	; 38
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	a0 e0       	ldi	r26, 0x00	; 0
    3ac6:	b0 e4       	ldi	r27, 0x40	; 64
    3ac8:	8b a3       	std	Y+35, r24	; 0x23
    3aca:	9c a3       	std	Y+36, r25	; 0x24
    3acc:	ad a3       	std	Y+37, r26	; 0x25
    3ace:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad2:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad4:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad6:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a ef       	ldi	r20, 0xFA	; 250
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8f 8f       	std	Y+31, r24	; 0x1f
    3aea:	98 a3       	std	Y+32, r25	; 0x20
    3aec:	a9 a3       	std	Y+33, r26	; 0x21
    3aee:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3af0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3af2:	78 a1       	ldd	r23, Y+32	; 0x20
    3af4:	89 a1       	ldd	r24, Y+33	; 0x21
    3af6:	9a a1       	ldd	r25, Y+34	; 0x22
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <EntryModeSet4Bit+0x66>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b0e:	8d 8f       	std	Y+29, r24	; 0x1d
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <EntryModeSet4Bit+0xe4>
	else if (__tmp > 65535)
    3b12:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3b14:	78 a1       	ldd	r23, Y+32	; 0x20
    3b16:	89 a1       	ldd	r24, Y+33	; 0x21
    3b18:	9a a1       	ldd	r25, Y+34	; 0x22
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <EntryModeSet4Bit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    3b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    3b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    3b30:	9e a1       	ldd	r25, Y+38	; 0x26
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b50:	8d 8f       	std	Y+29, r24	; 0x1d
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <EntryModeSet4Bit+0xc6>
    3b54:	88 ec       	ldi	r24, 0xC8	; 200
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9c 8f       	std	Y+28, r25	; 0x1c
    3b5a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <EntryModeSet4Bit+0xb4>
    3b64:	9c 8f       	std	Y+28, r25	; 0x1c
    3b66:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b70:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <EntryModeSet4Bit+0xa8>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <EntryModeSet4Bit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3b7e:	78 a1       	ldd	r23, Y+32	; 0x20
    3b80:	89 a1       	ldd	r24, Y+33	; 0x21
    3b82:	9a a1       	ldd	r25, Y+34	; 0x22
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b8e:	8d 8f       	std	Y+29, r24	; 0x1d
    3b90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b94:	9a 8f       	std	Y+26, r25	; 0x1a
    3b96:	89 8f       	std	Y+25, r24	; 0x19
    3b98:	89 8d       	ldd	r24, Y+25	; 0x19
    3b9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <EntryModeSet4Bit+0xf0>
    3ba0:	9a 8f       	std	Y+26, r25	; 0x1a
    3ba2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);
	LCD_WriteCommand4Bit(0x0);
    3ba4:	80 e0       	ldi	r24, 0x00	; 0
    3ba6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a0 e2       	ldi	r26, 0x20	; 32
    3bb0:	b1 e4       	ldi	r27, 0x41	; 65
    3bb2:	8d 8b       	std	Y+21, r24	; 0x15
    3bb4:	9e 8b       	std	Y+22, r25	; 0x16
    3bb6:	af 8b       	std	Y+23, r26	; 0x17
    3bb8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3bba:	6d 89       	ldd	r22, Y+21	; 0x15
    3bbc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbe:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc0:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc2:	2b ea       	ldi	r18, 0xAB	; 171
    3bc4:	3a ea       	ldi	r19, 0xAA	; 170
    3bc6:	4a e2       	ldi	r20, 0x2A	; 42
    3bc8:	50 e4       	ldi	r21, 0x40	; 64
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	89 8b       	std	Y+17, r24	; 0x11
    3bd4:	9a 8b       	std	Y+18, r25	; 0x12
    3bd6:	ab 8b       	std	Y+19, r26	; 0x13
    3bd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3bda:	69 89       	ldd	r22, Y+17	; 0x11
    3bdc:	7a 89       	ldd	r23, Y+18	; 0x12
    3bde:	8b 89       	ldd	r24, Y+19	; 0x13
    3be0:	9c 89       	ldd	r25, Y+20	; 0x14
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	1c f4       	brge	.+6      	; 0x3bf8 <EntryModeSet4Bit+0x14c>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	88 8b       	std	Y+16, r24	; 0x10
    3bf6:	91 c0       	rjmp	.+290    	; 0x3d1a <EntryModeSet4Bit+0x26e>
	else if (__tmp > 255)
    3bf8:	69 89       	ldd	r22, Y+17	; 0x11
    3bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    3bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	4f e7       	ldi	r20, 0x7F	; 127
    3c06:	53 e4       	ldi	r21, 0x43	; 67
    3c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c0c:	18 16       	cp	r1, r24
    3c0e:	0c f0       	brlt	.+2      	; 0x3c12 <EntryModeSet4Bit+0x166>
    3c10:	7b c0       	rjmp	.+246    	; 0x3d08 <EntryModeSet4Bit+0x25c>
	{
		_delay_ms(__us / 1000.0);
    3c12:	6d 89       	ldd	r22, Y+21	; 0x15
    3c14:	7e 89       	ldd	r23, Y+22	; 0x16
    3c16:	8f 89       	ldd	r24, Y+23	; 0x17
    3c18:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	4a e7       	ldi	r20, 0x7A	; 122
    3c20:	54 e4       	ldi	r21, 0x44	; 68
    3c22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c26:	dc 01       	movw	r26, r24
    3c28:	cb 01       	movw	r24, r22
    3c2a:	8c 87       	std	Y+12, r24	; 0x0c
    3c2c:	9d 87       	std	Y+13, r25	; 0x0d
    3c2e:	ae 87       	std	Y+14, r26	; 0x0e
    3c30:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c32:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c34:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c36:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c38:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a ef       	ldi	r20, 0xFA	; 250
    3c40:	54 e4       	ldi	r21, 0x44	; 68
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	88 87       	std	Y+8, r24	; 0x08
    3c4c:	99 87       	std	Y+9, r25	; 0x09
    3c4e:	aa 87       	std	Y+10, r26	; 0x0a
    3c50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3c52:	68 85       	ldd	r22, Y+8	; 0x08
    3c54:	79 85       	ldd	r23, Y+9	; 0x09
    3c56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	40 e8       	ldi	r20, 0x80	; 128
    3c60:	5f e3       	ldi	r21, 0x3F	; 63
    3c62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c66:	88 23       	and	r24, r24
    3c68:	2c f4       	brge	.+10     	; 0x3c74 <EntryModeSet4Bit+0x1c8>
		__ticks = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	9f 83       	std	Y+7, r25	; 0x07
    3c70:	8e 83       	std	Y+6, r24	; 0x06
    3c72:	3f c0       	rjmp	.+126    	; 0x3cf2 <EntryModeSet4Bit+0x246>
	else if (__tmp > 65535)
    3c74:	68 85       	ldd	r22, Y+8	; 0x08
    3c76:	79 85       	ldd	r23, Y+9	; 0x09
    3c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c7c:	20 e0       	ldi	r18, 0x00	; 0
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	4f e7       	ldi	r20, 0x7F	; 127
    3c82:	57 e4       	ldi	r21, 0x47	; 71
    3c84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c88:	18 16       	cp	r1, r24
    3c8a:	4c f5       	brge	.+82     	; 0x3cde <EntryModeSet4Bit+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8c:	6c 85       	ldd	r22, Y+12	; 0x0c
    3c8e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3c90:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c92:	9f 85       	ldd	r25, Y+15	; 0x0f
    3c94:	20 e0       	ldi	r18, 0x00	; 0
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	40 e2       	ldi	r20, 0x20	; 32
    3c9a:	51 e4       	ldi	r21, 0x41	; 65
    3c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca0:	dc 01       	movw	r26, r24
    3ca2:	cb 01       	movw	r24, r22
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	cd 01       	movw	r24, r26
    3ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cac:	dc 01       	movw	r26, r24
    3cae:	cb 01       	movw	r24, r22
    3cb0:	9f 83       	std	Y+7, r25	; 0x07
    3cb2:	8e 83       	std	Y+6, r24	; 0x06
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <EntryModeSet4Bit+0x228>
    3cb6:	88 ec       	ldi	r24, 0xC8	; 200
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	9d 83       	std	Y+5, r25	; 0x05
    3cbc:	8c 83       	std	Y+4, r24	; 0x04
    3cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc2:	01 97       	sbiw	r24, 0x01	; 1
    3cc4:	f1 f7       	brne	.-4      	; 0x3cc2 <EntryModeSet4Bit+0x216>
    3cc6:	9d 83       	std	Y+5, r25	; 0x05
    3cc8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cca:	8e 81       	ldd	r24, Y+6	; 0x06
    3ccc:	9f 81       	ldd	r25, Y+7	; 0x07
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	9f 83       	std	Y+7, r25	; 0x07
    3cd2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	69 f7       	brne	.-38     	; 0x3cb6 <EntryModeSet4Bit+0x20a>
    3cdc:	24 c0       	rjmp	.+72     	; 0x3d26 <EntryModeSet4Bit+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	68 85       	ldd	r22, Y+8	; 0x08
    3ce0:	79 85       	ldd	r23, Y+9	; 0x09
    3ce2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ce4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	9f 83       	std	Y+7, r25	; 0x07
    3cf0:	8e 83       	std	Y+6, r24	; 0x06
    3cf2:	8e 81       	ldd	r24, Y+6	; 0x06
    3cf4:	9f 81       	ldd	r25, Y+7	; 0x07
    3cf6:	9b 83       	std	Y+3, r25	; 0x03
    3cf8:	8a 83       	std	Y+2, r24	; 0x02
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <EntryModeSet4Bit+0x252>
    3d02:	9b 83       	std	Y+3, r25	; 0x03
    3d04:	8a 83       	std	Y+2, r24	; 0x02
    3d06:	0f c0       	rjmp	.+30     	; 0x3d26 <EntryModeSet4Bit+0x27a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d08:	69 89       	ldd	r22, Y+17	; 0x11
    3d0a:	7a 89       	ldd	r23, Y+18	; 0x12
    3d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    3d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    3d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d14:	dc 01       	movw	r26, r24
    3d16:	cb 01       	movw	r24, r22
    3d18:	88 8b       	std	Y+16, r24	; 0x10
    3d1a:	88 89       	ldd	r24, Y+16	; 0x10
    3d1c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	8a 95       	dec	r24
    3d22:	f1 f7       	brne	.-4      	; 0x3d20 <EntryModeSet4Bit+0x274>
    3d24:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	LCD_WriteCommand4Bit(0x6);
    3d26:	86 e0       	ldi	r24, 0x06	; 6
    3d28:	0e 94 61 12 	call	0x24c2	; 0x24c2 <LCD_WriteCommand4Bit>
}
    3d2c:	a6 96       	adiw	r28, 0x26	; 38
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <KPD_Init>:
 * 
 * @return ES_t Local_enuErrorstate Status of the function execution
 * - ES_OK: Function executed successfully
 * - ES_NOK: Function execution failed
 */
ES_t KPD_Init(void){
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	0f 92       	push	r0
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    3d48:	19 82       	std	Y+1, r1	; 0x01
	/*	Rows	OUTPUT HIGH	*/
	RowsInitialization();
    3d4a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <RowsInitialization>

	/*	Columns	 INPUT PULLUP	*/
	ColumnsInitialization();
    3d4e:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <ColumnsInitialization>
	Local_enuErrorstate = ES_OK;
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorstate;
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d58:	0f 90       	pop	r0
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <KPD_u8GetPressedKey>:

@retval KPD_NO_PRESSED_KEY if no key is pressed.

@retval the value of the pressed key.
*/
u8 KPD_u8GetPressedKey(void){
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <KPD_u8GetPressedKey+0x6>
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <KPD_u8GetPressedKey+0x8>
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
    3d6e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    3d70:	1a 82       	std	Y+2, r1	; 0x02
    3d72:	76 c0       	rjmp	.+236    	; 0x3e60 <KPD_u8GetPressedKey+0x100>

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);
    3d74:	8a 81       	ldd	r24, Y+2	; 0x02
    3d76:	88 2f       	mov	r24, r24
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	fc 01       	movw	r30, r24
    3d7c:	ec 5e       	subi	r30, 0xEC	; 236
    3d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d80:	90 81       	ld	r25, Z
    3d82:	80 e0       	ldi	r24, 0x00	; 0
    3d84:	69 2f       	mov	r22, r25
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    3d8c:	19 82       	std	Y+1, r1	; 0x01
    3d8e:	55 c0       	rjmp	.+170    	; 0x3e3a <KPD_u8GetPressedKey+0xda>
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	88 2f       	mov	r24, r24
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	fc 01       	movw	r30, r24
    3d98:	e8 5e       	subi	r30, 0xE8	; 232
    3d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9c:	90 81       	ld	r25, Z
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	69 2f       	mov	r22, r25
    3da2:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	88 2f       	mov	r24, r24
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	fc 01       	movw	r30, r24
    3dae:	e8 5e       	subi	r30, 0xE8	; 232
    3db0:	fe 4f       	sbci	r31, 0xFE	; 254
    3db2:	90 81       	ld	r25, Z
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	69 2f       	mov	r22, r25
    3db8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <DIO_u8GetPinValue>
    3dbc:	88 23       	and	r24, r24
    3dbe:	d1 f5       	brne	.+116    	; 0x3e34 <KPD_u8GetPressedKey+0xd4>

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	48 2f       	mov	r20, r24
    3dc4:	50 e0       	ldi	r21, 0x00	; 0
    3dc6:	89 81       	ldd	r24, Y+1	; 0x01
    3dc8:	28 2f       	mov	r18, r24
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	ca 01       	movw	r24, r20
    3dce:	88 0f       	add	r24, r24
    3dd0:	99 1f       	adc	r25, r25
    3dd2:	88 0f       	add	r24, r24
    3dd4:	99 1f       	adc	r25, r25
    3dd6:	82 0f       	add	r24, r18
    3dd8:	93 1f       	adc	r25, r19
    3dda:	fc 01       	movw	r30, r24
    3ddc:	e4 5e       	subi	r30, 0xE4	; 228
    3dde:	fe 4f       	sbci	r31, 0xFE	; 254
    3de0:	80 81       	ld	r24, Z
    3de2:	8b 83       	std	Y+3, r24	; 0x03
    3de4:	0b c0       	rjmp	.+22     	; 0x3dfc <KPD_u8GetPressedKey+0x9c>

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	88 2f       	mov	r24, r24
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	fc 01       	movw	r30, r24
    3dee:	e8 5e       	subi	r30, 0xE8	; 232
    3df0:	fe 4f       	sbci	r31, 0xFE	; 254
    3df2:	90 81       	ld	r25, Z
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	69 2f       	mov	r22, r25
    3df8:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <DIO_u8GetPinValue>

			if(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){

				Local_u8PressedKey =Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				while(DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]) == LOW){
    3dfc:	89 81       	ldd	r24, Y+1	; 0x01
    3dfe:	88 2f       	mov	r24, r24
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	fc 01       	movw	r30, r24
    3e04:	e8 5e       	subi	r30, 0xE8	; 232
    3e06:	fe 4f       	sbci	r31, 0xFE	; 254
    3e08:	90 81       	ld	r25, Z
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	69 2f       	mov	r22, r25
    3e0e:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <DIO_u8GetPinValue>
    3e12:	88 23       	and	r24, r24
    3e14:	41 f3       	breq	.-48     	; 0x3de6 <KPD_u8GetPressedKey+0x86>

					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx]);

				}

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	88 2f       	mov	r24, r24
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	ec 5e       	subi	r30, 0xEC	; 236
    3e20:	fe 4f       	sbci	r31, 0xFE	; 254
    3e22:	90 81       	ld	r25, Z
    3e24:	80 e0       	ldi	r24, 0x00	; 0
    3e26:	69 2f       	mov	r22, r25
    3e28:	41 e0       	ldi	r20, 0x01	; 1
    3e2a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
				return Local_u8PressedKey;
    3e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e30:	8c 83       	std	Y+4, r24	; 0x04
    3e32:	1c c0       	rjmp	.+56     	; 0x3e6c <KPD_u8GetPressedKey+0x10c>

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){

		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],LOW);

		for(Local_u8ColumnIdx = 0;Local_u8ColumnIdx < KPD_COL_NUM ; Local_u8ColumnIdx++){
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	8f 5f       	subi	r24, 0xFF	; 255
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	84 30       	cpi	r24, 0x04	; 4
    3e3e:	08 f4       	brcc	.+2      	; 0x3e42 <KPD_u8GetPressedKey+0xe2>
    3e40:	a7 cf       	rjmp	.-178    	; 0x3d90 <KPD_u8GetPressedKey+0x30>

				DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
				return Local_u8PressedKey;
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	88 2f       	mov	r24, r24
    3e46:	90 e0       	ldi	r25, 0x00	; 0
    3e48:	fc 01       	movw	r30, r24
    3e4a:	ec 5e       	subi	r30, 0xEC	; 236
    3e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4e:	90 81       	ld	r25, Z
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	69 2f       	mov	r22, r25
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
	u8 Local_u8RowIdx,Local_u8ColumnIdx;
	static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COL_NUM] = KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[] ={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
	static u8 Local_u8KPDRowArr[] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};

	for(Local_u8RowIdx = 0;Local_u8RowIdx < KPD_ROW_NUM ; Local_u8RowIdx++){
    3e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5c:	8f 5f       	subi	r24, 0xFF	; 255
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	84 30       	cpi	r24, 0x04	; 4
    3e64:	08 f4       	brcc	.+2      	; 0x3e68 <KPD_u8GetPressedKey+0x108>
    3e66:	86 cf       	rjmp	.-244    	; 0x3d74 <KPD_u8GetPressedKey+0x14>
			}
		}
		DIO_SetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],HIGH);

	}
	return Local_u8PressedKey;
    3e68:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6a:	8c 83       	std	Y+4, r24	; 0x04
    3e6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3e6e:	0f 90       	pop	r0
    3e70:	0f 90       	pop	r0
    3e72:	0f 90       	pop	r0
    3e74:	0f 90       	pop	r0
    3e76:	cf 91       	pop	r28
    3e78:	df 91       	pop	r29
    3e7a:	08 95       	ret

00003e7c <RowsInitialization>:


static void RowsInitialization(void){
    3e7c:	df 93       	push	r29
    3e7e:	cf 93       	push	r28
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_ROW0,OUTPUT);
    3e84:	80 e0       	ldi	r24, 0x00	; 0
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	41 e0       	ldi	r20, 0x01	; 1
    3e8a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW0,HIGH);
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	41 e0       	ldi	r20, 0x01	; 1
    3e94:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW1,OUTPUT);
    3e98:	80 e0       	ldi	r24, 0x00	; 0
    3e9a:	61 e0       	ldi	r22, 0x01	; 1
    3e9c:	41 e0       	ldi	r20, 0x01	; 1
    3e9e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW1,HIGH);
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	61 e0       	ldi	r22, 0x01	; 1
    3ea6:	41 e0       	ldi	r20, 0x01	; 1
    3ea8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW2,OUTPUT);
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	62 e0       	ldi	r22, 0x02	; 2
    3eb0:	41 e0       	ldi	r20, 0x01	; 1
    3eb2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW2,HIGH);
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	62 e0       	ldi	r22, 0x02	; 2
    3eba:	41 e0       	ldi	r20, 0x01	; 1
    3ebc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_ROW3,OUTPUT);
    3ec0:	80 e0       	ldi	r24, 0x00	; 0
    3ec2:	63 e0       	ldi	r22, 0x03	; 3
    3ec4:	41 e0       	ldi	r20, 0x01	; 1
    3ec6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_ROW3,HIGH);
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	63 e0       	ldi	r22, 0x03	; 3
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
}
    3ed4:	cf 91       	pop	r28
    3ed6:	df 91       	pop	r29
    3ed8:	08 95       	ret

00003eda <ColumnsInitialization>:
static void ColumnsInitialization(void){
    3eda:	df 93       	push	r29
    3edc:	cf 93       	push	r28
    3ede:	cd b7       	in	r28, 0x3d	; 61
    3ee0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(KPD_PORT,KPD_COL0,INPUT);
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	64 e0       	ldi	r22, 0x04	; 4
    3ee6:	40 e0       	ldi	r20, 0x00	; 0
    3ee8:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL0,HIGH);
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	64 e0       	ldi	r22, 0x04	; 4
    3ef0:	41 e0       	ldi	r20, 0x01	; 1
    3ef2:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL1,INPUT);
    3ef6:	80 e0       	ldi	r24, 0x00	; 0
    3ef8:	65 e0       	ldi	r22, 0x05	; 5
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL1,HIGH);
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	65 e0       	ldi	r22, 0x05	; 5
    3f04:	41 e0       	ldi	r20, 0x01	; 1
    3f06:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL2,INPUT);
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	66 e0       	ldi	r22, 0x06	; 6
    3f0e:	40 e0       	ldi	r20, 0x00	; 0
    3f10:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL2,HIGH);
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	66 e0       	ldi	r22, 0x06	; 6
    3f18:	41 e0       	ldi	r20, 0x01	; 1
    3f1a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>
		DIO_SetPinDirection(KPD_PORT,KPD_COL3,INPUT);
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	67 e0       	ldi	r22, 0x07	; 7
    3f22:	40 e0       	ldi	r20, 0x00	; 0
    3f24:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_SetPinDirection>
			DIO_SetPinValue(KPD_PORT,KPD_COL3,HIGH);
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	67 e0       	ldi	r22, 0x07	; 7
    3f2c:	41 e0       	ldi	r20, 0x01	; 1
    3f2e:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <DIO_SetPinValue>

}
    3f32:	cf 91       	pop	r28
    3f34:	df 91       	pop	r29
    3f36:	08 95       	ret

00003f38 <main>:
/*****************************************/
#include "APP.h"

u8 Entered_Pass[4],seconds;

int main(void){
    3f38:	0f 93       	push	r16
    3f3a:	1f 93       	push	r17
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	cf 57       	subi	r28, 0x7F	; 127
    3f46:	d0 40       	sbci	r29, 0x00	; 0
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
	/*	Variables Initialization	*/
	u8 Admin_Registerd 	,	LoginAttempts=0	,	Login_Status = NOT_LOGGED_IN;
    3f52:	fe 01       	movw	r30, r28
    3f54:	ec 58       	subi	r30, 0x8C	; 140
    3f56:	ff 4f       	sbci	r31, 0xFF	; 255
    3f58:	10 82       	st	Z, r1
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	ed 58       	subi	r30, 0x8D	; 141
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 83       	st	Z, r24
	TMR0_t Waiting ={
			.TIMER0_Mode = CTC_MODE,
			.TIMER0_Prescaler = TMR0_DIV_BY_8,
			.TMR0_OCR0 = 250,
			.ActionFunction = WaitingISR
	};
    3f64:	ce 01       	movw	r24, r28
    3f66:	8a 58       	subi	r24, 0x8A	; 138
    3f68:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6a:	ed 96       	adiw	r28, 0x3d	; 61
    3f6c:	9f af       	std	Y+63, r25	; 0x3f
    3f6e:	8e af       	std	Y+62, r24	; 0x3e
    3f70:	ed 97       	sbiw	r28, 0x3d	; 61
    3f72:	8c e2       	ldi	r24, 0x2C	; 44
    3f74:	91 e0       	ldi	r25, 0x01	; 1
    3f76:	ef 96       	adiw	r28, 0x3f	; 63
    3f78:	9f af       	std	Y+63, r25	; 0x3f
    3f7a:	8e af       	std	Y+62, r24	; 0x3e
    3f7c:	ef 97       	sbiw	r28, 0x3f	; 63
    3f7e:	95 e0       	ldi	r25, 0x05	; 5
    3f80:	c1 58       	subi	r28, 0x81	; 129
    3f82:	df 4f       	sbci	r29, 0xFF	; 255
    3f84:	98 83       	st	Y, r25
    3f86:	cf 57       	subi	r28, 0x7F	; 127
    3f88:	d0 40       	sbci	r29, 0x00	; 0
    3f8a:	ef 96       	adiw	r28, 0x3f	; 63
    3f8c:	ee ad       	ldd	r30, Y+62	; 0x3e
    3f8e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3f90:	ef 97       	sbiw	r28, 0x3f	; 63
    3f92:	00 80       	ld	r0, Z
    3f94:	ef 96       	adiw	r28, 0x3f	; 63
    3f96:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f98:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f9a:	ef 97       	sbiw	r28, 0x3f	; 63
    3f9c:	01 96       	adiw	r24, 0x01	; 1
    3f9e:	ef 96       	adiw	r28, 0x3f	; 63
    3fa0:	9f af       	std	Y+63, r25	; 0x3f
    3fa2:	8e af       	std	Y+62, r24	; 0x3e
    3fa4:	ef 97       	sbiw	r28, 0x3f	; 63
    3fa6:	ed 96       	adiw	r28, 0x3d	; 61
    3fa8:	ee ad       	ldd	r30, Y+62	; 0x3e
    3faa:	ff ad       	ldd	r31, Y+63	; 0x3f
    3fac:	ed 97       	sbiw	r28, 0x3d	; 61
    3fae:	00 82       	st	Z, r0
    3fb0:	ed 96       	adiw	r28, 0x3d	; 61
    3fb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fb6:	ed 97       	sbiw	r28, 0x3d	; 61
    3fb8:	01 96       	adiw	r24, 0x01	; 1
    3fba:	ed 96       	adiw	r28, 0x3d	; 61
    3fbc:	9f af       	std	Y+63, r25	; 0x3f
    3fbe:	8e af       	std	Y+62, r24	; 0x3e
    3fc0:	ed 97       	sbiw	r28, 0x3d	; 61
    3fc2:	c1 58       	subi	r28, 0x81	; 129
    3fc4:	df 4f       	sbci	r29, 0xFF	; 255
    3fc6:	98 81       	ld	r25, Y
    3fc8:	cf 57       	subi	r28, 0x7F	; 127
    3fca:	d0 40       	sbci	r29, 0x00	; 0
    3fcc:	91 50       	subi	r25, 0x01	; 1
    3fce:	c1 58       	subi	r28, 0x81	; 129
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	98 83       	st	Y, r25
    3fd4:	cf 57       	subi	r28, 0x7F	; 127
    3fd6:	d0 40       	sbci	r29, 0x00	; 0
    3fd8:	c1 58       	subi	r28, 0x81	; 129
    3fda:	df 4f       	sbci	r29, 0xFF	; 255
    3fdc:	e8 81       	ld	r30, Y
    3fde:	cf 57       	subi	r28, 0x7F	; 127
    3fe0:	d0 40       	sbci	r29, 0x00	; 0
    3fe2:	ee 23       	and	r30, r30
    3fe4:	91 f6       	brne	.-92     	; 0x3f8a <main+0x52>
	/*	Initialization	*/
	PORT_Init();				// Initialize ports
    3fe6:	0e 94 90 09 	call	0x1320	; 0x1320 <PORT_Init>
	LCD_4BitInitialize();		// Initialize LCD in 4-bit mode
    3fea:	0e 94 af 12 	call	0x255e	; 0x255e <LCD_4BitInitialize>
	KPD_Init();					// Initialize Keypad
    3fee:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <KPD_Init>
	SPI_EEPROM_Init();			// Initialize SPI EEPROM
    3ff2:	0e 94 70 10 	call	0x20e0	; 0x20e0 <SPI_EEPROM_Init>
	GIE_Enable();				//	Enable Global Interrupt
    3ff6:	0e 94 b7 09 	call	0x136e	; 0x136e <GIE_Enable>
	//EEPROM_EraseAll();
	 /* ------------ */
	// Display welcome message
	LED_ON(PORTD,LOGGED_OUT_LED);
    3ffa:	83 e0       	ldi	r24, 0x03	; 3
    3ffc:	61 e0       	ldi	r22, 0x01	; 1
    3ffe:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LED_ON>
	LCD_ClearDisplay4Bit();
    4002:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
	LCD_GoToXY4Bit(3,0);
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	60 e0       	ldi	r22, 0x00	; 0
    400a:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
	LCD_WriteString4Bit("Welcome To ");
    400e:	80 e6       	ldi	r24, 0x60	; 96
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
	LCD_GoToXY4Bit(2,1);
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	61 e0       	ldi	r22, 0x01	; 1
    401a:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
	LCD_WriteString4Bit("Login System !");
    401e:	8c e6       	ldi	r24, 0x6C	; 108
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
	LED_ON(PORTD,LOGGED_OUT_LED);
    4026:	83 e0       	ldi	r24, 0x03	; 3
    4028:	61 e0       	ldi	r22, 0x01	; 1
    402a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LED_ON>
    402e:	fe 01       	movw	r30, r28
    4030:	e3 59       	subi	r30, 0x93	; 147
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	af e2       	ldi	r26, 0x2F	; 47
    403a:	b4 e4       	ldi	r27, 0x44	; 68
    403c:	80 83       	st	Z, r24
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	a2 83       	std	Z+2, r26	; 0x02
    4042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4044:	8e 01       	movw	r16, r28
    4046:	07 59       	subi	r16, 0x97	; 151
    4048:	1f 4f       	sbci	r17, 0xFF	; 255
    404a:	fe 01       	movw	r30, r28
    404c:	e3 59       	subi	r30, 0x93	; 147
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	60 81       	ld	r22, Z
    4052:	71 81       	ldd	r23, Z+1	; 0x01
    4054:	82 81       	ldd	r24, Z+2	; 0x02
    4056:	93 81       	ldd	r25, Z+3	; 0x03
    4058:	20 e0       	ldi	r18, 0x00	; 0
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	4a ef       	ldi	r20, 0xFA	; 250
    405e:	54 e4       	ldi	r21, 0x44	; 68
    4060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4064:	dc 01       	movw	r26, r24
    4066:	cb 01       	movw	r24, r22
    4068:	f8 01       	movw	r30, r16
    406a:	80 83       	st	Z, r24
    406c:	91 83       	std	Z+1, r25	; 0x01
    406e:	a2 83       	std	Z+2, r26	; 0x02
    4070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4072:	fe 01       	movw	r30, r28
    4074:	e7 59       	subi	r30, 0x97	; 151
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	60 81       	ld	r22, Z
    407a:	71 81       	ldd	r23, Z+1	; 0x01
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e8       	ldi	r20, 0x80	; 128
    4086:	5f e3       	ldi	r21, 0x3F	; 63
    4088:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    408c:	88 23       	and	r24, r24
    408e:	44 f4       	brge	.+16     	; 0x40a0 <main+0x168>
		__ticks = 1;
    4090:	fe 01       	movw	r30, r28
    4092:	e9 59       	subi	r30, 0x99	; 153
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	91 83       	std	Z+1, r25	; 0x01
    409c:	80 83       	st	Z, r24
    409e:	64 c0       	rjmp	.+200    	; 0x4168 <main+0x230>
	else if (__tmp > 65535)
    40a0:	fe 01       	movw	r30, r28
    40a2:	e7 59       	subi	r30, 0x97	; 151
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	60 81       	ld	r22, Z
    40a8:	71 81       	ldd	r23, Z+1	; 0x01
    40aa:	82 81       	ldd	r24, Z+2	; 0x02
    40ac:	93 81       	ldd	r25, Z+3	; 0x03
    40ae:	20 e0       	ldi	r18, 0x00	; 0
    40b0:	3f ef       	ldi	r19, 0xFF	; 255
    40b2:	4f e7       	ldi	r20, 0x7F	; 127
    40b4:	57 e4       	ldi	r21, 0x47	; 71
    40b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ba:	18 16       	cp	r1, r24
    40bc:	0c f0       	brlt	.+2      	; 0x40c0 <main+0x188>
    40be:	43 c0       	rjmp	.+134    	; 0x4146 <main+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40c0:	fe 01       	movw	r30, r28
    40c2:	e3 59       	subi	r30, 0x93	; 147
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	60 81       	ld	r22, Z
    40c8:	71 81       	ldd	r23, Z+1	; 0x01
    40ca:	82 81       	ldd	r24, Z+2	; 0x02
    40cc:	93 81       	ldd	r25, Z+3	; 0x03
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	40 e2       	ldi	r20, 0x20	; 32
    40d4:	51 e4       	ldi	r21, 0x41	; 65
    40d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	8e 01       	movw	r16, r28
    40e0:	09 59       	subi	r16, 0x99	; 153
    40e2:	1f 4f       	sbci	r17, 0xFF	; 255
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	f8 01       	movw	r30, r16
    40f2:	91 83       	std	Z+1, r25	; 0x01
    40f4:	80 83       	st	Z, r24
    40f6:	1f c0       	rjmp	.+62     	; 0x4136 <main+0x1fe>
    40f8:	fe 01       	movw	r30, r28
    40fa:	eb 59       	subi	r30, 0x9B	; 155
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	88 ec       	ldi	r24, 0xC8	; 200
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	91 83       	std	Z+1, r25	; 0x01
    4104:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4106:	fe 01       	movw	r30, r28
    4108:	eb 59       	subi	r30, 0x9B	; 155
    410a:	ff 4f       	sbci	r31, 0xFF	; 255
    410c:	80 81       	ld	r24, Z
    410e:	91 81       	ldd	r25, Z+1	; 0x01
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <main+0x1d8>
    4114:	fe 01       	movw	r30, r28
    4116:	eb 59       	subi	r30, 0x9B	; 155
    4118:	ff 4f       	sbci	r31, 0xFF	; 255
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411e:	de 01       	movw	r26, r28
    4120:	a9 59       	subi	r26, 0x99	; 153
    4122:	bf 4f       	sbci	r27, 0xFF	; 255
    4124:	fe 01       	movw	r30, r28
    4126:	e9 59       	subi	r30, 0x99	; 153
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	80 81       	ld	r24, Z
    412c:	91 81       	ldd	r25, Z+1	; 0x01
    412e:	01 97       	sbiw	r24, 0x01	; 1
    4130:	11 96       	adiw	r26, 0x01	; 1
    4132:	9c 93       	st	X, r25
    4134:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4136:	fe 01       	movw	r30, r28
    4138:	e9 59       	subi	r30, 0x99	; 153
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	91 81       	ldd	r25, Z+1	; 0x01
    4140:	00 97       	sbiw	r24, 0x00	; 0
    4142:	d1 f6       	brne	.-76     	; 0x40f8 <main+0x1c0>
    4144:	27 c0       	rjmp	.+78     	; 0x4194 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4146:	8e 01       	movw	r16, r28
    4148:	09 59       	subi	r16, 0x99	; 153
    414a:	1f 4f       	sbci	r17, 0xFF	; 255
    414c:	fe 01       	movw	r30, r28
    414e:	e7 59       	subi	r30, 0x97	; 151
    4150:	ff 4f       	sbci	r31, 0xFF	; 255
    4152:	60 81       	ld	r22, Z
    4154:	71 81       	ldd	r23, Z+1	; 0x01
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	f8 01       	movw	r30, r16
    4164:	91 83       	std	Z+1, r25	; 0x01
    4166:	80 83       	st	Z, r24
    4168:	de 01       	movw	r26, r28
    416a:	ad 59       	subi	r26, 0x9D	; 157
    416c:	bf 4f       	sbci	r27, 0xFF	; 255
    416e:	fe 01       	movw	r30, r28
    4170:	e9 59       	subi	r30, 0x99	; 153
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	80 81       	ld	r24, Z
    4176:	91 81       	ldd	r25, Z+1	; 0x01
    4178:	8d 93       	st	X+, r24
    417a:	9c 93       	st	X, r25
    417c:	fe 01       	movw	r30, r28
    417e:	ed 59       	subi	r30, 0x9D	; 157
    4180:	ff 4f       	sbci	r31, 0xFF	; 255
    4182:	80 81       	ld	r24, Z
    4184:	91 81       	ldd	r25, Z+1	; 0x01
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	f1 f7       	brne	.-4      	; 0x4186 <main+0x24e>
    418a:	fe 01       	movw	r30, r28
    418c:	ed 59       	subi	r30, 0x9D	; 157
    418e:	ff 4f       	sbci	r31, 0xFF	; 255
    4190:	91 83       	std	Z+1, r25	; 0x01
    4192:	80 83       	st	Z, r24
	_delay_ms(700);
	LCD_ClearDisplay4Bit();
    4194:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
	EEPROM_ReadByte(LOGIN_STATUS_ADDRESS,&Admin_Registerd);
    4198:	9e 01       	movw	r18, r28
    419a:	2b 58       	subi	r18, 0x8B	; 139
    419c:	3f 4f       	sbci	r19, 0xFF	; 255
    419e:	67 e0       	ldi	r22, 0x07	; 7
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	a9 01       	movw	r20, r18
    41a8:	0e 94 c1 10 	call	0x2182	; 0x2182 <EEPROM_ReadByte>

	// Check if it's the first login
	if(Admin_Registerd == NOT_REGISTERED){
    41ac:	fe 01       	movw	r30, r28
    41ae:	eb 58       	subi	r30, 0x8B	; 139
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	80 81       	ld	r24, Z
    41b4:	8f 3f       	cpi	r24, 0xFF	; 255
    41b6:	09 f0       	breq	.+2      	; 0x41ba <main+0x282>
    41b8:	9f c1       	rjmp	.+830    	; 0x44f8 <main+0x5c0>
		// First login, prompt user to set admin password
		LCD_WriteString4Bit("First Login");
    41ba:	8b e7       	ldi	r24, 0x7B	; 123
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
		LCD_GoToXY4Bit(0,1);
    41c2:	80 e0       	ldi	r24, 0x00	; 0
    41c4:	61 e0       	ldi	r22, 0x01	; 1
    41c6:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
		LCD_WriteString4Bit("Set Admin Pass");
    41ca:	87 e8       	ldi	r24, 0x87	; 135
    41cc:	90 e0       	ldi	r25, 0x00	; 0
    41ce:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    41d2:	fe 01       	movw	r30, r28
    41d4:	e1 5a       	subi	r30, 0xA1	; 161
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	af e2       	ldi	r26, 0x2F	; 47
    41de:	b4 e4       	ldi	r27, 0x44	; 68
    41e0:	80 83       	st	Z, r24
    41e2:	91 83       	std	Z+1, r25	; 0x01
    41e4:	a2 83       	std	Z+2, r26	; 0x02
    41e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e8:	8e 01       	movw	r16, r28
    41ea:	05 5a       	subi	r16, 0xA5	; 165
    41ec:	1f 4f       	sbci	r17, 0xFF	; 255
    41ee:	fe 01       	movw	r30, r28
    41f0:	e1 5a       	subi	r30, 0xA1	; 161
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	60 81       	ld	r22, Z
    41f6:	71 81       	ldd	r23, Z+1	; 0x01
    41f8:	82 81       	ldd	r24, Z+2	; 0x02
    41fa:	93 81       	ldd	r25, Z+3	; 0x03
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	4a ef       	ldi	r20, 0xFA	; 250
    4202:	54 e4       	ldi	r21, 0x44	; 68
    4204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	f8 01       	movw	r30, r16
    420e:	80 83       	st	Z, r24
    4210:	91 83       	std	Z+1, r25	; 0x01
    4212:	a2 83       	std	Z+2, r26	; 0x02
    4214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4216:	fe 01       	movw	r30, r28
    4218:	e5 5a       	subi	r30, 0xA5	; 165
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	60 81       	ld	r22, Z
    421e:	71 81       	ldd	r23, Z+1	; 0x01
    4220:	82 81       	ldd	r24, Z+2	; 0x02
    4222:	93 81       	ldd	r25, Z+3	; 0x03
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	40 e8       	ldi	r20, 0x80	; 128
    422a:	5f e3       	ldi	r21, 0x3F	; 63
    422c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4230:	88 23       	and	r24, r24
    4232:	44 f4       	brge	.+16     	; 0x4244 <main+0x30c>
		__ticks = 1;
    4234:	fe 01       	movw	r30, r28
    4236:	e7 5a       	subi	r30, 0xA7	; 167
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	91 83       	std	Z+1, r25	; 0x01
    4240:	80 83       	st	Z, r24
    4242:	64 c0       	rjmp	.+200    	; 0x430c <main+0x3d4>
	else if (__tmp > 65535)
    4244:	fe 01       	movw	r30, r28
    4246:	e5 5a       	subi	r30, 0xA5	; 165
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	60 81       	ld	r22, Z
    424c:	71 81       	ldd	r23, Z+1	; 0x01
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	93 81       	ldd	r25, Z+3	; 0x03
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	3f ef       	ldi	r19, 0xFF	; 255
    4256:	4f e7       	ldi	r20, 0x7F	; 127
    4258:	57 e4       	ldi	r21, 0x47	; 71
    425a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    425e:	18 16       	cp	r1, r24
    4260:	0c f0       	brlt	.+2      	; 0x4264 <main+0x32c>
    4262:	43 c0       	rjmp	.+134    	; 0x42ea <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4264:	fe 01       	movw	r30, r28
    4266:	e1 5a       	subi	r30, 0xA1	; 161
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	60 81       	ld	r22, Z
    426c:	71 81       	ldd	r23, Z+1	; 0x01
    426e:	82 81       	ldd	r24, Z+2	; 0x02
    4270:	93 81       	ldd	r25, Z+3	; 0x03
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e2       	ldi	r20, 0x20	; 32
    4278:	51 e4       	ldi	r21, 0x41	; 65
    427a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    427e:	dc 01       	movw	r26, r24
    4280:	cb 01       	movw	r24, r22
    4282:	8e 01       	movw	r16, r28
    4284:	07 5a       	subi	r16, 0xA7	; 167
    4286:	1f 4f       	sbci	r17, 0xFF	; 255
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	f8 01       	movw	r30, r16
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
    429a:	1f c0       	rjmp	.+62     	; 0x42da <main+0x3a2>
    429c:	fe 01       	movw	r30, r28
    429e:	e9 5a       	subi	r30, 0xA9	; 169
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	88 ec       	ldi	r24, 0xC8	; 200
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	91 83       	std	Z+1, r25	; 0x01
    42a8:	80 83       	st	Z, r24
    42aa:	fe 01       	movw	r30, r28
    42ac:	e9 5a       	subi	r30, 0xA9	; 169
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <main+0x37c>
    42b8:	fe 01       	movw	r30, r28
    42ba:	e9 5a       	subi	r30, 0xA9	; 169
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c2:	de 01       	movw	r26, r28
    42c4:	a7 5a       	subi	r26, 0xA7	; 167
    42c6:	bf 4f       	sbci	r27, 0xFF	; 255
    42c8:	fe 01       	movw	r30, r28
    42ca:	e7 5a       	subi	r30, 0xA7	; 167
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 81       	ld	r24, Z
    42d0:	91 81       	ldd	r25, Z+1	; 0x01
    42d2:	01 97       	sbiw	r24, 0x01	; 1
    42d4:	11 96       	adiw	r26, 0x01	; 1
    42d6:	9c 93       	st	X, r25
    42d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42da:	fe 01       	movw	r30, r28
    42dc:	e7 5a       	subi	r30, 0xA7	; 167
    42de:	ff 4f       	sbci	r31, 0xFF	; 255
    42e0:	80 81       	ld	r24, Z
    42e2:	91 81       	ldd	r25, Z+1	; 0x01
    42e4:	00 97       	sbiw	r24, 0x00	; 0
    42e6:	d1 f6       	brne	.-76     	; 0x429c <main+0x364>
    42e8:	27 c0       	rjmp	.+78     	; 0x4338 <main+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ea:	8e 01       	movw	r16, r28
    42ec:	07 5a       	subi	r16, 0xA7	; 167
    42ee:	1f 4f       	sbci	r17, 0xFF	; 255
    42f0:	fe 01       	movw	r30, r28
    42f2:	e5 5a       	subi	r30, 0xA5	; 165
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	60 81       	ld	r22, Z
    42f8:	71 81       	ldd	r23, Z+1	; 0x01
    42fa:	82 81       	ldd	r24, Z+2	; 0x02
    42fc:	93 81       	ldd	r25, Z+3	; 0x03
    42fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	f8 01       	movw	r30, r16
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	80 83       	st	Z, r24
    430c:	de 01       	movw	r26, r28
    430e:	ab 5a       	subi	r26, 0xAB	; 171
    4310:	bf 4f       	sbci	r27, 0xFF	; 255
    4312:	fe 01       	movw	r30, r28
    4314:	e7 5a       	subi	r30, 0xA7	; 167
    4316:	ff 4f       	sbci	r31, 0xFF	; 255
    4318:	80 81       	ld	r24, Z
    431a:	91 81       	ldd	r25, Z+1	; 0x01
    431c:	8d 93       	st	X+, r24
    431e:	9c 93       	st	X, r25
    4320:	fe 01       	movw	r30, r28
    4322:	eb 5a       	subi	r30, 0xAB	; 171
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	80 81       	ld	r24, Z
    4328:	91 81       	ldd	r25, Z+1	; 0x01
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	f1 f7       	brne	.-4      	; 0x432a <main+0x3f2>
    432e:	fe 01       	movw	r30, r28
    4330:	eb 5a       	subi	r30, 0xAB	; 171
    4332:	ff 4f       	sbci	r31, 0xFF	; 255
    4334:	91 83       	std	Z+1, r25	; 0x01
    4336:	80 83       	st	Z, r24
		_delay_ms(700);
		LCD_ClearDisplay4Bit();
    4338:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
		// Prompt user to enter password and save it
		LCD_GoToXY4Bit(0,0);
    433c:	80 e0       	ldi	r24, 0x00	; 0
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
		LCD_WriteString4Bit("Password : ");
    4344:	86 e9       	ldi	r24, 0x96	; 150
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
		LCD_GoToXY4Bit(0,1);
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	61 e0       	ldi	r22, 0x01	; 1
    4350:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
		Accept_Password(Entered_Pass);
    4354:	84 e4       	ldi	r24, 0x44	; 68
    4356:	91 e0       	ldi	r25, 0x01	; 1
    4358:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <Accept_Password>
		LCD_ClearDisplay4Bit();
    435c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
		LCD_GoToXY4Bit(0,0);
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	60 e0       	ldi	r22, 0x00	; 0
    4364:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
		LCD_WriteString4Bit("Login Successful");
    4368:	82 ea       	ldi	r24, 0xA2	; 162
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
		Login_Status = LOGGED_IN;
    4370:	fe 01       	movw	r30, r28
    4372:	ed 58       	subi	r30, 0x8D	; 141
    4374:	ff 4f       	sbci	r31, 0xFF	; 255
    4376:	10 82       	st	Z, r1
		// Set login status to indicate first login has occurred
		SPI_EEPROM_WriteByte(LOGIN_STATUS_ADDRESS,0x11);
    4378:	67 e0       	ldi	r22, 0x07	; 7
    437a:	70 e0       	ldi	r23, 0x00	; 0
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	41 e1       	ldi	r20, 0x11	; 17
    4382:	0e 94 8a 10 	call	0x2114	; 0x2114 <SPI_EEPROM_WriteByte>
		// Save admin password
		SaveAdmin_Password(Entered_Pass);
    4386:	84 e4       	ldi	r24, 0x44	; 68
    4388:	91 e0       	ldi	r25, 0x01	; 1
    438a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <SaveAdmin_Password>
    438e:	fe 01       	movw	r30, r28
    4390:	ef 5a       	subi	r30, 0xAF	; 175
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	90 e0       	ldi	r25, 0x00	; 0
    4398:	aa e7       	ldi	r26, 0x7A	; 122
    439a:	b4 e4       	ldi	r27, 0x44	; 68
    439c:	80 83       	st	Z, r24
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	a2 83       	std	Z+2, r26	; 0x02
    43a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a4:	8e 01       	movw	r16, r28
    43a6:	03 5b       	subi	r16, 0xB3	; 179
    43a8:	1f 4f       	sbci	r17, 0xFF	; 255
    43aa:	fe 01       	movw	r30, r28
    43ac:	ef 5a       	subi	r30, 0xAF	; 175
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	60 81       	ld	r22, Z
    43b2:	71 81       	ldd	r23, Z+1	; 0x01
    43b4:	82 81       	ldd	r24, Z+2	; 0x02
    43b6:	93 81       	ldd	r25, Z+3	; 0x03
    43b8:	20 e0       	ldi	r18, 0x00	; 0
    43ba:	30 e0       	ldi	r19, 0x00	; 0
    43bc:	4a ef       	ldi	r20, 0xFA	; 250
    43be:	54 e4       	ldi	r21, 0x44	; 68
    43c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	f8 01       	movw	r30, r16
    43ca:	80 83       	st	Z, r24
    43cc:	91 83       	std	Z+1, r25	; 0x01
    43ce:	a2 83       	std	Z+2, r26	; 0x02
    43d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43d2:	fe 01       	movw	r30, r28
    43d4:	e3 5b       	subi	r30, 0xB3	; 179
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	60 81       	ld	r22, Z
    43da:	71 81       	ldd	r23, Z+1	; 0x01
    43dc:	82 81       	ldd	r24, Z+2	; 0x02
    43de:	93 81       	ldd	r25, Z+3	; 0x03
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e8       	ldi	r20, 0x80	; 128
    43e6:	5f e3       	ldi	r21, 0x3F	; 63
    43e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43ec:	88 23       	and	r24, r24
    43ee:	44 f4       	brge	.+16     	; 0x4400 <main+0x4c8>
		__ticks = 1;
    43f0:	fe 01       	movw	r30, r28
    43f2:	e5 5b       	subi	r30, 0xB5	; 181
    43f4:	ff 4f       	sbci	r31, 0xFF	; 255
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	91 83       	std	Z+1, r25	; 0x01
    43fc:	80 83       	st	Z, r24
    43fe:	64 c0       	rjmp	.+200    	; 0x44c8 <main+0x590>
	else if (__tmp > 65535)
    4400:	fe 01       	movw	r30, r28
    4402:	e3 5b       	subi	r30, 0xB3	; 179
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	82 81       	ldd	r24, Z+2	; 0x02
    440c:	93 81       	ldd	r25, Z+3	; 0x03
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	3f ef       	ldi	r19, 0xFF	; 255
    4412:	4f e7       	ldi	r20, 0x7F	; 127
    4414:	57 e4       	ldi	r21, 0x47	; 71
    4416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    441a:	18 16       	cp	r1, r24
    441c:	0c f0       	brlt	.+2      	; 0x4420 <main+0x4e8>
    441e:	43 c0       	rjmp	.+134    	; 0x44a6 <main+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4420:	fe 01       	movw	r30, r28
    4422:	ef 5a       	subi	r30, 0xAF	; 175
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	60 81       	ld	r22, Z
    4428:	71 81       	ldd	r23, Z+1	; 0x01
    442a:	82 81       	ldd	r24, Z+2	; 0x02
    442c:	93 81       	ldd	r25, Z+3	; 0x03
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	40 e2       	ldi	r20, 0x20	; 32
    4434:	51 e4       	ldi	r21, 0x41	; 65
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	8e 01       	movw	r16, r28
    4440:	05 5b       	subi	r16, 0xB5	; 181
    4442:	1f 4f       	sbci	r17, 0xFF	; 255
    4444:	bc 01       	movw	r22, r24
    4446:	cd 01       	movw	r24, r26
    4448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444c:	dc 01       	movw	r26, r24
    444e:	cb 01       	movw	r24, r22
    4450:	f8 01       	movw	r30, r16
    4452:	91 83       	std	Z+1, r25	; 0x01
    4454:	80 83       	st	Z, r24
    4456:	1f c0       	rjmp	.+62     	; 0x4496 <main+0x55e>
    4458:	fe 01       	movw	r30, r28
    445a:	e7 5b       	subi	r30, 0xB7	; 183
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	88 ec       	ldi	r24, 0xC8	; 200
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	80 83       	st	Z, r24
    4466:	fe 01       	movw	r30, r28
    4468:	e7 5b       	subi	r30, 0xB7	; 183
    446a:	ff 4f       	sbci	r31, 0xFF	; 255
    446c:	80 81       	ld	r24, Z
    446e:	91 81       	ldd	r25, Z+1	; 0x01
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	f1 f7       	brne	.-4      	; 0x4470 <main+0x538>
    4474:	fe 01       	movw	r30, r28
    4476:	e7 5b       	subi	r30, 0xB7	; 183
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	91 83       	std	Z+1, r25	; 0x01
    447c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447e:	de 01       	movw	r26, r28
    4480:	a5 5b       	subi	r26, 0xB5	; 181
    4482:	bf 4f       	sbci	r27, 0xFF	; 255
    4484:	fe 01       	movw	r30, r28
    4486:	e5 5b       	subi	r30, 0xB5	; 181
    4488:	ff 4f       	sbci	r31, 0xFF	; 255
    448a:	80 81       	ld	r24, Z
    448c:	91 81       	ldd	r25, Z+1	; 0x01
    448e:	01 97       	sbiw	r24, 0x01	; 1
    4490:	11 96       	adiw	r26, 0x01	; 1
    4492:	9c 93       	st	X, r25
    4494:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4496:	fe 01       	movw	r30, r28
    4498:	e5 5b       	subi	r30, 0xB5	; 181
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	80 81       	ld	r24, Z
    449e:	91 81       	ldd	r25, Z+1	; 0x01
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	d1 f6       	brne	.-76     	; 0x4458 <main+0x520>
    44a4:	14 c2       	rjmp	.+1064   	; 0x48ce <main+0x996>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44a6:	8e 01       	movw	r16, r28
    44a8:	05 5b       	subi	r16, 0xB5	; 181
    44aa:	1f 4f       	sbci	r17, 0xFF	; 255
    44ac:	fe 01       	movw	r30, r28
    44ae:	e3 5b       	subi	r30, 0xB3	; 179
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	f8 01       	movw	r30, r16
    44c4:	91 83       	std	Z+1, r25	; 0x01
    44c6:	80 83       	st	Z, r24
    44c8:	de 01       	movw	r26, r28
    44ca:	a9 5b       	subi	r26, 0xB9	; 185
    44cc:	bf 4f       	sbci	r27, 0xFF	; 255
    44ce:	fe 01       	movw	r30, r28
    44d0:	e5 5b       	subi	r30, 0xB5	; 181
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	80 81       	ld	r24, Z
    44d6:	91 81       	ldd	r25, Z+1	; 0x01
    44d8:	11 96       	adiw	r26, 0x01	; 1
    44da:	9c 93       	st	X, r25
    44dc:	8e 93       	st	-X, r24
    44de:	fe 01       	movw	r30, r28
    44e0:	e9 5b       	subi	r30, 0xB9	; 185
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	80 81       	ld	r24, Z
    44e6:	91 81       	ldd	r25, Z+1	; 0x01
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	f1 f7       	brne	.-4      	; 0x44e8 <main+0x5b0>
    44ec:	fe 01       	movw	r30, r28
    44ee:	e9 5b       	subi	r30, 0xB9	; 185
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	91 83       	std	Z+1, r25	; 0x01
    44f4:	80 83       	st	Z, r24
    44f6:	eb c1       	rjmp	.+982    	; 0x48ce <main+0x996>
		_delay_ms(1000);
	}
	else if(Admin_Registerd == REGISTERED){
    44f8:	fe 01       	movw	r30, r28
    44fa:	eb 58       	subi	r30, 0x8B	; 139
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	81 31       	cpi	r24, 0x11	; 17
    4502:	09 f0       	breq	.+2      	; 0x4506 <main+0x5ce>
    4504:	e4 c1       	rjmp	.+968    	; 0x48ce <main+0x996>
    4506:	dc c1       	rjmp	.+952    	; 0x48c0 <main+0x988>
		while (LoginAttempts < 3) {
			// Not first login, prompt user to enter password
			LCD_WriteString4Bit("PLS Enter Pass");
    4508:	83 eb       	ldi	r24, 0xB3	; 179
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
			LCD_GoToXY4Bit(0, 1);
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	61 e0       	ldi	r22, 0x01	; 1
    4514:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
			Accept_Password(Entered_Pass);
    4518:	84 e4       	ldi	r24, 0x44	; 68
    451a:	91 e0       	ldi	r25, 0x01	; 1
    451c:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <Accept_Password>
			LCD_ClearDisplay4Bit();
    4520:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
			// Check if entered password is correct
			if (IsCorrect(Entered_Pass) == CORRECT) {
    4524:	84 e4       	ldi	r24, 0x44	; 68
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <IsCorrect>
    452c:	88 23       	and	r24, r24
    452e:	09 f0       	breq	.+2      	; 0x4532 <main+0x5fa>
    4530:	96 c0       	rjmp	.+300    	; 0x465e <main+0x726>
				LCD_WriteString4Bit("Correct Password");
    4532:	82 ec       	ldi	r24, 0xC2	; 194
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    453a:	fe 01       	movw	r30, r28
    453c:	ed 5b       	subi	r30, 0xBD	; 189
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	aa e7       	ldi	r26, 0x7A	; 122
    4546:	b4 e4       	ldi	r27, 0x44	; 68
    4548:	80 83       	st	Z, r24
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	a2 83       	std	Z+2, r26	; 0x02
    454e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4550:	8e 01       	movw	r16, r28
    4552:	01 5c       	subi	r16, 0xC1	; 193
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	fe 01       	movw	r30, r28
    4558:	ed 5b       	subi	r30, 0xBD	; 189
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	60 81       	ld	r22, Z
    455e:	71 81       	ldd	r23, Z+1	; 0x01
    4560:	82 81       	ldd	r24, Z+2	; 0x02
    4562:	93 81       	ldd	r25, Z+3	; 0x03
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	4a ef       	ldi	r20, 0xFA	; 250
    456a:	54 e4       	ldi	r21, 0x44	; 68
    456c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	f8 01       	movw	r30, r16
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    457e:	fe 01       	movw	r30, r28
    4580:	ff 96       	adiw	r30, 0x3f	; 63
    4582:	60 81       	ld	r22, Z
    4584:	71 81       	ldd	r23, Z+1	; 0x01
    4586:	82 81       	ldd	r24, Z+2	; 0x02
    4588:	93 81       	ldd	r25, Z+3	; 0x03
    458a:	20 e0       	ldi	r18, 0x00	; 0
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	40 e8       	ldi	r20, 0x80	; 128
    4590:	5f e3       	ldi	r21, 0x3F	; 63
    4592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4596:	88 23       	and	r24, r24
    4598:	2c f4       	brge	.+10     	; 0x45a4 <main+0x66c>
		__ticks = 1;
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	9e af       	std	Y+62, r25	; 0x3e
    45a0:	8d af       	std	Y+61, r24	; 0x3d
    45a2:	46 c0       	rjmp	.+140    	; 0x4630 <main+0x6f8>
	else if (__tmp > 65535)
    45a4:	fe 01       	movw	r30, r28
    45a6:	ff 96       	adiw	r30, 0x3f	; 63
    45a8:	60 81       	ld	r22, Z
    45aa:	71 81       	ldd	r23, Z+1	; 0x01
    45ac:	82 81       	ldd	r24, Z+2	; 0x02
    45ae:	93 81       	ldd	r25, Z+3	; 0x03
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	3f ef       	ldi	r19, 0xFF	; 255
    45b4:	4f e7       	ldi	r20, 0x7F	; 127
    45b6:	57 e4       	ldi	r21, 0x47	; 71
    45b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45bc:	18 16       	cp	r1, r24
    45be:	64 f5       	brge	.+88     	; 0x4618 <main+0x6e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	fe 01       	movw	r30, r28
    45c2:	ed 5b       	subi	r30, 0xBD	; 189
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	60 81       	ld	r22, Z
    45c8:	71 81       	ldd	r23, Z+1	; 0x01
    45ca:	82 81       	ldd	r24, Z+2	; 0x02
    45cc:	93 81       	ldd	r25, Z+3	; 0x03
    45ce:	20 e0       	ldi	r18, 0x00	; 0
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	40 e2       	ldi	r20, 0x20	; 32
    45d4:	51 e4       	ldi	r21, 0x41	; 65
    45d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	bc 01       	movw	r22, r24
    45e0:	cd 01       	movw	r24, r26
    45e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	9e af       	std	Y+62, r25	; 0x3e
    45ec:	8d af       	std	Y+61, r24	; 0x3d
    45ee:	0f c0       	rjmp	.+30     	; 0x460e <main+0x6d6>
    45f0:	88 ec       	ldi	r24, 0xC8	; 200
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	9c af       	std	Y+60, r25	; 0x3c
    45f6:	8b af       	std	Y+59, r24	; 0x3b
    45f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    45fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	f1 f7       	brne	.-4      	; 0x45fc <main+0x6c4>
    4600:	9c af       	std	Y+60, r25	; 0x3c
    4602:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4604:	8d ad       	ldd	r24, Y+61	; 0x3d
    4606:	9e ad       	ldd	r25, Y+62	; 0x3e
    4608:	01 97       	sbiw	r24, 0x01	; 1
    460a:	9e af       	std	Y+62, r25	; 0x3e
    460c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    460e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4610:	9e ad       	ldd	r25, Y+62	; 0x3e
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	69 f7       	brne	.-38     	; 0x45f0 <main+0x6b8>
    4616:	16 c0       	rjmp	.+44     	; 0x4644 <main+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4618:	fe 01       	movw	r30, r28
    461a:	ff 96       	adiw	r30, 0x3f	; 63
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	9e af       	std	Y+62, r25	; 0x3e
    462e:	8d af       	std	Y+61, r24	; 0x3d
    4630:	8d ad       	ldd	r24, Y+61	; 0x3d
    4632:	9e ad       	ldd	r25, Y+62	; 0x3e
    4634:	9a af       	std	Y+58, r25	; 0x3a
    4636:	89 af       	std	Y+57, r24	; 0x39
    4638:	89 ad       	ldd	r24, Y+57	; 0x39
    463a:	9a ad       	ldd	r25, Y+58	; 0x3a
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	f1 f7       	brne	.-4      	; 0x463c <main+0x704>
    4640:	9a af       	std	Y+58, r25	; 0x3a
    4642:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LED_OFF(PORTD,LOGGED_OUT_LED);
    4644:	83 e0       	ldi	r24, 0x03	; 3
    4646:	61 e0       	ldi	r22, 0x01	; 1
    4648:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <LED_OFF>
				LED_ON(PORTD,LOGGED_IN_LED);
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	60 e0       	ldi	r22, 0x00	; 0
    4650:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <LED_ON>
				Login_Status = LOGGED_IN;
    4654:	fe 01       	movw	r30, r28
    4656:	ed 58       	subi	r30, 0x8D	; 141
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	10 82       	st	Z, r1
    465c:	38 c1       	rjmp	.+624    	; 0x48ce <main+0x996>
				break;  // Exit the loop if the password is correct
			} else {
				// Password is incorrect, prompt user to enter password again
				LCD_WriteString4Bit("Wrong Password");
    465e:	83 ed       	ldi	r24, 0xD3	; 211
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    4666:	80 e0       	ldi	r24, 0x00	; 0
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	aa e7       	ldi	r26, 0x7A	; 122
    466c:	b4 e4       	ldi	r27, 0x44	; 68
    466e:	8d ab       	std	Y+53, r24	; 0x35
    4670:	9e ab       	std	Y+54, r25	; 0x36
    4672:	af ab       	std	Y+55, r26	; 0x37
    4674:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4676:	6d a9       	ldd	r22, Y+53	; 0x35
    4678:	7e a9       	ldd	r23, Y+54	; 0x36
    467a:	8f a9       	ldd	r24, Y+55	; 0x37
    467c:	98 ad       	ldd	r25, Y+56	; 0x38
    467e:	20 e0       	ldi	r18, 0x00	; 0
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	4a ef       	ldi	r20, 0xFA	; 250
    4684:	54 e4       	ldi	r21, 0x44	; 68
    4686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	89 ab       	std	Y+49, r24	; 0x31
    4690:	9a ab       	std	Y+50, r25	; 0x32
    4692:	ab ab       	std	Y+51, r26	; 0x33
    4694:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4696:	69 a9       	ldd	r22, Y+49	; 0x31
    4698:	7a a9       	ldd	r23, Y+50	; 0x32
    469a:	8b a9       	ldd	r24, Y+51	; 0x33
    469c:	9c a9       	ldd	r25, Y+52	; 0x34
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	40 e8       	ldi	r20, 0x80	; 128
    46a4:	5f e3       	ldi	r21, 0x3F	; 63
    46a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46aa:	88 23       	and	r24, r24
    46ac:	2c f4       	brge	.+10     	; 0x46b8 <main+0x780>
		__ticks = 1;
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	98 ab       	std	Y+48, r25	; 0x30
    46b4:	8f a7       	std	Y+47, r24	; 0x2f
    46b6:	3f c0       	rjmp	.+126    	; 0x4736 <main+0x7fe>
	else if (__tmp > 65535)
    46b8:	69 a9       	ldd	r22, Y+49	; 0x31
    46ba:	7a a9       	ldd	r23, Y+50	; 0x32
    46bc:	8b a9       	ldd	r24, Y+51	; 0x33
    46be:	9c a9       	ldd	r25, Y+52	; 0x34
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	3f ef       	ldi	r19, 0xFF	; 255
    46c4:	4f e7       	ldi	r20, 0x7F	; 127
    46c6:	57 e4       	ldi	r21, 0x47	; 71
    46c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46cc:	18 16       	cp	r1, r24
    46ce:	4c f5       	brge	.+82     	; 0x4722 <main+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d0:	6d a9       	ldd	r22, Y+53	; 0x35
    46d2:	7e a9       	ldd	r23, Y+54	; 0x36
    46d4:	8f a9       	ldd	r24, Y+55	; 0x37
    46d6:	98 ad       	ldd	r25, Y+56	; 0x38
    46d8:	20 e0       	ldi	r18, 0x00	; 0
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	40 e2       	ldi	r20, 0x20	; 32
    46de:	51 e4       	ldi	r21, 0x41	; 65
    46e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e4:	dc 01       	movw	r26, r24
    46e6:	cb 01       	movw	r24, r22
    46e8:	bc 01       	movw	r22, r24
    46ea:	cd 01       	movw	r24, r26
    46ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46f0:	dc 01       	movw	r26, r24
    46f2:	cb 01       	movw	r24, r22
    46f4:	98 ab       	std	Y+48, r25	; 0x30
    46f6:	8f a7       	std	Y+47, r24	; 0x2f
    46f8:	0f c0       	rjmp	.+30     	; 0x4718 <main+0x7e0>
    46fa:	88 ec       	ldi	r24, 0xC8	; 200
    46fc:	90 e0       	ldi	r25, 0x00	; 0
    46fe:	9e a7       	std	Y+46, r25	; 0x2e
    4700:	8d a7       	std	Y+45, r24	; 0x2d
    4702:	8d a5       	ldd	r24, Y+45	; 0x2d
    4704:	9e a5       	ldd	r25, Y+46	; 0x2e
    4706:	01 97       	sbiw	r24, 0x01	; 1
    4708:	f1 f7       	brne	.-4      	; 0x4706 <main+0x7ce>
    470a:	9e a7       	std	Y+46, r25	; 0x2e
    470c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    470e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4710:	98 a9       	ldd	r25, Y+48	; 0x30
    4712:	01 97       	sbiw	r24, 0x01	; 1
    4714:	98 ab       	std	Y+48, r25	; 0x30
    4716:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4718:	8f a5       	ldd	r24, Y+47	; 0x2f
    471a:	98 a9       	ldd	r25, Y+48	; 0x30
    471c:	00 97       	sbiw	r24, 0x00	; 0
    471e:	69 f7       	brne	.-38     	; 0x46fa <main+0x7c2>
    4720:	14 c0       	rjmp	.+40     	; 0x474a <main+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4722:	69 a9       	ldd	r22, Y+49	; 0x31
    4724:	7a a9       	ldd	r23, Y+50	; 0x32
    4726:	8b a9       	ldd	r24, Y+51	; 0x33
    4728:	9c a9       	ldd	r25, Y+52	; 0x34
    472a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472e:	dc 01       	movw	r26, r24
    4730:	cb 01       	movw	r24, r22
    4732:	98 ab       	std	Y+48, r25	; 0x30
    4734:	8f a7       	std	Y+47, r24	; 0x2f
    4736:	8f a5       	ldd	r24, Y+47	; 0x2f
    4738:	98 a9       	ldd	r25, Y+48	; 0x30
    473a:	9c a7       	std	Y+44, r25	; 0x2c
    473c:	8b a7       	std	Y+43, r24	; 0x2b
    473e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4740:	9c a5       	ldd	r25, Y+44	; 0x2c
    4742:	01 97       	sbiw	r24, 0x01	; 1
    4744:	f1 f7       	brne	.-4      	; 0x4742 <main+0x80a>
    4746:	9c a7       	std	Y+44, r25	; 0x2c
    4748:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				LCD_ClearDisplay4Bit();
    474a:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
				LoginAttempts++;
    474e:	de 01       	movw	r26, r28
    4750:	ac 58       	subi	r26, 0x8C	; 140
    4752:	bf 4f       	sbci	r27, 0xFF	; 255
    4754:	fe 01       	movw	r30, r28
    4756:	ec 58       	subi	r30, 0x8C	; 140
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	80 81       	ld	r24, Z
    475c:	8f 5f       	subi	r24, 0xFF	; 255
    475e:	8c 93       	st	X, r24
			}
			if(LoginAttempts >= 3) {
    4760:	fe 01       	movw	r30, r28
    4762:	ec 58       	subi	r30, 0x8C	; 140
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	80 81       	ld	r24, Z
    4768:	83 30       	cpi	r24, 0x03	; 3
    476a:	08 f4       	brcc	.+2      	; 0x476e <main+0x836>
    476c:	a9 c0       	rjmp	.+338    	; 0x48c0 <main+0x988>
				LCD_ClearDisplay4Bit();
    476e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
				LCD_WriteString4Bit("Too many attempts");
    4772:	82 ee       	ldi	r24, 0xE2	; 226
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    477a:	80 e0       	ldi	r24, 0x00	; 0
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	aa e7       	ldi	r26, 0x7A	; 122
    4780:	b4 e4       	ldi	r27, 0x44	; 68
    4782:	8f a3       	std	Y+39, r24	; 0x27
    4784:	98 a7       	std	Y+40, r25	; 0x28
    4786:	a9 a7       	std	Y+41, r26	; 0x29
    4788:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    478a:	6f a1       	ldd	r22, Y+39	; 0x27
    478c:	78 a5       	ldd	r23, Y+40	; 0x28
    478e:	89 a5       	ldd	r24, Y+41	; 0x29
    4790:	9a a5       	ldd	r25, Y+42	; 0x2a
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	4a ef       	ldi	r20, 0xFA	; 250
    4798:	54 e4       	ldi	r21, 0x44	; 68
    479a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	8b a3       	std	Y+35, r24	; 0x23
    47a4:	9c a3       	std	Y+36, r25	; 0x24
    47a6:	ad a3       	std	Y+37, r26	; 0x25
    47a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47aa:	6b a1       	ldd	r22, Y+35	; 0x23
    47ac:	7c a1       	ldd	r23, Y+36	; 0x24
    47ae:	8d a1       	ldd	r24, Y+37	; 0x25
    47b0:	9e a1       	ldd	r25, Y+38	; 0x26
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	40 e8       	ldi	r20, 0x80	; 128
    47b8:	5f e3       	ldi	r21, 0x3F	; 63
    47ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47be:	88 23       	and	r24, r24
    47c0:	2c f4       	brge	.+10     	; 0x47cc <main+0x894>
		__ticks = 1;
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	90 e0       	ldi	r25, 0x00	; 0
    47c6:	9a a3       	std	Y+34, r25	; 0x22
    47c8:	89 a3       	std	Y+33, r24	; 0x21
    47ca:	3f c0       	rjmp	.+126    	; 0x484a <main+0x912>
	else if (__tmp > 65535)
    47cc:	6b a1       	ldd	r22, Y+35	; 0x23
    47ce:	7c a1       	ldd	r23, Y+36	; 0x24
    47d0:	8d a1       	ldd	r24, Y+37	; 0x25
    47d2:	9e a1       	ldd	r25, Y+38	; 0x26
    47d4:	20 e0       	ldi	r18, 0x00	; 0
    47d6:	3f ef       	ldi	r19, 0xFF	; 255
    47d8:	4f e7       	ldi	r20, 0x7F	; 127
    47da:	57 e4       	ldi	r21, 0x47	; 71
    47dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47e0:	18 16       	cp	r1, r24
    47e2:	4c f5       	brge	.+82     	; 0x4836 <main+0x8fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47e4:	6f a1       	ldd	r22, Y+39	; 0x27
    47e6:	78 a5       	ldd	r23, Y+40	; 0x28
    47e8:	89 a5       	ldd	r24, Y+41	; 0x29
    47ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e2       	ldi	r20, 0x20	; 32
    47f2:	51 e4       	ldi	r21, 0x41	; 65
    47f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	bc 01       	movw	r22, r24
    47fe:	cd 01       	movw	r24, r26
    4800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	9a a3       	std	Y+34, r25	; 0x22
    480a:	89 a3       	std	Y+33, r24	; 0x21
    480c:	0f c0       	rjmp	.+30     	; 0x482c <main+0x8f4>
    480e:	88 ec       	ldi	r24, 0xC8	; 200
    4810:	90 e0       	ldi	r25, 0x00	; 0
    4812:	98 a3       	std	Y+32, r25	; 0x20
    4814:	8f 8f       	std	Y+31, r24	; 0x1f
    4816:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4818:	98 a1       	ldd	r25, Y+32	; 0x20
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	f1 f7       	brne	.-4      	; 0x481a <main+0x8e2>
    481e:	98 a3       	std	Y+32, r25	; 0x20
    4820:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4822:	89 a1       	ldd	r24, Y+33	; 0x21
    4824:	9a a1       	ldd	r25, Y+34	; 0x22
    4826:	01 97       	sbiw	r24, 0x01	; 1
    4828:	9a a3       	std	Y+34, r25	; 0x22
    482a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    482c:	89 a1       	ldd	r24, Y+33	; 0x21
    482e:	9a a1       	ldd	r25, Y+34	; 0x22
    4830:	00 97       	sbiw	r24, 0x00	; 0
    4832:	69 f7       	brne	.-38     	; 0x480e <main+0x8d6>
    4834:	14 c0       	rjmp	.+40     	; 0x485e <main+0x926>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4836:	6b a1       	ldd	r22, Y+35	; 0x23
    4838:	7c a1       	ldd	r23, Y+36	; 0x24
    483a:	8d a1       	ldd	r24, Y+37	; 0x25
    483c:	9e a1       	ldd	r25, Y+38	; 0x26
    483e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	9a a3       	std	Y+34, r25	; 0x22
    4848:	89 a3       	std	Y+33, r24	; 0x21
    484a:	89 a1       	ldd	r24, Y+33	; 0x21
    484c:	9a a1       	ldd	r25, Y+34	; 0x22
    484e:	9e 8f       	std	Y+30, r25	; 0x1e
    4850:	8d 8f       	std	Y+29, r24	; 0x1d
    4852:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4854:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4856:	01 97       	sbiw	r24, 0x01	; 1
    4858:	f1 f7       	brne	.-4      	; 0x4856 <main+0x91e>
    485a:	9e 8f       	std	Y+30, r25	; 0x1e
    485c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(1000);
				/*	Waiting	*/
				TMR0_Init(&Waiting);
    485e:	ce 01       	movw	r24, r28
    4860:	8a 58       	subi	r24, 0x8A	; 138
    4862:	9f 4f       	sbci	r25, 0xFF	; 255
    4864:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TMR0_Init>
				TMR0_CTCSetCallBack(&Waiting);
    4868:	ce 01       	movw	r24, r28
    486a:	8a 58       	subi	r24, 0x8A	; 138
    486c:	9f 4f       	sbci	r25, 0xFF	; 255
    486e:	0e 94 25 07 	call	0xe4a	; 0xe4a <TMR0_CTCSetCallBack>
				LCD_ClearDisplay4Bit();
    4872:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
				LCD_WriteString4Bit("Please Wait !");
    4876:	84 ef       	ldi	r24, 0xF4	; 244
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    487e:	14 c0       	rjmp	.+40     	; 0x48a8 <main+0x970>
				while(seconds <= 30){
					LCD_GoToXY4Bit(0,1);
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	61 e0       	ldi	r22, 0x01	; 1
    4884:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
					LCD_WriteNumber4Bit(30-seconds);
    4888:	80 91 48 01 	lds	r24, 0x0148
    488c:	28 2f       	mov	r18, r24
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	8e e1       	ldi	r24, 0x1E	; 30
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	82 1b       	sub	r24, r18
    4896:	93 0b       	sbc	r25, r19
    4898:	aa 27       	eor	r26, r26
    489a:	97 fd       	sbrc	r25, 7
    489c:	a0 95       	com	r26
    489e:	ba 2f       	mov	r27, r26
    48a0:	bc 01       	movw	r22, r24
    48a2:	cd 01       	movw	r24, r26
    48a4:	0e 94 24 14 	call	0x2848	; 0x2848 <LCD_WriteNumber4Bit>
				/*	Waiting	*/
				TMR0_Init(&Waiting);
				TMR0_CTCSetCallBack(&Waiting);
				LCD_ClearDisplay4Bit();
				LCD_WriteString4Bit("Please Wait !");
				while(seconds <= 30){
    48a8:	80 91 48 01 	lds	r24, 0x0148
    48ac:	8f 31       	cpi	r24, 0x1F	; 31
    48ae:	40 f3       	brcs	.-48     	; 0x4880 <main+0x948>
					LCD_GoToXY4Bit(0,1);
					LCD_WriteNumber4Bit(30-seconds);
				}
				seconds = 0;
    48b0:	10 92 48 01 	sts	0x0148, r1
				LoginAttempts = 0;
    48b4:	fe 01       	movw	r30, r28
    48b6:	ec 58       	subi	r30, 0x8C	; 140
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	10 82       	st	Z, r1
				LCD_ClearDisplay4Bit();
    48bc:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
		// Save admin password
		SaveAdmin_Password(Entered_Pass);
		_delay_ms(1000);
	}
	else if(Admin_Registerd == REGISTERED){
		while (LoginAttempts < 3) {
    48c0:	fe 01       	movw	r30, r28
    48c2:	ec 58       	subi	r30, 0x8C	; 140
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	80 81       	ld	r24, Z
    48c8:	83 30       	cpi	r24, 0x03	; 3
    48ca:	08 f4       	brcc	.+2      	; 0x48ce <main+0x996>
    48cc:	1d ce       	rjmp	.-966    	; 0x4508 <main+0x5d0>
				LCD_ClearDisplay4Bit();
			}
		}
	}
	while(1){
		if(Login_Status == LOGGED_IN){
    48ce:	fe 01       	movw	r30, r28
    48d0:	ed 58       	subi	r30, 0x8D	; 141
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	80 81       	ld	r24, Z
    48d6:	88 23       	and	r24, r24
    48d8:	d1 f7       	brne	.-12     	; 0x48ce <main+0x996>
			/*	Write Your Program Here	*/
			for(u8 i=0;i<9;i++){
    48da:	fe 01       	movw	r30, r28
    48dc:	ee 58       	subi	r30, 0x8E	; 142
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	10 82       	st	Z, r1
    48e2:	88 c0       	rjmp	.+272    	; 0x49f4 <main+0xabc>
				LCD_ClearDisplay4Bit();
    48e4:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
				LCD_GoToXY4Bit(i,0);
    48e8:	fe 01       	movw	r30, r28
    48ea:	ee 58       	subi	r30, 0x8E	; 142
    48ec:	ff 4f       	sbci	r31, 0xFF	; 255
    48ee:	80 81       	ld	r24, Z
    48f0:	60 e0       	ldi	r22, 0x00	; 0
    48f2:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
				LCD_WriteString4Bit("Welcome!");
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	91 e0       	ldi	r25, 0x01	; 1
    48fa:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	a8 ec       	ldi	r26, 0xC8	; 200
    4904:	b2 e4       	ldi	r27, 0x42	; 66
    4906:	89 8f       	std	Y+25, r24	; 0x19
    4908:	9a 8f       	std	Y+26, r25	; 0x1a
    490a:	ab 8f       	std	Y+27, r26	; 0x1b
    490c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    490e:	69 8d       	ldd	r22, Y+25	; 0x19
    4910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4a ef       	ldi	r20, 0xFA	; 250
    491c:	54 e4       	ldi	r21, 0x44	; 68
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	8d 8b       	std	Y+21, r24	; 0x15
    4928:	9e 8b       	std	Y+22, r25	; 0x16
    492a:	af 8b       	std	Y+23, r26	; 0x17
    492c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    492e:	6d 89       	ldd	r22, Y+21	; 0x15
    4930:	7e 89       	ldd	r23, Y+22	; 0x16
    4932:	8f 89       	ldd	r24, Y+23	; 0x17
    4934:	98 8d       	ldd	r25, Y+24	; 0x18
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e8       	ldi	r20, 0x80	; 128
    493c:	5f e3       	ldi	r21, 0x3F	; 63
    493e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4942:	88 23       	and	r24, r24
    4944:	2c f4       	brge	.+10     	; 0x4950 <main+0xa18>
		__ticks = 1;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	9c 8b       	std	Y+20, r25	; 0x14
    494c:	8b 8b       	std	Y+19, r24	; 0x13
    494e:	3f c0       	rjmp	.+126    	; 0x49ce <main+0xa96>
	else if (__tmp > 65535)
    4950:	6d 89       	ldd	r22, Y+21	; 0x15
    4952:	7e 89       	ldd	r23, Y+22	; 0x16
    4954:	8f 89       	ldd	r24, Y+23	; 0x17
    4956:	98 8d       	ldd	r25, Y+24	; 0x18
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	3f ef       	ldi	r19, 0xFF	; 255
    495c:	4f e7       	ldi	r20, 0x7F	; 127
    495e:	57 e4       	ldi	r21, 0x47	; 71
    4960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4964:	18 16       	cp	r1, r24
    4966:	4c f5       	brge	.+82     	; 0x49ba <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4968:	69 8d       	ldd	r22, Y+25	; 0x19
    496a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    496c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    496e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4970:	20 e0       	ldi	r18, 0x00	; 0
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	40 e2       	ldi	r20, 0x20	; 32
    4976:	51 e4       	ldi	r21, 0x41	; 65
    4978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    497c:	dc 01       	movw	r26, r24
    497e:	cb 01       	movw	r24, r22
    4980:	bc 01       	movw	r22, r24
    4982:	cd 01       	movw	r24, r26
    4984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4988:	dc 01       	movw	r26, r24
    498a:	cb 01       	movw	r24, r22
    498c:	9c 8b       	std	Y+20, r25	; 0x14
    498e:	8b 8b       	std	Y+19, r24	; 0x13
    4990:	0f c0       	rjmp	.+30     	; 0x49b0 <main+0xa78>
    4992:	88 ec       	ldi	r24, 0xC8	; 200
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	9a 8b       	std	Y+18, r25	; 0x12
    4998:	89 8b       	std	Y+17, r24	; 0x11
    499a:	89 89       	ldd	r24, Y+17	; 0x11
    499c:	9a 89       	ldd	r25, Y+18	; 0x12
    499e:	01 97       	sbiw	r24, 0x01	; 1
    49a0:	f1 f7       	brne	.-4      	; 0x499e <main+0xa66>
    49a2:	9a 8b       	std	Y+18, r25	; 0x12
    49a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49a6:	8b 89       	ldd	r24, Y+19	; 0x13
    49a8:	9c 89       	ldd	r25, Y+20	; 0x14
    49aa:	01 97       	sbiw	r24, 0x01	; 1
    49ac:	9c 8b       	std	Y+20, r25	; 0x14
    49ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b0:	8b 89       	ldd	r24, Y+19	; 0x13
    49b2:	9c 89       	ldd	r25, Y+20	; 0x14
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	69 f7       	brne	.-38     	; 0x4992 <main+0xa5a>
    49b8:	14 c0       	rjmp	.+40     	; 0x49e2 <main+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ba:	6d 89       	ldd	r22, Y+21	; 0x15
    49bc:	7e 89       	ldd	r23, Y+22	; 0x16
    49be:	8f 89       	ldd	r24, Y+23	; 0x17
    49c0:	98 8d       	ldd	r25, Y+24	; 0x18
    49c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c6:	dc 01       	movw	r26, r24
    49c8:	cb 01       	movw	r24, r22
    49ca:	9c 8b       	std	Y+20, r25	; 0x14
    49cc:	8b 8b       	std	Y+19, r24	; 0x13
    49ce:	8b 89       	ldd	r24, Y+19	; 0x13
    49d0:	9c 89       	ldd	r25, Y+20	; 0x14
    49d2:	98 8b       	std	Y+16, r25	; 0x10
    49d4:	8f 87       	std	Y+15, r24	; 0x0f
    49d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    49d8:	98 89       	ldd	r25, Y+16	; 0x10
    49da:	01 97       	sbiw	r24, 0x01	; 1
    49dc:	f1 f7       	brne	.-4      	; 0x49da <main+0xaa2>
    49de:	98 8b       	std	Y+16, r25	; 0x10
    49e0:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	while(1){
		if(Login_Status == LOGGED_IN){
			/*	Write Your Program Here	*/
			for(u8 i=0;i<9;i++){
    49e2:	de 01       	movw	r26, r28
    49e4:	ae 58       	subi	r26, 0x8E	; 142
    49e6:	bf 4f       	sbci	r27, 0xFF	; 255
    49e8:	fe 01       	movw	r30, r28
    49ea:	ee 58       	subi	r30, 0x8E	; 142
    49ec:	ff 4f       	sbci	r31, 0xFF	; 255
    49ee:	80 81       	ld	r24, Z
    49f0:	8f 5f       	subi	r24, 0xFF	; 255
    49f2:	8c 93       	st	X, r24
    49f4:	fe 01       	movw	r30, r28
    49f6:	ee 58       	subi	r30, 0x8E	; 142
    49f8:	ff 4f       	sbci	r31, 0xFF	; 255
    49fa:	80 81       	ld	r24, Z
    49fc:	89 30       	cpi	r24, 0x09	; 9
    49fe:	08 f4       	brcc	.+2      	; 0x4a02 <main+0xaca>
    4a00:	71 cf       	rjmp	.-286    	; 0x48e4 <main+0x9ac>
				LCD_ClearDisplay4Bit();
				LCD_GoToXY4Bit(i,0);
				LCD_WriteString4Bit("Welcome!");
				_delay_ms(100);
			}
			for(u8 i=0;i<9;i++){
    4a02:	fe 01       	movw	r30, r28
    4a04:	ef 58       	subi	r30, 0x8F	; 143
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	10 82       	st	Z, r1
    4a0a:	88 c0       	rjmp	.+272    	; 0x4b1c <main+0xbe4>
				LCD_ClearDisplay4Bit();
    4a0c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <LCD_ClearDisplay4Bit>
				LCD_GoToXY4Bit(i,1);
    4a10:	fe 01       	movw	r30, r28
    4a12:	ef 58       	subi	r30, 0x8F	; 143
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	61 e0       	ldi	r22, 0x01	; 1
    4a1a:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
				LCD_WriteString4Bit("Welcome!");
    4a1e:	82 e0       	ldi	r24, 0x02	; 2
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_WriteString4Bit>
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	90 e0       	ldi	r25, 0x00	; 0
    4a2a:	a8 ec       	ldi	r26, 0xC8	; 200
    4a2c:	b2 e4       	ldi	r27, 0x42	; 66
    4a2e:	8b 87       	std	Y+11, r24	; 0x0b
    4a30:	9c 87       	std	Y+12, r25	; 0x0c
    4a32:	ad 87       	std	Y+13, r26	; 0x0d
    4a34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a3e:	20 e0       	ldi	r18, 0x00	; 0
    4a40:	30 e0       	ldi	r19, 0x00	; 0
    4a42:	4a ef       	ldi	r20, 0xFA	; 250
    4a44:	54 e4       	ldi	r21, 0x44	; 68
    4a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	8f 83       	std	Y+7, r24	; 0x07
    4a50:	98 87       	std	Y+8, r25	; 0x08
    4a52:	a9 87       	std	Y+9, r26	; 0x09
    4a54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a56:	6f 81       	ldd	r22, Y+7	; 0x07
    4a58:	78 85       	ldd	r23, Y+8	; 0x08
    4a5a:	89 85       	ldd	r24, Y+9	; 0x09
    4a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a5e:	20 e0       	ldi	r18, 0x00	; 0
    4a60:	30 e0       	ldi	r19, 0x00	; 0
    4a62:	40 e8       	ldi	r20, 0x80	; 128
    4a64:	5f e3       	ldi	r21, 0x3F	; 63
    4a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a6a:	88 23       	and	r24, r24
    4a6c:	2c f4       	brge	.+10     	; 0x4a78 <main+0xb40>
		__ticks = 1;
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	9e 83       	std	Y+6, r25	; 0x06
    4a74:	8d 83       	std	Y+5, r24	; 0x05
    4a76:	3f c0       	rjmp	.+126    	; 0x4af6 <main+0xbbe>
	else if (__tmp > 65535)
    4a78:	6f 81       	ldd	r22, Y+7	; 0x07
    4a7a:	78 85       	ldd	r23, Y+8	; 0x08
    4a7c:	89 85       	ldd	r24, Y+9	; 0x09
    4a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	3f ef       	ldi	r19, 0xFF	; 255
    4a84:	4f e7       	ldi	r20, 0x7F	; 127
    4a86:	57 e4       	ldi	r21, 0x47	; 71
    4a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a8c:	18 16       	cp	r1, r24
    4a8e:	4c f5       	brge	.+82     	; 0x4ae2 <main+0xbaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a90:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a92:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a94:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a96:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	40 e2       	ldi	r20, 0x20	; 32
    4a9e:	51 e4       	ldi	r21, 0x41	; 65
    4aa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa4:	dc 01       	movw	r26, r24
    4aa6:	cb 01       	movw	r24, r22
    4aa8:	bc 01       	movw	r22, r24
    4aaa:	cd 01       	movw	r24, r26
    4aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	cb 01       	movw	r24, r22
    4ab4:	9e 83       	std	Y+6, r25	; 0x06
    4ab6:	8d 83       	std	Y+5, r24	; 0x05
    4ab8:	0f c0       	rjmp	.+30     	; 0x4ad8 <main+0xba0>
    4aba:	88 ec       	ldi	r24, 0xC8	; 200
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	9c 83       	std	Y+4, r25	; 0x04
    4ac0:	8b 83       	std	Y+3, r24	; 0x03
    4ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	f1 f7       	brne	.-4      	; 0x4ac6 <main+0xb8e>
    4aca:	9c 83       	std	Y+4, r25	; 0x04
    4acc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ace:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad2:	01 97       	sbiw	r24, 0x01	; 1
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ada:	9e 81       	ldd	r25, Y+6	; 0x06
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	69 f7       	brne	.-38     	; 0x4aba <main+0xb82>
    4ae0:	14 c0       	rjmp	.+40     	; 0x4b0a <main+0xbd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    4ae4:	78 85       	ldd	r23, Y+8	; 0x08
    4ae6:	89 85       	ldd	r24, Y+9	; 0x09
    4ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aee:	dc 01       	movw	r26, r24
    4af0:	cb 01       	movw	r24, r22
    4af2:	9e 83       	std	Y+6, r25	; 0x06
    4af4:	8d 83       	std	Y+5, r24	; 0x05
    4af6:	8d 81       	ldd	r24, Y+5	; 0x05
    4af8:	9e 81       	ldd	r25, Y+6	; 0x06
    4afa:	9a 83       	std	Y+2, r25	; 0x02
    4afc:	89 83       	std	Y+1, r24	; 0x01
    4afe:	89 81       	ldd	r24, Y+1	; 0x01
    4b00:	9a 81       	ldd	r25, Y+2	; 0x02
    4b02:	01 97       	sbiw	r24, 0x01	; 1
    4b04:	f1 f7       	brne	.-4      	; 0x4b02 <main+0xbca>
    4b06:	9a 83       	std	Y+2, r25	; 0x02
    4b08:	89 83       	std	Y+1, r24	; 0x01
				LCD_ClearDisplay4Bit();
				LCD_GoToXY4Bit(i,0);
				LCD_WriteString4Bit("Welcome!");
				_delay_ms(100);
			}
			for(u8 i=0;i<9;i++){
    4b0a:	de 01       	movw	r26, r28
    4b0c:	af 58       	subi	r26, 0x8F	; 143
    4b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4b10:	fe 01       	movw	r30, r28
    4b12:	ef 58       	subi	r30, 0x8F	; 143
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	80 81       	ld	r24, Z
    4b18:	8f 5f       	subi	r24, 0xFF	; 255
    4b1a:	8c 93       	st	X, r24
    4b1c:	fe 01       	movw	r30, r28
    4b1e:	ef 58       	subi	r30, 0x8F	; 143
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	80 81       	ld	r24, Z
    4b24:	89 30       	cpi	r24, 0x09	; 9
    4b26:	08 f4       	brcc	.+2      	; 0x4b2a <main+0xbf2>
    4b28:	71 cf       	rjmp	.-286    	; 0x4a0c <main+0xad4>
    4b2a:	d1 ce       	rjmp	.-606    	; 0x48ce <main+0x996>

00004b2c <Accept_Password>:
		}
	}
	return 0;
}

void Accept_Password(u8 *Copy_u8Password){
    4b2c:	0f 93       	push	r16
    4b2e:	1f 93       	push	r17
    4b30:	df 93       	push	r29
    4b32:	cf 93       	push	r28
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	61 97       	sbiw	r28, 0x11	; 17
    4b3a:	0f b6       	in	r0, 0x3f	; 63
    4b3c:	f8 94       	cli
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	0f be       	out	0x3f, r0	; 63
    4b42:	cd bf       	out	0x3d, r28	; 61
    4b44:	99 8b       	std	Y+17, r25	; 0x11
    4b46:	88 8b       	std	Y+16, r24	; 0x10
	u8 iterator=0;
    4b48:	1f 86       	std	Y+15, r1	; 0x0f
	for(iterator = 0;iterator<4;iterator++){
    4b4a:	1f 86       	std	Y+15, r1	; 0x0f
    4b4c:	93 c0       	rjmp	.+294    	; 0x4c74 <Accept_Password+0x148>
		Copy_u8Password[iterator] = KPD_Press();
    4b4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b50:	28 2f       	mov	r18, r24
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	88 89       	ldd	r24, Y+16	; 0x10
    4b56:	99 89       	ldd	r25, Y+17	; 0x11
    4b58:	8c 01       	movw	r16, r24
    4b5a:	02 0f       	add	r16, r18
    4b5c:	13 1f       	adc	r17, r19
    4b5e:	0e 94 8c 26 	call	0x4d18	; 0x4d18 <KPD_Press>
    4b62:	f8 01       	movw	r30, r16
    4b64:	80 83       	st	Z, r24
		LCD_WriteData4Bit(Copy_u8Password[iterator]);
    4b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b68:	28 2f       	mov	r18, r24
    4b6a:	30 e0       	ldi	r19, 0x00	; 0
    4b6c:	88 89       	ldd	r24, Y+16	; 0x10
    4b6e:	99 89       	ldd	r25, Y+17	; 0x11
    4b70:	fc 01       	movw	r30, r24
    4b72:	e2 0f       	add	r30, r18
    4b74:	f3 1f       	adc	r31, r19
    4b76:	80 81       	ld	r24, Z
    4b78:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	ac e8       	ldi	r26, 0x8C	; 140
    4b82:	b2 e4       	ldi	r27, 0x42	; 66
    4b84:	8b 87       	std	Y+11, r24	; 0x0b
    4b86:	9c 87       	std	Y+12, r25	; 0x0c
    4b88:	ad 87       	std	Y+13, r26	; 0x0d
    4b8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	4a ef       	ldi	r20, 0xFA	; 250
    4b9a:	54 e4       	ldi	r21, 0x44	; 68
    4b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	8f 83       	std	Y+7, r24	; 0x07
    4ba6:	98 87       	std	Y+8, r25	; 0x08
    4ba8:	a9 87       	std	Y+9, r26	; 0x09
    4baa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bac:	6f 81       	ldd	r22, Y+7	; 0x07
    4bae:	78 85       	ldd	r23, Y+8	; 0x08
    4bb0:	89 85       	ldd	r24, Y+9	; 0x09
    4bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e8       	ldi	r20, 0x80	; 128
    4bba:	5f e3       	ldi	r21, 0x3F	; 63
    4bbc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bc0:	88 23       	and	r24, r24
    4bc2:	2c f4       	brge	.+10     	; 0x4bce <Accept_Password+0xa2>
		__ticks = 1;
    4bc4:	81 e0       	ldi	r24, 0x01	; 1
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	9e 83       	std	Y+6, r25	; 0x06
    4bca:	8d 83       	std	Y+5, r24	; 0x05
    4bcc:	3f c0       	rjmp	.+126    	; 0x4c4c <Accept_Password+0x120>
	else if (__tmp > 65535)
    4bce:	6f 81       	ldd	r22, Y+7	; 0x07
    4bd0:	78 85       	ldd	r23, Y+8	; 0x08
    4bd2:	89 85       	ldd	r24, Y+9	; 0x09
    4bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	3f ef       	ldi	r19, 0xFF	; 255
    4bda:	4f e7       	ldi	r20, 0x7F	; 127
    4bdc:	57 e4       	ldi	r21, 0x47	; 71
    4bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4be2:	18 16       	cp	r1, r24
    4be4:	4c f5       	brge	.+82     	; 0x4c38 <Accept_Password+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bee:	20 e0       	ldi	r18, 0x00	; 0
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	40 e2       	ldi	r20, 0x20	; 32
    4bf4:	51 e4       	ldi	r21, 0x41	; 65
    4bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	cb 01       	movw	r24, r22
    4bfe:	bc 01       	movw	r22, r24
    4c00:	cd 01       	movw	r24, r26
    4c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	9e 83       	std	Y+6, r25	; 0x06
    4c0c:	8d 83       	std	Y+5, r24	; 0x05
    4c0e:	0f c0       	rjmp	.+30     	; 0x4c2e <Accept_Password+0x102>
    4c10:	88 ec       	ldi	r24, 0xC8	; 200
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	9c 83       	std	Y+4, r25	; 0x04
    4c16:	8b 83       	std	Y+3, r24	; 0x03
    4c18:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1c:	01 97       	sbiw	r24, 0x01	; 1
    4c1e:	f1 f7       	brne	.-4      	; 0x4c1c <Accept_Password+0xf0>
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c24:	8d 81       	ldd	r24, Y+5	; 0x05
    4c26:	9e 81       	ldd	r25, Y+6	; 0x06
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	9e 83       	std	Y+6, r25	; 0x06
    4c2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c30:	9e 81       	ldd	r25, Y+6	; 0x06
    4c32:	00 97       	sbiw	r24, 0x00	; 0
    4c34:	69 f7       	brne	.-38     	; 0x4c10 <Accept_Password+0xe4>
    4c36:	14 c0       	rjmp	.+40     	; 0x4c60 <Accept_Password+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c38:	6f 81       	ldd	r22, Y+7	; 0x07
    4c3a:	78 85       	ldd	r23, Y+8	; 0x08
    4c3c:	89 85       	ldd	r24, Y+9	; 0x09
    4c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	9e 83       	std	Y+6, r25	; 0x06
    4c4a:	8d 83       	std	Y+5, r24	; 0x05
    4c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c50:	9a 83       	std	Y+2, r25	; 0x02
    4c52:	89 83       	std	Y+1, r24	; 0x01
    4c54:	89 81       	ldd	r24, Y+1	; 0x01
    4c56:	9a 81       	ldd	r25, Y+2	; 0x02
    4c58:	01 97       	sbiw	r24, 0x01	; 1
    4c5a:	f1 f7       	brne	.-4      	; 0x4c58 <Accept_Password+0x12c>
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(70);
		LCD_GoToXY4Bit(iterator,1);
    4c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c62:	61 e0       	ldi	r22, 0x01	; 1
    4c64:	0e 94 01 14 	call	0x2802	; 0x2802 <LCD_GoToXY4Bit>
		LCD_WriteData4Bit('*');
    4c68:	8a e2       	ldi	r24, 0x2A	; 42
    4c6a:	0e 94 88 12 	call	0x2510	; 0x2510 <LCD_WriteData4Bit>
	return 0;
}

void Accept_Password(u8 *Copy_u8Password){
	u8 iterator=0;
	for(iterator = 0;iterator<4;iterator++){
    4c6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c70:	8f 5f       	subi	r24, 0xFF	; 255
    4c72:	8f 87       	std	Y+15, r24	; 0x0f
    4c74:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c76:	84 30       	cpi	r24, 0x04	; 4
    4c78:	08 f4       	brcc	.+2      	; 0x4c7c <Accept_Password+0x150>
    4c7a:	69 cf       	rjmp	.-302    	; 0x4b4e <Accept_Password+0x22>
		LCD_WriteData4Bit(Copy_u8Password[iterator]);
		_delay_ms(70);
		LCD_GoToXY4Bit(iterator,1);
		LCD_WriteData4Bit('*');
	}
}
    4c7c:	61 96       	adiw	r28, 0x11	; 17
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	cf 91       	pop	r28
    4c8a:	df 91       	pop	r29
    4c8c:	1f 91       	pop	r17
    4c8e:	0f 91       	pop	r16
    4c90:	08 95       	ret

00004c92 <SaveAdmin_Password>:

void SaveAdmin_Password(u8 *Copy_u8Password){
    4c92:	df 93       	push	r29
    4c94:	cf 93       	push	r28
    4c96:	cd b7       	in	r28, 0x3d	; 61
    4c98:	de b7       	in	r29, 0x3e	; 62
    4c9a:	27 97       	sbiw	r28, 0x07	; 7
    4c9c:	0f b6       	in	r0, 0x3f	; 63
    4c9e:	f8 94       	cli
    4ca0:	de bf       	out	0x3e, r29	; 62
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	cd bf       	out	0x3d, r28	; 61
    4ca6:	9f 83       	std	Y+7, r25	; 0x07
    4ca8:	8e 83       	std	Y+6, r24	; 0x06
	u32 Address=PASS_START_ADDRESS;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	a0 e0       	ldi	r26, 0x00	; 0
    4cb0:	b0 e0       	ldi	r27, 0x00	; 0
    4cb2:	8a 83       	std	Y+2, r24	; 0x02
    4cb4:	9b 83       	std	Y+3, r25	; 0x03
    4cb6:	ac 83       	std	Y+4, r26	; 0x04
    4cb8:	bd 83       	std	Y+5, r27	; 0x05
	u8 iterator = 0;
    4cba:	19 82       	std	Y+1, r1	; 0x01
	for(iterator = 0;iterator <4;iterator++,Address++){
    4cbc:	19 82       	std	Y+1, r1	; 0x01
    4cbe:	20 c0       	rjmp	.+64     	; 0x4d00 <SaveAdmin_Password+0x6e>
		SPI_EEPROM_WriteByte(Address,Copy_u8Password[iterator]);
    4cc0:	89 81       	ldd	r24, Y+1	; 0x01
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    4cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    4cca:	fc 01       	movw	r30, r24
    4ccc:	e2 0f       	add	r30, r18
    4cce:	f3 1f       	adc	r31, r19
    4cd0:	20 81       	ld	r18, Z
    4cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    4cd6:	ac 81       	ldd	r26, Y+4	; 0x04
    4cd8:	bd 81       	ldd	r27, Y+5	; 0x05
    4cda:	bc 01       	movw	r22, r24
    4cdc:	cd 01       	movw	r24, r26
    4cde:	42 2f       	mov	r20, r18
    4ce0:	0e 94 8a 10 	call	0x2114	; 0x2114 <SPI_EEPROM_WriteByte>
}

void SaveAdmin_Password(u8 *Copy_u8Password){
	u32 Address=PASS_START_ADDRESS;
	u8 iterator = 0;
	for(iterator = 0;iterator <4;iterator++,Address++){
    4ce4:	89 81       	ldd	r24, Y+1	; 0x01
    4ce6:	8f 5f       	subi	r24, 0xFF	; 255
    4ce8:	89 83       	std	Y+1, r24	; 0x01
    4cea:	8a 81       	ldd	r24, Y+2	; 0x02
    4cec:	9b 81       	ldd	r25, Y+3	; 0x03
    4cee:	ac 81       	ldd	r26, Y+4	; 0x04
    4cf0:	bd 81       	ldd	r27, Y+5	; 0x05
    4cf2:	01 96       	adiw	r24, 0x01	; 1
    4cf4:	a1 1d       	adc	r26, r1
    4cf6:	b1 1d       	adc	r27, r1
    4cf8:	8a 83       	std	Y+2, r24	; 0x02
    4cfa:	9b 83       	std	Y+3, r25	; 0x03
    4cfc:	ac 83       	std	Y+4, r26	; 0x04
    4cfe:	bd 83       	std	Y+5, r27	; 0x05
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	84 30       	cpi	r24, 0x04	; 4
    4d04:	e8 f2       	brcs	.-70     	; 0x4cc0 <SaveAdmin_Password+0x2e>
		SPI_EEPROM_WriteByte(Address,Copy_u8Password[iterator]);
	}
}
    4d06:	27 96       	adiw	r28, 0x07	; 7
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	cd bf       	out	0x3d, r28	; 61
    4d12:	cf 91       	pop	r28
    4d14:	df 91       	pop	r29
    4d16:	08 95       	ret

00004d18 <KPD_Press>:

u8 KPD_Press(void){
    4d18:	df 93       	push	r29
    4d1a:	cf 93       	push	r28
    4d1c:	0f 92       	push	r0
    4d1e:	cd b7       	in	r28, 0x3d	; 61
    4d20:	de b7       	in	r29, 0x3e	; 62
	u8 PressedKey = 0xff;
    4d22:	8f ef       	ldi	r24, 0xFF	; 255
    4d24:	89 83       	std	Y+1, r24	; 0x01
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <KPD_Press+0x16>
	while(PressedKey == 0Xff){
		PressedKey = KPD_u8GetPressedKey();
    4d28:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <KPD_u8GetPressedKey>
    4d2c:	89 83       	std	Y+1, r24	; 0x01
	}
}

u8 KPD_Press(void){
	u8 PressedKey = 0xff;
	while(PressedKey == 0Xff){
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	8f 3f       	cpi	r24, 0xFF	; 255
    4d32:	d1 f3       	breq	.-12     	; 0x4d28 <KPD_Press+0x10>
		PressedKey = KPD_u8GetPressedKey();
	}
	return PressedKey;
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d36:	0f 90       	pop	r0
    4d38:	cf 91       	pop	r28
    4d3a:	df 91       	pop	r29
    4d3c:	08 95       	ret

00004d3e <IsCorrect>:

u8 IsCorrect(u8 *Copy_u8Password) {
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	cd b7       	in	r28, 0x3d	; 61
    4d44:	de b7       	in	r29, 0x3e	; 62
    4d46:	2c 97       	sbiw	r28, 0x0c	; 12
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	de bf       	out	0x3e, r29	; 62
    4d4e:	0f be       	out	0x3f, r0	; 63
    4d50:	cd bf       	out	0x3d, r28	; 61
    4d52:	9c 87       	std	Y+12, r25	; 0x0c
    4d54:	8b 87       	std	Y+11, r24	; 0x0b
    u32 Address = PASS_START_ADDRESS;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	a0 e0       	ldi	r26, 0x00	; 0
    4d5c:	b0 e0       	ldi	r27, 0x00	; 0
    4d5e:	8b 83       	std	Y+3, r24	; 0x03
    4d60:	9c 83       	std	Y+4, r25	; 0x04
    4d62:	ad 83       	std	Y+5, r26	; 0x05
    4d64:	be 83       	std	Y+6, r27	; 0x06
    u8 iterator, state = NOT_CORRECT;
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	89 83       	std	Y+1, r24	; 0x01
    u8 Local_u8Pass[4] = {0};
    4d6a:	1f 82       	std	Y+7, r1	; 0x07
    4d6c:	18 86       	std	Y+8, r1	; 0x08
    4d6e:	19 86       	std	Y+9, r1	; 0x09
    4d70:	1a 86       	std	Y+10, r1	; 0x0a

    // Load password from EEPROM into Local_u8Pass
    for (iterator = 0; iterator < 4; iterator++, Address++) {
    4d72:	1a 82       	std	Y+2, r1	; 0x02
    4d74:	1f c0       	rjmp	.+62     	; 0x4db4 <IsCorrect+0x76>
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
    4d76:	8a 81       	ldd	r24, Y+2	; 0x02
    4d78:	88 2f       	mov	r24, r24
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	9e 01       	movw	r18, r28
    4d7e:	29 5f       	subi	r18, 0xF9	; 249
    4d80:	3f 4f       	sbci	r19, 0xFF	; 255
    4d82:	28 0f       	add	r18, r24
    4d84:	39 1f       	adc	r19, r25
    4d86:	8b 81       	ldd	r24, Y+3	; 0x03
    4d88:	9c 81       	ldd	r25, Y+4	; 0x04
    4d8a:	ad 81       	ldd	r26, Y+5	; 0x05
    4d8c:	be 81       	ldd	r27, Y+6	; 0x06
    4d8e:	bc 01       	movw	r22, r24
    4d90:	cd 01       	movw	r24, r26
    4d92:	a9 01       	movw	r20, r18
    4d94:	0e 94 c1 10 	call	0x2182	; 0x2182 <EEPROM_ReadByte>
    u32 Address = PASS_START_ADDRESS;
    u8 iterator, state = NOT_CORRECT;
    u8 Local_u8Pass[4] = {0};

    // Load password from EEPROM into Local_u8Pass
    for (iterator = 0; iterator < 4; iterator++, Address++) {
    4d98:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9a:	8f 5f       	subi	r24, 0xFF	; 255
    4d9c:	8a 83       	std	Y+2, r24	; 0x02
    4d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    4da0:	9c 81       	ldd	r25, Y+4	; 0x04
    4da2:	ad 81       	ldd	r26, Y+5	; 0x05
    4da4:	be 81       	ldd	r27, Y+6	; 0x06
    4da6:	01 96       	adiw	r24, 0x01	; 1
    4da8:	a1 1d       	adc	r26, r1
    4daa:	b1 1d       	adc	r27, r1
    4dac:	8b 83       	std	Y+3, r24	; 0x03
    4dae:	9c 83       	std	Y+4, r25	; 0x04
    4db0:	ad 83       	std	Y+5, r26	; 0x05
    4db2:	be 83       	std	Y+6, r27	; 0x06
    4db4:	8a 81       	ldd	r24, Y+2	; 0x02
    4db6:	84 30       	cpi	r24, 0x04	; 4
    4db8:	f0 f2       	brcs	.-68     	; 0x4d76 <IsCorrect+0x38>
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
        }

    // Compare entered password with stored password
    for (iterator = 0; iterator < 4; iterator++) {
    4dba:	1a 82       	std	Y+2, r1	; 0x02
    4dbc:	1b c0       	rjmp	.+54     	; 0x4df4 <IsCorrect+0xb6>
        if (Copy_u8Password[iterator] != Local_u8Pass[iterator]) {
    4dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc0:	28 2f       	mov	r18, r24
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dc8:	fc 01       	movw	r30, r24
    4dca:	e2 0f       	add	r30, r18
    4dcc:	f3 1f       	adc	r31, r19
    4dce:	40 81       	ld	r20, Z
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	28 2f       	mov	r18, r24
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	07 96       	adiw	r24, 0x07	; 7
    4dda:	fc 01       	movw	r30, r24
    4ddc:	e2 0f       	add	r30, r18
    4dde:	f3 1f       	adc	r31, r19
    4de0:	80 81       	ld	r24, Z
    4de2:	48 17       	cp	r20, r24
    4de4:	19 f0       	breq	.+6      	; 0x4dec <IsCorrect+0xae>
            state = NOT_CORRECT;
    4de6:	81 e0       	ldi	r24, 0x01	; 1
    4de8:	89 83       	std	Y+1, r24	; 0x01
    4dea:	01 c0       	rjmp	.+2      	; 0x4dee <IsCorrect+0xb0>
        } else {
            state = CORRECT;
    4dec:	19 82       	std	Y+1, r1	; 0x01
    for (iterator = 0; iterator < 4; iterator++, Address++) {
            EEPROM_ReadByte(Address, &Local_u8Pass[iterator]);
        }

    // Compare entered password with stored password
    for (iterator = 0; iterator < 4; iterator++) {
    4dee:	8a 81       	ldd	r24, Y+2	; 0x02
    4df0:	8f 5f       	subi	r24, 0xFF	; 255
    4df2:	8a 83       	std	Y+2, r24	; 0x02
    4df4:	8a 81       	ldd	r24, Y+2	; 0x02
    4df6:	84 30       	cpi	r24, 0x04	; 4
    4df8:	10 f3       	brcs	.-60     	; 0x4dbe <IsCorrect+0x80>
        } else {
            state = CORRECT;
        }
    }

    return state;
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    4dfc:	2c 96       	adiw	r28, 0x0c	; 12
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	0f be       	out	0x3f, r0	; 63
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	cf 91       	pop	r28
    4e0a:	df 91       	pop	r29
    4e0c:	08 95       	ret

00004e0e <WaitingISR>:

void WaitingISR(void){
    4e0e:	df 93       	push	r29
    4e10:	cf 93       	push	r28
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
	static u16 Counter = 0;
	Counter++;
    4e16:	80 91 42 01 	lds	r24, 0x0142
    4e1a:	90 91 43 01 	lds	r25, 0x0143
    4e1e:	01 96       	adiw	r24, 0x01	; 1
    4e20:	90 93 43 01 	sts	0x0143, r25
    4e24:	80 93 42 01 	sts	0x0142, r24
	if(Counter == 4000){
    4e28:	80 91 42 01 	lds	r24, 0x0142
    4e2c:	90 91 43 01 	lds	r25, 0x0143
    4e30:	2f e0       	ldi	r18, 0x0F	; 15
    4e32:	80 3a       	cpi	r24, 0xA0	; 160
    4e34:	92 07       	cpc	r25, r18
    4e36:	49 f4       	brne	.+18     	; 0x4e4a <WaitingISR+0x3c>
		seconds++;
    4e38:	80 91 48 01 	lds	r24, 0x0148
    4e3c:	8f 5f       	subi	r24, 0xFF	; 255
    4e3e:	80 93 48 01 	sts	0x0148, r24
		Counter = 0;
    4e42:	10 92 43 01 	sts	0x0143, r1
    4e46:	10 92 42 01 	sts	0x0142, r1
	}
}
    4e4a:	cf 91       	pop	r28
    4e4c:	df 91       	pop	r29
    4e4e:	08 95       	ret

00004e50 <__mulsi3>:
    4e50:	62 9f       	mul	r22, r18
    4e52:	d0 01       	movw	r26, r0
    4e54:	73 9f       	mul	r23, r19
    4e56:	f0 01       	movw	r30, r0
    4e58:	82 9f       	mul	r24, r18
    4e5a:	e0 0d       	add	r30, r0
    4e5c:	f1 1d       	adc	r31, r1
    4e5e:	64 9f       	mul	r22, r20
    4e60:	e0 0d       	add	r30, r0
    4e62:	f1 1d       	adc	r31, r1
    4e64:	92 9f       	mul	r25, r18
    4e66:	f0 0d       	add	r31, r0
    4e68:	83 9f       	mul	r24, r19
    4e6a:	f0 0d       	add	r31, r0
    4e6c:	74 9f       	mul	r23, r20
    4e6e:	f0 0d       	add	r31, r0
    4e70:	65 9f       	mul	r22, r21
    4e72:	f0 0d       	add	r31, r0
    4e74:	99 27       	eor	r25, r25
    4e76:	72 9f       	mul	r23, r18
    4e78:	b0 0d       	add	r27, r0
    4e7a:	e1 1d       	adc	r30, r1
    4e7c:	f9 1f       	adc	r31, r25
    4e7e:	63 9f       	mul	r22, r19
    4e80:	b0 0d       	add	r27, r0
    4e82:	e1 1d       	adc	r30, r1
    4e84:	f9 1f       	adc	r31, r25
    4e86:	bd 01       	movw	r22, r26
    4e88:	cf 01       	movw	r24, r30
    4e8a:	11 24       	eor	r1, r1
    4e8c:	08 95       	ret

00004e8e <__divmodsi4>:
    4e8e:	97 fb       	bst	r25, 7
    4e90:	09 2e       	mov	r0, r25
    4e92:	05 26       	eor	r0, r21
    4e94:	0e d0       	rcall	.+28     	; 0x4eb2 <__divmodsi4_neg1>
    4e96:	57 fd       	sbrc	r21, 7
    4e98:	04 d0       	rcall	.+8      	; 0x4ea2 <__divmodsi4_neg2>
    4e9a:	14 d0       	rcall	.+40     	; 0x4ec4 <__udivmodsi4>
    4e9c:	0a d0       	rcall	.+20     	; 0x4eb2 <__divmodsi4_neg1>
    4e9e:	00 1c       	adc	r0, r0
    4ea0:	38 f4       	brcc	.+14     	; 0x4eb0 <__divmodsi4_exit>

00004ea2 <__divmodsi4_neg2>:
    4ea2:	50 95       	com	r21
    4ea4:	40 95       	com	r20
    4ea6:	30 95       	com	r19
    4ea8:	21 95       	neg	r18
    4eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4eac:	4f 4f       	sbci	r20, 0xFF	; 255
    4eae:	5f 4f       	sbci	r21, 0xFF	; 255

00004eb0 <__divmodsi4_exit>:
    4eb0:	08 95       	ret

00004eb2 <__divmodsi4_neg1>:
    4eb2:	f6 f7       	brtc	.-4      	; 0x4eb0 <__divmodsi4_exit>
    4eb4:	90 95       	com	r25
    4eb6:	80 95       	com	r24
    4eb8:	70 95       	com	r23
    4eba:	61 95       	neg	r22
    4ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec2:	08 95       	ret

00004ec4 <__udivmodsi4>:
    4ec4:	a1 e2       	ldi	r26, 0x21	; 33
    4ec6:	1a 2e       	mov	r1, r26
    4ec8:	aa 1b       	sub	r26, r26
    4eca:	bb 1b       	sub	r27, r27
    4ecc:	fd 01       	movw	r30, r26
    4ece:	0d c0       	rjmp	.+26     	; 0x4eea <__udivmodsi4_ep>

00004ed0 <__udivmodsi4_loop>:
    4ed0:	aa 1f       	adc	r26, r26
    4ed2:	bb 1f       	adc	r27, r27
    4ed4:	ee 1f       	adc	r30, r30
    4ed6:	ff 1f       	adc	r31, r31
    4ed8:	a2 17       	cp	r26, r18
    4eda:	b3 07       	cpc	r27, r19
    4edc:	e4 07       	cpc	r30, r20
    4ede:	f5 07       	cpc	r31, r21
    4ee0:	20 f0       	brcs	.+8      	; 0x4eea <__udivmodsi4_ep>
    4ee2:	a2 1b       	sub	r26, r18
    4ee4:	b3 0b       	sbc	r27, r19
    4ee6:	e4 0b       	sbc	r30, r20
    4ee8:	f5 0b       	sbc	r31, r21

00004eea <__udivmodsi4_ep>:
    4eea:	66 1f       	adc	r22, r22
    4eec:	77 1f       	adc	r23, r23
    4eee:	88 1f       	adc	r24, r24
    4ef0:	99 1f       	adc	r25, r25
    4ef2:	1a 94       	dec	r1
    4ef4:	69 f7       	brne	.-38     	; 0x4ed0 <__udivmodsi4_loop>
    4ef6:	60 95       	com	r22
    4ef8:	70 95       	com	r23
    4efa:	80 95       	com	r24
    4efc:	90 95       	com	r25
    4efe:	9b 01       	movw	r18, r22
    4f00:	ac 01       	movw	r20, r24
    4f02:	bd 01       	movw	r22, r26
    4f04:	cf 01       	movw	r24, r30
    4f06:	08 95       	ret

00004f08 <__prologue_saves__>:
    4f08:	2f 92       	push	r2
    4f0a:	3f 92       	push	r3
    4f0c:	4f 92       	push	r4
    4f0e:	5f 92       	push	r5
    4f10:	6f 92       	push	r6
    4f12:	7f 92       	push	r7
    4f14:	8f 92       	push	r8
    4f16:	9f 92       	push	r9
    4f18:	af 92       	push	r10
    4f1a:	bf 92       	push	r11
    4f1c:	cf 92       	push	r12
    4f1e:	df 92       	push	r13
    4f20:	ef 92       	push	r14
    4f22:	ff 92       	push	r15
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	ca 1b       	sub	r28, r26
    4f32:	db 0b       	sbc	r29, r27
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	09 94       	ijmp

00004f40 <__epilogue_restores__>:
    4f40:	2a 88       	ldd	r2, Y+18	; 0x12
    4f42:	39 88       	ldd	r3, Y+17	; 0x11
    4f44:	48 88       	ldd	r4, Y+16	; 0x10
    4f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f48:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f50:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f52:	b9 84       	ldd	r11, Y+9	; 0x09
    4f54:	c8 84       	ldd	r12, Y+8	; 0x08
    4f56:	df 80       	ldd	r13, Y+7	; 0x07
    4f58:	ee 80       	ldd	r14, Y+6	; 0x06
    4f5a:	fd 80       	ldd	r15, Y+5	; 0x05
    4f5c:	0c 81       	ldd	r16, Y+4	; 0x04
    4f5e:	1b 81       	ldd	r17, Y+3	; 0x03
    4f60:	aa 81       	ldd	r26, Y+2	; 0x02
    4f62:	b9 81       	ldd	r27, Y+1	; 0x01
    4f64:	ce 0f       	add	r28, r30
    4f66:	d1 1d       	adc	r29, r1
    4f68:	0f b6       	in	r0, 0x3f	; 63
    4f6a:	f8 94       	cli
    4f6c:	de bf       	out	0x3e, r29	; 62
    4f6e:	0f be       	out	0x3f, r0	; 63
    4f70:	cd bf       	out	0x3d, r28	; 61
    4f72:	ed 01       	movw	r28, r26
    4f74:	08 95       	ret

00004f76 <_exit>:
    4f76:	f8 94       	cli

00004f78 <__stop_program>:
    4f78:	ff cf       	rjmp	.-2      	; 0x4f78 <__stop_program>
